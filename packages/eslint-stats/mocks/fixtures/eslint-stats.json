[{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/docs/examples/cpu-prof.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":9.518833},"rules":{"for-direction":{"total":0.00275},"no-async-promise-executor":{"total":0.000875},"no-case-declarations":{"total":0.001334},"no-compare-neg-zero":{"total":0.015458},"no-cond-assign":{"total":0.014626},"no-constant-binary-expression":{"total":0.008875000000000001},"no-constant-condition":{"total":0.10670700000000002},"no-control-regex":{"total":0.6723320000000003},"no-debugger":{"total":0.00125},"no-delete-var":{"total":0.010459},"no-dupe-else-if":{"total":0.061958000000000006},"no-duplicate-case":{"total":0.001},"no-empty":{"total":0.025998},"no-empty-character-class":{"total":0.015917},"no-empty-pattern":{"total":0.019251},"no-empty-static-block":{"total":0.000917},"no-ex-assign":{"total":0.024042},"no-extra-boolean-cast":{"total":0.031332000000000006},"no-fallthrough":{"total":0.03670500000000001},"no-global-assign":{"total":0.064876},"no-invalid-regexp":{"total":0.012290000000000002},"no-irregular-whitespace":{"total":0.027792},"no-loss-of-precision":{"total":0.21657999999999994},"no-misleading-character-class":{"total":0.332293},"no-nonoctal-decimal-escape":{"total":0.027503000000000007},"no-octal":{"total":0.027589000000000016},"no-prototype-builtins":{"total":0.11366800000000002},"no-regex-spaces":{"total":0.13578299999999993},"no-self-assign":{"total":0.001334},"no-shadow-restricted-names":{"total":0.02346000000000001},"no-sparse-arrays":{"total":0.006167},"no-unsafe-finally":{"total":0.1055},"no-unsafe-optional-chaining":{"total":0.054129000000000024},"no-unused-labels":{"total":0.002209},"no-unused-private-class-members":{"total":0.001417},"no-useless-backreference":{"total":0.078375},"no-useless-catch":{"total":0.0155},"no-useless-escape":{"total":0.4596679999999999},"require-yield":{"total":0.016125},"use-isnan":{"total":0.031541},"valid-typeof":{"total":0.038583000000000006},"no-var":{"total":0.003706},"prefer-const":{"total":0.005794},"prefer-rest-params":{"total":0.025958000000000002},"prefer-spread":{"total":0.026958000000000003},"@typescript-eslint/ban-ts-comment":{"total":0.23075},"@typescript-eslint/no-array-constructor":{"total":0.021371000000000005},"@typescript-eslint/no-duplicate-enum-values":{"total":0.002166},"@typescript-eslint/no-empty-object-type":{"total":0.005083},"@typescript-eslint/no-explicit-any":{"total":0.008875},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.002833},"@typescript-eslint/no-misused-new":{"total":0.002459},"@typescript-eslint/no-namespace":{"total":0.003333},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.003292},"@typescript-eslint/no-this-alias":{"total":0.003917},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.010125},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.002292},"@typescript-eslint/no-unsafe-function-type":{"total":0.002416},"@typescript-eslint/no-unused-expressions":{"total":0.1687049999999999},"@typescript-eslint/no-unused-vars":{"total":1.460168},"@typescript-eslint/no-wrapper-object-types":{"total":0.001875},"@typescript-eslint/prefer-as-const":{"total":0.006041},"@typescript-eslint/prefer-namespace-keyword":{"total":0.00175},"@typescript-eslint/triple-slash-reference":{"total":0.10520900000000001},"@typescript-eslint/no-non-null-assertion":{"total":0.001667},"@typescript-eslint/adjacent-overload-signatures":{"total":0.165916},"@typescript-eslint/no-empty-function":{"total":0.29745800000000006},"@typescript-eslint/no-inferrable-types":{"total":0.040045000000000004},"@typescript-eslint/no-empty-interface":{"total":0.007125},"@nx/enforce-module-boundaries":{"total":0.077292}},"fix":{"total":0},"total":18.859834}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/docs/examples/exmpl-create-threads.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":12.552542},"rules":{"for-direction":{"total":0.026916},"no-async-promise-executor":{"total":0.010625},"no-case-declarations":{"total":0.00775},"no-compare-neg-zero":{"total":0.029208},"no-cond-assign":{"total":0.020541},"no-constant-binary-expression":{"total":0.052916000000000005},"no-constant-condition":{"total":0.048209},"no-control-regex":{"total":0.038251},"no-debugger":{"total":0.0085},"no-delete-var":{"total":0.006459},"no-dupe-else-if":{"total":0.00925},"no-duplicate-case":{"total":0.007459},"no-empty":{"total":0.010916},"no-empty-character-class":{"total":0.006083},"no-empty-pattern":{"total":0.010542},"no-empty-static-block":{"total":0.006583},"no-ex-assign":{"total":0.007292},"no-extra-boolean-cast":{"total":0.030542},"no-fallthrough":{"total":0.054832},"no-global-assign":{"total":0.19487600000000002},"no-invalid-regexp":{"total":0.052292000000000005},"no-irregular-whitespace":{"total":0.055708},"no-loss-of-precision":{"total":0.025792000000000002},"no-misleading-character-class":{"total":0.160625},"no-nonoctal-decimal-escape":{"total":0.082999},"no-octal":{"total":0.013166},"no-prototype-builtins":{"total":0.053083},"no-regex-spaces":{"total":0.07483600000000001},"no-self-assign":{"total":0.0115},"no-shadow-restricted-names":{"total":0.041958},"no-sparse-arrays":{"total":0.006584},"no-unsafe-finally":{"total":0.010417},"no-unsafe-optional-chaining":{"total":0.085333},"no-unused-labels":{"total":0.01875},"no-unused-private-class-members":{"total":0.010958},"no-useless-backreference":{"total":0.108959},"no-useless-catch":{"total":0.005167},"no-useless-escape":{"total":0.065833},"require-yield":{"total":0.012208},"use-isnan":{"total":0.058249999999999996},"valid-typeof":{"total":0.027},"no-var":{"total":0.017583},"prefer-const":{"total":0.047293},"prefer-rest-params":{"total":0.009167},"prefer-spread":{"total":0.045916},"@typescript-eslint/ban-ts-comment":{"total":0.105833},"@typescript-eslint/no-array-constructor":{"total":0.025457},"@typescript-eslint/no-duplicate-enum-values":{"total":0.011042},"@typescript-eslint/no-empty-object-type":{"total":0.024083},"@typescript-eslint/no-explicit-any":{"total":0.021041},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.010292},"@typescript-eslint/no-misused-new":{"total":0.01125},"@typescript-eslint/no-namespace":{"total":0.014208},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.010541},"@typescript-eslint/no-this-alias":{"total":0.016334},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.043041},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.009084},"@typescript-eslint/no-unsafe-function-type":{"total":0.009291},"@typescript-eslint/no-unused-expressions":{"total":0.11879200000000001},"@typescript-eslint/no-unused-vars":{"total":2.081959},"@typescript-eslint/no-wrapper-object-types":{"total":0.008458},"@typescript-eslint/prefer-as-const":{"total":0.016916},"@typescript-eslint/prefer-namespace-keyword":{"total":0.006583},"@typescript-eslint/triple-slash-reference":{"total":0.199333},"@typescript-eslint/no-non-null-assertion":{"total":0.006708},"@typescript-eslint/adjacent-overload-signatures":{"total":0.091082},"@typescript-eslint/no-empty-function":{"total":0.101459},"@typescript-eslint/no-inferrable-types":{"total":0.056917999999999996},"@typescript-eslint/no-empty-interface":{"total":0.0115},"@nx/enforce-module-boundaries":{"total":5.586959}},"fix":{"total":0},"total":30.686375}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/docs/examples/exmpl-script.js","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sum' is assigned a value but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { threadId as t } from 'worker_threads';\nconsole.log('spawn PID:', process.pid, 'TID:', t);\nlet sum = 0;\nfor (let i = 0; i < 10000000; i++) {\n  sum += Math.sqrt(i);\n}\nprocess.exit(0);\n","stats":{"times":{"passes":[{"parse":{"total":1.382333},"rules":{"for-direction":{"total":0.045542},"no-async-promise-executor":{"total":0.000791},"no-case-declarations":{"total":0.000625},"no-compare-neg-zero":{"total":0.002626},"no-cond-assign":{"total":0.0028329999999999996},"no-constant-binary-expression":{"total":0.002624},"no-constant-condition":{"total":0.09212500000000001},"no-control-regex":{"total":0.006332},"no-debugger":{"total":0.001042},"no-delete-var":{"total":0.000667},"no-dupe-else-if":{"total":0.001},"no-duplicate-case":{"total":0.000875},"no-empty":{"total":0.006208},"no-empty-character-class":{"total":0.000708},"no-empty-pattern":{"total":0.00125},"no-empty-static-block":{"total":0.000625},"no-ex-assign":{"total":0.000667},"no-extra-boolean-cast":{"total":0.0025830000000000002},"no-fallthrough":{"total":0.007082999999999999},"no-global-assign":{"total":0.055126},"no-invalid-regexp":{"total":0.001875},"no-irregular-whitespace":{"total":0.024292},"no-loss-of-precision":{"total":0.008626},"no-misleading-character-class":{"total":0.020042},"no-nonoctal-decimal-escape":{"total":0.002251},"no-octal":{"total":0.001708},"no-prototype-builtins":{"total":0.007},"no-regex-spaces":{"total":0.006749000000000001},"no-self-assign":{"total":0.009125},"no-shadow-restricted-names":{"total":0.002708},"no-sparse-arrays":{"total":0.000583},"no-unsafe-finally":{"total":0.001292},"no-unsafe-optional-chaining":{"total":0.011583},"no-unused-labels":{"total":0.001458},"no-unused-private-class-members":{"total":0.001167},"no-useless-backreference":{"total":0.003791},"no-useless-catch":{"total":0.000625},"no-useless-escape":{"total":0.009833000000000001},"require-yield":{"total":0.004209},"use-isnan":{"total":0.005042},"valid-typeof":{"total":0.0027080000000000003},"no-var":{"total":0.0012079999999999999},"prefer-const":{"total":0.230208},"prefer-rest-params":{"total":0.000833},"prefer-spread":{"total":0.002625},"@typescript-eslint/ban-ts-comment":{"total":0.025124999999999998},"@typescript-eslint/no-array-constructor":{"total":0.007417},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001834},"@typescript-eslint/no-empty-object-type":{"total":0.004333},"@typescript-eslint/no-explicit-any":{"total":0.002958},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.002167},"@typescript-eslint/no-misused-new":{"total":0.001958},"@typescript-eslint/no-namespace":{"total":0.002334},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001542},"@typescript-eslint/no-this-alias":{"total":0.0025},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.006292},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001375},"@typescript-eslint/no-unsafe-function-type":{"total":0.001292},"@typescript-eslint/no-unused-expressions":{"total":0.017168},"@typescript-eslint/no-unused-vars":{"total":0.9119579999999999},"@typescript-eslint/no-wrapper-object-types":{"total":0.002084},"@typescript-eslint/prefer-as-const":{"total":0.0024999999999999996},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001125},"@typescript-eslint/triple-slash-reference":{"total":0.012043},"@typescript-eslint/no-non-null-assertion":{"total":0.001209},"@typescript-eslint/adjacent-overload-signatures":{"total":0.006834},"@typescript-eslint/no-empty-function":{"total":0.005667},"@typescript-eslint/no-inferrable-types":{"total":0.006708},"@typescript-eslint/no-empty-interface":{"total":0.003},"@nx/enforce-module-boundaries":{"total":0.159876}},"fix":{"total":0},"total":4.743792}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/docs/examples/exmpl-spawn-processes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":3.524375},"rules":{"for-direction":{"total":0.001917},"no-async-promise-executor":{"total":0.000666},"no-case-declarations":{"total":0.00075},"no-compare-neg-zero":{"total":0.001875},"no-cond-assign":{"total":0.002375},"no-constant-binary-expression":{"total":0.001542},"no-constant-condition":{"total":0.005167},"no-control-regex":{"total":0.005917},"no-debugger":{"total":0.000959},"no-delete-var":{"total":0.00075},"no-dupe-else-if":{"total":0.001},"no-duplicate-case":{"total":0.00075},"no-empty":{"total":0.001208},"no-empty-character-class":{"total":0.001},"no-empty-pattern":{"total":0.001167},"no-empty-static-block":{"total":0.000708},"no-ex-assign":{"total":0.000625},"no-extra-boolean-cast":{"total":0.004752},"no-fallthrough":{"total":0.005082},"no-global-assign":{"total":0.06983199999999999},"no-invalid-regexp":{"total":0.050126},"no-irregular-whitespace":{"total":0.008084000000000001},"no-loss-of-precision":{"total":0.0036240000000000005},"no-misleading-character-class":{"total":0.014875},"no-nonoctal-decimal-escape":{"total":0.005917999999999999},"no-octal":{"total":0.0023760000000000005},"no-prototype-builtins":{"total":0.005374},"no-regex-spaces":{"total":0.02146200000000001},"no-self-assign":{"total":0.000833},"no-shadow-restricted-names":{"total":0.005626000000000001},"no-sparse-arrays":{"total":0.036251},"no-unsafe-finally":{"total":0.001375},"no-unsafe-optional-chaining":{"total":0.009080999999999999},"no-unused-labels":{"total":0.001208},"no-unused-private-class-members":{"total":0.000833},"no-useless-backreference":{"total":0.012582999999999999},"no-useless-catch":{"total":0.000541},"no-useless-escape":{"total":0.007835},"require-yield":{"total":0.001167},"use-isnan":{"total":0.001542},"valid-typeof":{"total":0.002041},"no-var":{"total":0.001542},"prefer-const":{"total":0.002418},"prefer-rest-params":{"total":0.000709},"prefer-spread":{"total":0.005207999999999999},"@typescript-eslint/ban-ts-comment":{"total":0.019624},"@typescript-eslint/no-array-constructor":{"total":0.0059169999999999995},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001708},"@typescript-eslint/no-empty-object-type":{"total":0.004},"@typescript-eslint/no-explicit-any":{"total":0.002791},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.00175},"@typescript-eslint/no-misused-new":{"total":0.00175},"@typescript-eslint/no-namespace":{"total":0.002375},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.0015},"@typescript-eslint/no-this-alias":{"total":0.002334},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.008291},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001875},"@typescript-eslint/no-unsafe-function-type":{"total":0.006333},"@typescript-eslint/no-unused-expressions":{"total":0.023834},"@typescript-eslint/no-unused-vars":{"total":0.5507070000000001},"@typescript-eslint/no-wrapper-object-types":{"total":0.00175},"@typescript-eslint/prefer-as-const":{"total":0.002375},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001083},"@typescript-eslint/triple-slash-reference":{"total":0.011499},"@typescript-eslint/no-non-null-assertion":{"total":0.001417},"@typescript-eslint/adjacent-overload-signatures":{"total":0.0069169999999999995},"@typescript-eslint/no-empty-function":{"total":0.005958},"@typescript-eslint/no-inferrable-types":{"total":0.006417},"@typescript-eslint/no-empty-interface":{"total":0.002959},"@nx/enforce-module-boundaries":{"total":0.081376}},"fix":{"total":0},"total":6.219708}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/docs/examples/minimal-trace-event-instant-event-complex-profile-chunks.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.944875},"rules":{"@nx/dependency-checks":{"total":0.023917}},"fix":{"total":0},"total":2.07625}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/docs/examples/minimal-trace-event-instant-event-simple-profile-chunks.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":5.77125},"rules":{"@nx/dependency-checks":{"total":0.135833}},"fix":{"total":0},"total":7.078209}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/docs/examples/minimal-trace-event-instant-event-start-profiling.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.698334},"rules":{"@nx/dependency-checks":{"total":0.01725}},"fix":{"total":0},"total":1.671041}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/docs/examples/minimal-trace-event-instant-event-tracing-started-in-browser.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.411583},"rules":{"@nx/dependency-checks":{"total":0.013334}},"fix":{"total":0},"total":1.214125}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/docs/examples/minimal-trace-event-pid-tid-grouping.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.39025},"rules":{"@nx/dependency-checks":{"total":0.03325}},"fix":{"total":0},"total":2.614291}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/eslint.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":1.04},"rules":{"for-direction":{"total":0.001958},"no-async-promise-executor":{"total":0.000583},"no-case-declarations":{"total":0.00075},"no-compare-neg-zero":{"total":0.001625},"no-cond-assign":{"total":0.002},"no-constant-binary-expression":{"total":0.001125},"no-constant-condition":{"total":0.003833},"no-control-regex":{"total":0.00575},"no-debugger":{"total":0.00075},"no-delete-var":{"total":0.000584},"no-dupe-else-if":{"total":0.001},"no-duplicate-case":{"total":0.000625},"no-empty":{"total":0.001083},"no-empty-character-class":{"total":0.000792},"no-empty-pattern":{"total":0.000958},"no-empty-static-block":{"total":0.000625},"no-ex-assign":{"total":0.000833},"no-extra-boolean-cast":{"total":0.00225},"no-fallthrough":{"total":0.009668},"no-global-assign":{"total":0.074292},"no-invalid-regexp":{"total":0.001209},"no-irregular-whitespace":{"total":0.004375},"no-loss-of-precision":{"total":0.0023760000000000005},"no-misleading-character-class":{"total":0.016416},"no-nonoctal-decimal-escape":{"total":0.003626},"no-octal":{"total":0.001626},"no-prototype-builtins":{"total":0.001125},"no-regex-spaces":{"total":0.0024160000000000006},"no-self-assign":{"total":0.00125},"no-shadow-restricted-names":{"total":0.008376},"no-sparse-arrays":{"total":0.00196},"no-unsafe-finally":{"total":0.001541},"no-unsafe-optional-chaining":{"total":0.020167},"no-unused-labels":{"total":0.0015},"no-unused-private-class-members":{"total":0.001125},"no-useless-backreference":{"total":0.007083},"no-useless-catch":{"total":0.000625},"no-useless-escape":{"total":0.006833},"require-yield":{"total":0.0015},"use-isnan":{"total":0.002041},"valid-typeof":{"total":0.0025},"no-var":{"total":0.000792},"prefer-const":{"total":0.002417},"prefer-rest-params":{"total":0.001},"prefer-spread":{"total":0.00075},"@typescript-eslint/ban-ts-comment":{"total":0.086541},"@typescript-eslint/no-array-constructor":{"total":0.002875},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001792},"@typescript-eslint/no-empty-object-type":{"total":0.003834},"@typescript-eslint/no-explicit-any":{"total":0.002667},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001958},"@typescript-eslint/no-misused-new":{"total":0.001541},"@typescript-eslint/no-namespace":{"total":0.002375},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001417},"@typescript-eslint/no-this-alias":{"total":0.002375},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.006334},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001583},"@typescript-eslint/no-unsafe-function-type":{"total":0.001417},"@typescript-eslint/no-unused-expressions":{"total":0.012292},"@typescript-eslint/no-unused-vars":{"total":0.436166},"@typescript-eslint/no-wrapper-object-types":{"total":0.001958},"@typescript-eslint/prefer-as-const":{"total":0.00175},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001209},"@typescript-eslint/triple-slash-reference":{"total":0.013833000000000002},"@typescript-eslint/no-non-null-assertion":{"total":0.001417},"@typescript-eslint/adjacent-overload-signatures":{"total":0.006208},"@typescript-eslint/no-empty-function":{"total":0.004666},"@typescript-eslint/no-inferrable-types":{"total":0.004833},"@typescript-eslint/no-empty-interface":{"total":0.001959}},"fix":{"total":0},"total":3.009625}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/lint-stats.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":64.859125},"rules":{"@nx/dependency-checks":{"total":0.0595}},"fix":{"total":0},"total":83.89825}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/mocks/execute-process-helper.mock.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":2.161208},"rules":{"for-direction":{"total":0.001625},"no-async-promise-executor":{"total":0.000833},"no-case-declarations":{"total":0.000791},"no-compare-neg-zero":{"total":0.003624},"no-cond-assign":{"total":0.003874},"no-constant-binary-expression":{"total":0.005543},"no-constant-condition":{"total":0.009248999999999999},"no-control-regex":{"total":0.002834},"no-debugger":{"total":0.000834},"no-delete-var":{"total":0.00075},"no-dupe-else-if":{"total":0.000958},"no-duplicate-case":{"total":0.000875},"no-empty":{"total":0.0017920000000000002},"no-empty-character-class":{"total":0.000875},"no-empty-pattern":{"total":0.001166},"no-empty-static-block":{"total":0.00075},"no-ex-assign":{"total":0.000791},"no-extra-boolean-cast":{"total":0.002333},"no-fallthrough":{"total":0.012043000000000002},"no-global-assign":{"total":0.025042000000000002},"no-invalid-regexp":{"total":0.004292},"no-irregular-whitespace":{"total":0.004458},"no-loss-of-precision":{"total":0.0022500000000000007},"no-misleading-character-class":{"total":0.011875},"no-nonoctal-decimal-escape":{"total":0.003125},"no-octal":{"total":0.0025430000000000006},"no-prototype-builtins":{"total":0.002916},"no-regex-spaces":{"total":0.004666999999999999},"no-self-assign":{"total":0.000917},"no-shadow-restricted-names":{"total":0.003792},"no-sparse-arrays":{"total":0.001376},"no-unsafe-finally":{"total":0.0034590000000000003},"no-unsafe-optional-chaining":{"total":0.007417999999999998},"no-unused-labels":{"total":0.001916},"no-unused-private-class-members":{"total":0.001584},"no-useless-backreference":{"total":0.004084},"no-useless-catch":{"total":0.000542},"no-useless-escape":{"total":0.004874},"require-yield":{"total":0.001959},"use-isnan":{"total":0.056166},"valid-typeof":{"total":0.002166},"no-var":{"total":0.001292},"prefer-const":{"total":0.0032500000000000003},"prefer-rest-params":{"total":0.003833},"prefer-spread":{"total":0.001958},"@typescript-eslint/ban-ts-comment":{"total":0.060542},"@typescript-eslint/no-array-constructor":{"total":0.003376},"@typescript-eslint/no-duplicate-enum-values":{"total":0.002083},"@typescript-eslint/no-empty-object-type":{"total":0.031709},"@typescript-eslint/no-explicit-any":{"total":0.003417},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.002166},"@typescript-eslint/no-misused-new":{"total":0.002},"@typescript-eslint/no-namespace":{"total":0.003},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001875},"@typescript-eslint/no-this-alias":{"total":0.003333},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.007583},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.002875},"@typescript-eslint/no-unsafe-function-type":{"total":0.002042},"@typescript-eslint/no-unused-expressions":{"total":0.01525},"@typescript-eslint/no-unused-vars":{"total":0.471125},"@typescript-eslint/no-wrapper-object-types":{"total":0.002084},"@typescript-eslint/prefer-as-const":{"total":0.0026669999999999997},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001375},"@typescript-eslint/triple-slash-reference":{"total":0.009209},"@typescript-eslint/no-non-null-assertion":{"total":0.001417},"@typescript-eslint/adjacent-overload-signatures":{"total":0.010667},"@typescript-eslint/no-empty-function":{"total":0.021582999999999998},"@typescript-eslint/no-inferrable-types":{"total":0.011542},"@typescript-eslint/no-empty-interface":{"total":0.002708},"@nx/enforce-module-boundaries":{"total":0.04824899999999999}},"fix":{"total":0},"total":4.570333}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/mocks/execute-process.mock.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":1.555916},"rules":{"for-direction":{"total":0.00175},"no-async-promise-executor":{"total":0.000916},"no-case-declarations":{"total":0.000667},"no-compare-neg-zero":{"total":0.003666},"no-cond-assign":{"total":0.00375},"no-constant-binary-expression":{"total":0.07404200000000001},"no-constant-condition":{"total":0.00825},"no-control-regex":{"total":0.004458999999999999},"no-debugger":{"total":0.000833},"no-delete-var":{"total":0.000584},"no-dupe-else-if":{"total":0.00475},"no-duplicate-case":{"total":0.000709},"no-empty":{"total":0.002461},"no-empty-character-class":{"total":0.00075},"no-empty-pattern":{"total":0.001},"no-empty-static-block":{"total":0.000541},"no-ex-assign":{"total":0.000708},"no-extra-boolean-cast":{"total":0.003169},"no-fallthrough":{"total":0.011747000000000006},"no-global-assign":{"total":0.025749},"no-invalid-regexp":{"total":0.00379},"no-irregular-whitespace":{"total":0.008917000000000001},"no-loss-of-precision":{"total":0.019833},"no-misleading-character-class":{"total":0.011376},"no-nonoctal-decimal-escape":{"total":0.0030839999999999995},"no-octal":{"total":0.0025400000000000006},"no-prototype-builtins":{"total":0.003543},"no-regex-spaces":{"total":0.015582},"no-self-assign":{"total":0.00075},"no-shadow-restricted-names":{"total":0.003877},"no-sparse-arrays":{"total":0.000583},"no-unsafe-finally":{"total":0.00775},"no-unsafe-optional-chaining":{"total":0.008288999999999998},"no-unused-labels":{"total":0.001292},"no-unused-private-class-members":{"total":0.000959},"no-useless-backreference":{"total":0.003666},"no-useless-catch":{"total":0.0005},"no-useless-escape":{"total":0.009794},"require-yield":{"total":0.001334},"use-isnan":{"total":0.005958},"valid-typeof":{"total":0.001917},"no-var":{"total":0.001458},"prefer-const":{"total":0.012584},"prefer-rest-params":{"total":0.000792},"prefer-spread":{"total":0.00321},"@typescript-eslint/ban-ts-comment":{"total":0.050667000000000004},"@typescript-eslint/no-array-constructor":{"total":0.0038330000000000013},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001833},"@typescript-eslint/no-empty-object-type":{"total":0.004041},"@typescript-eslint/no-explicit-any":{"total":0.002625},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001917},"@typescript-eslint/no-misused-new":{"total":0.001625},"@typescript-eslint/no-namespace":{"total":0.002375},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001417},"@typescript-eslint/no-this-alias":{"total":0.002417},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.006458},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.0015},"@typescript-eslint/no-unsafe-function-type":{"total":0.001583},"@typescript-eslint/no-unused-expressions":{"total":0.020208000000000004},"@typescript-eslint/no-unused-vars":{"total":1.691042},"@typescript-eslint/no-wrapper-object-types":{"total":0.01125},"@typescript-eslint/prefer-as-const":{"total":0.003501},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001583},"@typescript-eslint/triple-slash-reference":{"total":0.010166999999999999},"@typescript-eslint/no-non-null-assertion":{"total":0.001541},"@typescript-eslint/adjacent-overload-signatures":{"total":0.00875},"@typescript-eslint/no-empty-function":{"total":0.138041},"@typescript-eslint/no-inferrable-types":{"total":0.008833},"@typescript-eslint/no-empty-interface":{"total":0.002}},"fix":{"total":0},"total":5.148208}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/mocks/fixtures/Trace-short-base.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":2007.7535},"rules":{"@nx/dependency-checks":{"total":0.065666}},"fix":{"total":0},"total":2783.0303750000003}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/mocks/fixtures/minimal.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.473292},"rules":{"@nx/dependency-checks":{"total":0.015917}},"fix":{"total":0},"total":1.205875}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/mocks/fixtures/minimal/alternating-peaks.cpuprofile.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.524167},"rules":{"@nx/dependency-checks":{"total":0.021583}},"fix":{"total":0},"total":1.400291}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/mocks/fixtures/minimal/flat-line.cpuprofile.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.441292},"rules":{"@nx/dependency-checks":{"total":0.023125}},"fix":{"total":0},"total":1.369583}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/mocks/fixtures/minimal/pyramide.cpuprofile.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.509},"rules":{"@nx/dependency-checks":{"total":0.018416}},"fix":{"total":0},"total":1.379959}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/mocks/fixtures/minimal/stair-down.cpuprofile.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.520125},"rules":{"@nx/dependency-checks":{"total":0.013}},"fix":{"total":0},"total":1.271375}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/mocks/fixtures/minimal/stair-up.cpuprofile.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.369417},"rules":{"@nx/dependency-checks":{"total":0.057875}},"fix":{"total":0},"total":1.215542}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/mocks/fixtures/minimal/valley.cpuprofile.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.287791},"rules":{"@nx/dependency-checks":{"total":0.011708}},"fix":{"total":0},"total":1.009958}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/mocks/program/child-process.mjs","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sum' is assigned a value but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"console.log(`PID ${process.pid}`);\n\nlet sum = 0;\nfor (let i = 0; i < 1000000; i++) {\n  sum += Math.sqrt(i);\n}\nprocess.exit(0);\n","stats":{"times":{"passes":[{"parse":{"total":0.813666},"rules":{"for-direction":{"total":0.014624999999999999},"no-async-promise-executor":{"total":0.00125},"no-case-declarations":{"total":0.001084},"no-compare-neg-zero":{"total":0.0045000000000000005},"no-cond-assign":{"total":0.004375},"no-constant-binary-expression":{"total":0.0036249999999999998},"no-constant-condition":{"total":0.008751},"no-control-regex":{"total":0.0027500000000000003},"no-debugger":{"total":0.001625},"no-delete-var":{"total":0.001042},"no-dupe-else-if":{"total":0.001167},"no-duplicate-case":{"total":0.00125},"no-empty":{"total":0.002167},"no-empty-character-class":{"total":0.000958},"no-empty-pattern":{"total":0.001459},"no-empty-static-block":{"total":0.001},"no-ex-assign":{"total":0.001083},"no-extra-boolean-cast":{"total":0.006668},"no-fallthrough":{"total":0.009085000000000001},"no-global-assign":{"total":0.043083},"no-invalid-regexp":{"total":0.003834},"no-irregular-whitespace":{"total":0.005041},"no-loss-of-precision":{"total":0.013582},"no-misleading-character-class":{"total":0.019875},"no-nonoctal-decimal-escape":{"total":0.0019169999999999999},"no-octal":{"total":0.001876},"no-prototype-builtins":{"total":0.005541000000000001},"no-regex-spaces":{"total":0.007873999999999999},"no-self-assign":{"total":0.001999},"no-shadow-restricted-names":{"total":0.003334},"no-sparse-arrays":{"total":0.001208},"no-unsafe-finally":{"total":0.004791},"no-unsafe-optional-chaining":{"total":0.008876000000000002},"no-unused-labels":{"total":0.001542},"no-unused-private-class-members":{"total":0.001292},"no-useless-backreference":{"total":0.0043749999999999995},"no-useless-catch":{"total":0.000625},"no-useless-escape":{"total":0.011708000000000001},"require-yield":{"total":0.002458},"use-isnan":{"total":0.0085},"valid-typeof":{"total":0.0029170000000000003},"no-var":{"total":0.0015840000000000001},"prefer-const":{"total":0.013835},"prefer-rest-params":{"total":0.001167},"prefer-spread":{"total":0.003583},"@typescript-eslint/ban-ts-comment":{"total":0.021458},"@typescript-eslint/no-array-constructor":{"total":0.00425},"@typescript-eslint/no-duplicate-enum-values":{"total":0.002333},"@typescript-eslint/no-empty-object-type":{"total":0.006375},"@typescript-eslint/no-explicit-any":{"total":0.004209},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.002667},"@typescript-eslint/no-misused-new":{"total":0.010958},"@typescript-eslint/no-namespace":{"total":0.00375},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001791},"@typescript-eslint/no-this-alias":{"total":0.004458},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.010125},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.003},"@typescript-eslint/no-unsafe-function-type":{"total":0.002459},"@typescript-eslint/no-unused-expressions":{"total":0.021791},"@typescript-eslint/no-unused-vars":{"total":0.718791},"@typescript-eslint/no-wrapper-object-types":{"total":0.002583},"@typescript-eslint/prefer-as-const":{"total":0.0032909999999999997},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001792},"@typescript-eslint/triple-slash-reference":{"total":0.014667},"@typescript-eslint/no-non-null-assertion":{"total":0.001958},"@typescript-eslint/adjacent-overload-signatures":{"total":0.007416999999999999},"@typescript-eslint/no-empty-function":{"total":0.007625},"@typescript-eslint/no-inferrable-types":{"total":0.007542},"@typescript-eslint/no-empty-interface":{"total":0.002625}},"fix":{"total":0},"total":3.207333}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/mocks/program/fork-children.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":1.556625},"rules":{"for-direction":{"total":0.067167},"no-async-promise-executor":{"total":0.000958},"no-case-declarations":{"total":0.00075},"no-compare-neg-zero":{"total":0.0025},"no-cond-assign":{"total":0.0045},"no-constant-binary-expression":{"total":0.003626},"no-constant-condition":{"total":0.010834},"no-control-regex":{"total":0.0037950000000000006},"no-debugger":{"total":0.001},"no-delete-var":{"total":0.001291},"no-dupe-else-if":{"total":0.003958},"no-duplicate-case":{"total":0.001208},"no-empty":{"total":0.003915999999999999},"no-empty-character-class":{"total":0.000667},"no-empty-pattern":{"total":0.00225},"no-empty-static-block":{"total":0.000917},"no-ex-assign":{"total":0.001},"no-extra-boolean-cast":{"total":0.006041},"no-fallthrough":{"total":0.014042000000000006},"no-global-assign":{"total":0.029499},"no-invalid-regexp":{"total":0.009831},"no-irregular-whitespace":{"total":0.0059169999999999995},"no-loss-of-precision":{"total":0.011542},"no-misleading-character-class":{"total":0.015875},"no-nonoctal-decimal-escape":{"total":0.0039169999999999995},"no-octal":{"total":0.002585},"no-prototype-builtins":{"total":0.005831},"no-regex-spaces":{"total":0.015127999999999997},"no-self-assign":{"total":0.002166},"no-shadow-restricted-names":{"total":0.007500000000000001},"no-sparse-arrays":{"total":0.001583},"no-unsafe-finally":{"total":0.0015},"no-unsafe-optional-chaining":{"total":0.019502000000000005},"no-unused-labels":{"total":0.001875},"no-unused-private-class-members":{"total":0.001208},"no-useless-backreference":{"total":0.005},"no-useless-catch":{"total":0.00075},"no-useless-escape":{"total":0.009667},"require-yield":{"total":0.002375},"use-isnan":{"total":0.004834},"valid-typeof":{"total":0.004125},"no-var":{"total":0.0020020000000000003},"prefer-const":{"total":0.005209000000000001},"prefer-rest-params":{"total":0.001125},"prefer-spread":{"total":0.004372},"@typescript-eslint/ban-ts-comment":{"total":0.015042},"@typescript-eslint/no-array-constructor":{"total":0.005417999999999999},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001792},"@typescript-eslint/no-empty-object-type":{"total":0.005125},"@typescript-eslint/no-explicit-any":{"total":0.003834},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.002083},"@typescript-eslint/no-misused-new":{"total":0.002041},"@typescript-eslint/no-namespace":{"total":0.00375},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001791},"@typescript-eslint/no-this-alias":{"total":0.003125},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.010334},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.002},"@typescript-eslint/no-unsafe-function-type":{"total":0.001625},"@typescript-eslint/no-unused-expressions":{"total":0.020917000000000005},"@typescript-eslint/no-unused-vars":{"total":0.559708},"@typescript-eslint/no-wrapper-object-types":{"total":0.002166},"@typescript-eslint/prefer-as-const":{"total":0.0032080000000000003},"@typescript-eslint/prefer-namespace-keyword":{"total":0.00125},"@typescript-eslint/triple-slash-reference":{"total":0.012917000000000001},"@typescript-eslint/no-non-null-assertion":{"total":0.001416},"@typescript-eslint/adjacent-overload-signatures":{"total":0.009751000000000001},"@typescript-eslint/no-empty-function":{"total":0.022167000000000003},"@typescript-eslint/no-inferrable-types":{"total":0.011167000000000003},"@typescript-eslint/no-empty-interface":{"total":0.002875}},"fix":{"total":0},"total":3.890667}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/mocks/program/spawn-children.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":3.216417},"rules":{"for-direction":{"total":0.004791999999999999},"no-async-promise-executor":{"total":0.001166},"no-case-declarations":{"total":0.001292},"no-compare-neg-zero":{"total":0.003333},"no-cond-assign":{"total":0.004000999999999999},"no-constant-binary-expression":{"total":0.053248},"no-constant-condition":{"total":0.07275100000000001},"no-control-regex":{"total":0.009042000000000001},"no-debugger":{"total":0.001541},"no-delete-var":{"total":0.001083},"no-dupe-else-if":{"total":0.001583},"no-duplicate-case":{"total":0.001167},"no-empty":{"total":0.0031270000000000004},"no-empty-character-class":{"total":0.000958},"no-empty-pattern":{"total":0.001791},"no-empty-static-block":{"total":0.042},"no-ex-assign":{"total":0.001416},"no-extra-boolean-cast":{"total":0.006832999999999998},"no-fallthrough":{"total":0.02233000000000001},"no-global-assign":{"total":0.08283399999999999},"no-invalid-regexp":{"total":0.006414},"no-irregular-whitespace":{"total":0.04825},"no-loss-of-precision":{"total":0.024123},"no-misleading-character-class":{"total":0.050541},"no-nonoctal-decimal-escape":{"total":0.053127},"no-octal":{"total":0.004539000000000001},"no-prototype-builtins":{"total":0.010043000000000003},"no-regex-spaces":{"total":0.024540000000000006},"no-self-assign":{"total":0.001},"no-shadow-restricted-names":{"total":0.070124},"no-sparse-arrays":{"total":0.0038329999999999996},"no-unsafe-finally":{"total":0.001917},"no-unsafe-optional-chaining":{"total":0.020670000000000008},"no-unused-labels":{"total":0.001958},"no-unused-private-class-members":{"total":0.001542},"no-useless-backreference":{"total":0.0053750000000000004},"no-useless-catch":{"total":0.000791},"no-useless-escape":{"total":0.07429100000000001},"require-yield":{"total":0.002166},"use-isnan":{"total":0.0035830000000000002},"valid-typeof":{"total":0.0025},"no-var":{"total":0.037917},"prefer-const":{"total":0.004458},"prefer-rest-params":{"total":0.002417},"prefer-spread":{"total":0.008669000000000003},"@typescript-eslint/ban-ts-comment":{"total":0.020666999999999998},"@typescript-eslint/no-array-constructor":{"total":0.006707000000000001},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001916},"@typescript-eslint/no-empty-object-type":{"total":0.044375},"@typescript-eslint/no-explicit-any":{"total":0.003916},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.002167},"@typescript-eslint/no-misused-new":{"total":0.003125},"@typescript-eslint/no-namespace":{"total":0.003375},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.002166},"@typescript-eslint/no-this-alias":{"total":0.052458},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.015958},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.002709},"@typescript-eslint/no-unsafe-function-type":{"total":0.002208},"@typescript-eslint/no-unused-expressions":{"total":0.07579400000000001},"@typescript-eslint/no-unused-vars":{"total":0.6162080000000001},"@typescript-eslint/no-wrapper-object-types":{"total":0.002542},"@typescript-eslint/prefer-as-const":{"total":0.0031650000000000003},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001625},"@typescript-eslint/triple-slash-reference":{"total":0.04720900000000001},"@typescript-eslint/no-non-null-assertion":{"total":0.001417},"@typescript-eslint/adjacent-overload-signatures":{"total":0.013666000000000001},"@typescript-eslint/no-empty-function":{"total":0.113958},"@typescript-eslint/no-inferrable-types":{"total":0.05525200000000001},"@typescript-eslint/no-empty-interface":{"total":0.003167}},"fix":{"total":0},"total":6.871167}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/mocks/program/worker-children.mjs","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'basename' is defined but never used.","line":2,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Worker } from 'worker_threads';\nimport { join, dirname, basename } from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __dirname = dirname(fileURLToPath(import.meta.url));\nconst numWorkers = parseInt(process.argv[2], 10) || 2;\nconst workerScript = join(__dirname, 'child-process.mjs');\n\n// Get CPU profile directory from parent process\nconst cpuProfDir = process.execArgv\n  .find((arg) => arg.startsWith('--cpu-prof-dir='))\n  .split('=')[1];\nconst cpuProfInterval =\n  process.execArgv\n    .find((arg) => arg.startsWith('--cpu-prof-interval='))\n    ?.split('=')[1] || '100';\n\nconsole.log(\n  `PID ${process.pid}; spawning ${numWorkers} workers, 3 times each at 100ms intervals`\n);\n\n/**\n * Creates a Worker Thread with V8 CPU profiling enabled.\n *\n * @param {Object} options\n * @param {number} [options.interval=10] - Sampling interval in microseconds\n * @param {string} [options.dir='.cpu-profiles'] - Output directory for .cpuprofile files\n */\nfunction createWorkerWithCPUProfile({ interval = 10, dir = '.cpu-profiles' }) {\n  const execArgv = [\n    '--cpu-prof',\n    ...(dir ? [`--cpu-prof-dir=${dir}`] : []),\n    ...(interval ? [`--cpu-prof-interval=${interval}`] : []),\n  ];\n\n  const worker = new Worker(workerScript, {\n    execArgv,\n    stdout: true,\n    stderr: true,\n  });\n\n  const workerId = worker.threadId;\n\n  worker.stdout.on('data', (data) => {\n    process.stdout.write(`Worker ${workerId}: ${data}`);\n  });\n\n  worker.stderr.on('data', (data) => {\n    process.stderr.write(`Worker ${workerId} error: ${data}`);\n  });\n\n  worker.on('exit', (code) => {\n    console.log(`Worker thread ${workerId} exited with code ${code}`);\n  });\n\n  worker.on('error', (err) => {\n    console.error(`Worker ${workerId} error:`, err);\n  });\n}\n\n// Start initial set of workers\nfor (let i = 0; i < numWorkers; i++) {\n  createWorkerWithCPUProfile({\n    ...(cpuProfDir ? { dir: cpuProfDir } : {}),\n    ...(cpuProfInterval ? { interval: cpuProfInterval } : {}),\n  });\n}\n","stats":{"times":{"passes":[{"parse":{"total":1.703916},"rules":{"for-direction":{"total":0.007540999999999999},"no-async-promise-executor":{"total":0.000334},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.001334},"no-cond-assign":{"total":0.002583},"no-constant-binary-expression":{"total":0.068041},"no-constant-condition":{"total":0.011956000000000001},"no-control-regex":{"total":0.005959},"no-debugger":{"total":0.000291},"no-delete-var":{"total":0.00025},"no-dupe-else-if":{"total":0.000875},"no-duplicate-case":{"total":0.000833},"no-empty":{"total":0.002833},"no-empty-character-class":{"total":0.00025},"no-empty-pattern":{"total":0.00125},"no-empty-static-block":{"total":0.000792},"no-ex-assign":{"total":0.00075},"no-extra-boolean-cast":{"total":0.006250000000000001},"no-fallthrough":{"total":0.018502000000000008},"no-global-assign":{"total":0.019792},"no-invalid-regexp":{"total":0.005000000000000001},"no-irregular-whitespace":{"total":0.006333},"no-loss-of-precision":{"total":0.018667000000000003},"no-misleading-character-class":{"total":0.008458},"no-nonoctal-decimal-escape":{"total":0.005084},"no-octal":{"total":0.004041000000000001},"no-prototype-builtins":{"total":0.0067090000000000006},"no-regex-spaces":{"total":0.02470900000000001},"no-self-assign":{"total":0.001083},"no-shadow-restricted-names":{"total":0.009459000000000002},"no-sparse-arrays":{"total":0.0016230000000000003},"no-unsafe-finally":{"total":0.000291},"no-unsafe-optional-chaining":{"total":0.015787000000000006},"no-unused-labels":{"total":0.000791},"no-unused-private-class-members":{"total":0.000333},"no-useless-backreference":{"total":0.003167},"no-useless-catch":{"total":0.00025},"no-useless-escape":{"total":0.016457000000000003},"require-yield":{"total":0.000792},"use-isnan":{"total":0.00275},"valid-typeof":{"total":0.002},"no-var":{"total":0.0019170000000000003},"prefer-const":{"total":0.0037940000000000005},"prefer-rest-params":{"total":0.002333},"prefer-spread":{"total":0.006621999999999999},"@typescript-eslint/ban-ts-comment":{"total":0.028499999999999998},"@typescript-eslint/no-array-constructor":{"total":0.005958},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001},"@typescript-eslint/no-empty-object-type":{"total":0.002459},"@typescript-eslint/no-explicit-any":{"total":0.002208},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000958},"@typescript-eslint/no-misused-new":{"total":0.001},"@typescript-eslint/no-namespace":{"total":0.001875},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000958},"@typescript-eslint/no-this-alias":{"total":0.001875},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.004625},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001125},"@typescript-eslint/no-unsafe-function-type":{"total":0.000917},"@typescript-eslint/no-unused-expressions":{"total":0.023458000000000007},"@typescript-eslint/no-unused-vars":{"total":0.5842900000000001},"@typescript-eslint/no-wrapper-object-types":{"total":0.001209},"@typescript-eslint/prefer-as-const":{"total":0.0024170000000000007},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000791},"@typescript-eslint/triple-slash-reference":{"total":0.008751000000000002},"@typescript-eslint/no-non-null-assertion":{"total":0.000875},"@typescript-eslint/adjacent-overload-signatures":{"total":0.011625},"@typescript-eslint/no-empty-function":{"total":0.064334},"@typescript-eslint/no-inferrable-types":{"total":0.008416000000000002},"@typescript-eslint/no-empty-interface":{"total":0.001542}},"fix":{"total":0},"total":4.317375}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/package.json","messages":[{"ruleId":"@nx/dependency-checks","severity":2,"message":"The \"cpu-prof\" project uses the following packages, but they are missing from \"dependencies\":\n    - ansis\n    - vitest\n    - @push-based/testing-vitest-setup","line":26,"column":3,"nodeType":"JSONProperty","messageId":"missingDependency","endLine":28,"endColumn":4,"fix":{"range":[609,609],"text":",\n    \"ansis\": \"^4.1.0\",\n    \"vitest\": \"^3.0.0\",\n    \"@push-based/testing-vitest-setup\": \"0.0.1\""}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"{\n  \"name\": \"@push-based/cpu-prof\",\n  \"version\": \"0.0.9\",\n  \"type\": \"module\",\n  \"main\": \"./dist/index.cjs\",\n  \"module\": \"./dist/index.esm.js\",\n  \"types\": \"./dist/index.d.ts\",\n  \"exports\": {\n    \"./package.json\": \"./package.json\",\n    \".\": {\n      \"development\": \"./src/index.ts\",\n      \"types\": \"./dist/index.d.ts\",\n      \"import\": \"./dist/index.esm.js\",\n      \"require\": \"./dist/index.cjs\",\n      \"default\": \"./dist/index.cjs\"\n    }\n  },\n  \"bin\": {\n    \"cpu-prof\": \"./dist/cpu-prof.esm.js\"\n  },\n  \"scripts\": {},\n  \"files\": [\n    \"dist\",\n    \"!**/*.tsbuildinfo\"\n  ],\n  \"dependencies\": {\n    \"yargs\": \"^17.7.2\"\n  },\n  \"nx\": {\n    \"name\": \"cpu-prof\",\n    \"targets\": {\n      \"unit-test\": {\n        \"executor\": \"@nx/vite:test\",\n        \"options\": {\n          \"config\": \"packages/{projectName}/vitest.unit.config.ts\"\n        }\n      },\n      \"integration-test\": {\n        \"executor\": \"@nx/vite:test\",\n        \"options\": {\n          \"config\": \"packages/{projectName}/vitest.integration.config.ts\"\n        }\n      },\n      \"help\": {\n        \"dependsOn\": [\n          \"build\"\n        ],\n        \"executor\": \"nx:run-commands\",\n        \"options\": {\n          \"command\": \"node packages/cpu-prof/dist/cpu-prof.esm.js --help\"\n        }\n      },\n      \"reduce\": {\n        \"dependsOn\": [\n          \"build\"\n        ],\n        \"executor\": \"nx:run-commands\",\n        \"options\": {\n          \"command\": \"node packages/cpu-prof/dist/cpu-prof.esm.js trace-reduce\"\n        }\n      },\n      \"measure\": {\n        \"dependsOn\": [\n          \"build\"\n        ],\n        \"executor\": \"nx:run-commands\",\n        \"options\": {\n          \"command\": \"node packages/cpu-prof/dist/cpu-prof.esm.js measure\"\n        }\n      },\n      \"merge\": {\n        \"dependsOn\": [\n          \"build\"\n        ],\n        \"executor\": \"nx:run-commands\",\n        \"options\": {\n          \"command\": \"node packages/cpu-prof/dist/cpu-prof.esm.js merge\"\n        }\n      }\n    },\n    \"tags\": [\n      \"package\"\n    ]\n  }\n}\n","stats":{"times":{"passes":[{"parse":{"total":0.309},"rules":{"@nx/dependency-checks":{"total":33.872541}},"fix":{"total":0},"total":35.61025}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/rollup.config.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.556208},"rules":{"for-direction":{"total":0.003083},"no-async-promise-executor":{"total":0.000708},"no-case-declarations":{"total":0.000583},"no-compare-neg-zero":{"total":0.001209},"no-cond-assign":{"total":0.002041},"no-constant-binary-expression":{"total":0.001125},"no-constant-condition":{"total":0.002875},"no-control-regex":{"total":0.003251},"no-debugger":{"total":0.000625},"no-delete-var":{"total":0.000542},"no-dupe-else-if":{"total":0.001541},"no-duplicate-case":{"total":0.000875},"no-empty":{"total":0.004083},"no-empty-character-class":{"total":0.0005},"no-empty-pattern":{"total":0.001625},"no-empty-static-block":{"total":0.001},"no-ex-assign":{"total":0.001083},"no-extra-boolean-cast":{"total":0.00325},"no-fallthrough":{"total":0.004417},"no-global-assign":{"total":0.018625000000000003},"no-invalid-regexp":{"total":0.0019590000000000002},"no-irregular-whitespace":{"total":0.0043749999999999995},"no-loss-of-precision":{"total":0.0025830000000000007},"no-misleading-character-class":{"total":0.009417},"no-nonoctal-decimal-escape":{"total":0.0031680000000000002},"no-octal":{"total":0.0018750000000000004},"no-prototype-builtins":{"total":0.001499},"no-regex-spaces":{"total":0.005000999999999999},"no-self-assign":{"total":0.065458},"no-shadow-restricted-names":{"total":0.002084},"no-sparse-arrays":{"total":0.00125},"no-unsafe-finally":{"total":0.000875},"no-unsafe-optional-chaining":{"total":0.005501},"no-unused-labels":{"total":0.001083},"no-unused-private-class-members":{"total":0.00075},"no-useless-backreference":{"total":0.003957},"no-useless-catch":{"total":0.000417},"no-useless-escape":{"total":0.004999},"require-yield":{"total":0.000875},"use-isnan":{"total":0.001708},"valid-typeof":{"total":0.002209},"no-var":{"total":0.001041},"prefer-const":{"total":0.0022919999999999998},"prefer-rest-params":{"total":0.000833},"prefer-spread":{"total":0.001418},"@typescript-eslint/ban-ts-comment":{"total":0.010584},"@typescript-eslint/no-array-constructor":{"total":0.0026669999999999997},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001458},"@typescript-eslint/no-empty-object-type":{"total":0.003042},"@typescript-eslint/no-explicit-any":{"total":0.002416},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.0015},"@typescript-eslint/no-misused-new":{"total":0.001542},"@typescript-eslint/no-namespace":{"total":0.002084},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001334},"@typescript-eslint/no-this-alias":{"total":0.002375},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.005083},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001417},"@typescript-eslint/no-unsafe-function-type":{"total":0.001334},"@typescript-eslint/no-unused-expressions":{"total":0.011542},"@typescript-eslint/no-unused-vars":{"total":1.198793},"@typescript-eslint/no-wrapper-object-types":{"total":0.001709},"@typescript-eslint/prefer-as-const":{"total":0.001875},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001125},"@typescript-eslint/triple-slash-reference":{"total":0.006959},"@typescript-eslint/no-non-null-assertion":{"total":0.001167},"@typescript-eslint/adjacent-overload-signatures":{"total":0.003084},"@typescript-eslint/no-empty-function":{"total":0.004875},"@typescript-eslint/no-inferrable-types":{"total":0.004834000000000001},"@typescript-eslint/no-empty-interface":{"total":0.001959}},"fix":{"total":0},"total":3.030583}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/bin/cpu-prof.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.776791},"rules":{"for-direction":{"total":0.002792},"no-async-promise-executor":{"total":0.000292},"no-case-declarations":{"total":0.000375},"no-compare-neg-zero":{"total":0.000917},"no-cond-assign":{"total":0.001417},"no-constant-binary-expression":{"total":0.000709},"no-constant-condition":{"total":0.001791},"no-control-regex":{"total":0.0015},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.00025},"no-dupe-else-if":{"total":0.00075},"no-duplicate-case":{"total":0.000625},"no-empty":{"total":0.0014160000000000002},"no-empty-character-class":{"total":0.0005},"no-empty-pattern":{"total":0.000834},"no-empty-static-block":{"total":0.000625},"no-ex-assign":{"total":0.000583},"no-extra-boolean-cast":{"total":0.0025840000000000004},"no-fallthrough":{"total":0.004000999999999999},"no-global-assign":{"total":0.02825},"no-invalid-regexp":{"total":0.001958},"no-irregular-whitespace":{"total":0.002876},"no-loss-of-precision":{"total":0.006958000000000001},"no-misleading-character-class":{"total":0.008209},"no-nonoctal-decimal-escape":{"total":0.001458},"no-octal":{"total":0.000833},"no-prototype-builtins":{"total":0.002335},"no-regex-spaces":{"total":0.004959000000000001},"no-self-assign":{"total":0.001042},"no-shadow-restricted-names":{"total":0.00225},"no-sparse-arrays":{"total":0.00025},"no-unsafe-finally":{"total":0.000292},"no-unsafe-optional-chaining":{"total":0.003083},"no-unused-labels":{"total":0.000791},"no-unused-private-class-members":{"total":0.000417},"no-useless-backreference":{"total":0.003042},"no-useless-catch":{"total":0.00025},"no-useless-escape":{"total":0.0026239999999999996},"require-yield":{"total":0.000458},"use-isnan":{"total":0.001667},"valid-typeof":{"total":0.002084},"no-var":{"total":0.000833},"prefer-const":{"total":0.002},"prefer-rest-params":{"total":0.000792},"prefer-spread":{"total":0.0025009999999999998},"@typescript-eslint/ban-ts-comment":{"total":0.010876},"@typescript-eslint/no-array-constructor":{"total":0.002918},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001208},"@typescript-eslint/no-empty-object-type":{"total":0.003},"@typescript-eslint/no-explicit-any":{"total":0.002667},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001375},"@typescript-eslint/no-misused-new":{"total":0.001125},"@typescript-eslint/no-namespace":{"total":0.002458},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001167},"@typescript-eslint/no-this-alias":{"total":0.002458},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.006208},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001166},"@typescript-eslint/no-unsafe-function-type":{"total":0.015708},"@typescript-eslint/no-unused-expressions":{"total":0.011124},"@typescript-eslint/no-unused-vars":{"total":0.318708},"@typescript-eslint/no-wrapper-object-types":{"total":0.023625},"@typescript-eslint/prefer-as-const":{"total":0.039332},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001166},"@typescript-eslint/triple-slash-reference":{"total":0.011000999999999999},"@typescript-eslint/no-non-null-assertion":{"total":0.000917},"@typescript-eslint/adjacent-overload-signatures":{"total":0.003541},"@typescript-eslint/no-empty-function":{"total":0.012042},"@typescript-eslint/no-inferrable-types":{"total":0.004709},"@typescript-eslint/no-empty-interface":{"total":0.001667},"@nx/enforce-module-boundaries":{"total":0.08275}},"fix":{"total":0},"total":2.485041}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/cli/commands/cpu-measure/builder.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":6,"column":44,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":6,"endColumn":46,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[221,223],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[221,223],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Argv, CommandModule } from 'yargs';\nimport { isAbsolute, join } from 'node:path';\nimport type { MeasureArgs } from './types';\nimport { handler } from './handler';\n\nexport const measureCommand: CommandModule<{}, MeasureArgs> = {\n  command: 'measure <commandToProfile...>',\n  describe:\n    'Run a Node.js script with CPU profiling enabled and save the profile to disk',\n  builder: (yargs: Argv): Argv<MeasureArgs> => {\n    return yargs\n      .group(\n        ['cpu-prof-dir', 'cpu-prof-interval', 'cpu-prof-name', 'help'],\n        'CPU Measure Options:'\n      )\n      .option('cpu-prof-interval', {\n        describe: 'Interval in milliseconds to sample the command.',\n        type: 'number',\n      })\n      .option('cpu-prof-dir', {\n        describe: 'Directory to save the profile.',\n        type: 'string',\n        normalize: true,\n        default: join(process.cwd(), 'profiles'),\n        coerce: (dir: string) => {\n          return isAbsolute(dir) ? dir : join(process.cwd(), dir);\n        },\n      })\n      .option('cpu-prof-name', {\n        describe: 'Name of the profile (auto-generated if not specified).',\n        type: 'string',\n        normalize: true,\n      })\n      .option('flagMain', {\n        describe:\n          'Adds prefix and command args to the profile name of the initial process.',\n        type: 'boolean',\n        default: false,\n      })\n      .example(\n        '$0 measure --cpu-prof-dir ./profiles node my_script.js --arg-for-script',\n        'Profile `node my_script.js --arg-for-script` and save to ./profiles. Options can be anywhere.'\n      )\n      .example(\n        '$0 measure node my_app.js --cpu-prof-name build-profile --cpu-prof-interval 500',\n        'Profile `node my_app.js`, name it `build-profile` with 500ms interval. Options can be interspersed.'\n      )\n      .epilog(\n        `The command to profile and its arguments are explicitly parsed via the command definition.\n        CPU Measure options (like --cpu-prof-dir) can be placed anywhere.\n        \n        Examples:\n        $0 measure node my_script.js --arg-for-script\n        $0 measure --cpu-prof-dir ./custom-profiles node my_app.js\n        $0 measure node my_app.js --cpu-prof-interval 100`\n      );\n  },\n  handler,\n};\n","stats":{"times":{"passes":[{"parse":{"total":0.956583},"rules":{"for-direction":{"total":0.002375},"no-async-promise-executor":{"total":0.00025},"no-case-declarations":{"total":0.000208},"no-compare-neg-zero":{"total":0.001125},"no-cond-assign":{"total":0.001209},"no-constant-binary-expression":{"total":0.000541},"no-constant-condition":{"total":0.002666},"no-control-regex":{"total":0.006418999999999997},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.000291},"no-dupe-else-if":{"total":0.000375},"no-duplicate-case":{"total":0.000291},"no-empty":{"total":0.001001},"no-empty-character-class":{"total":0.00025},"no-empty-pattern":{"total":0.000625},"no-empty-static-block":{"total":0.000292},"no-ex-assign":{"total":0.000333},"no-extra-boolean-cast":{"total":0.0029560000000000003},"no-fallthrough":{"total":0.006706},"no-global-assign":{"total":0.019043},"no-invalid-regexp":{"total":0.0024570000000000004},"no-irregular-whitespace":{"total":0.005083000000000001},"no-loss-of-precision":{"total":0.0049580000000000015},"no-misleading-character-class":{"total":0.010499999999999999},"no-nonoctal-decimal-escape":{"total":0.006541999999999998},"no-octal":{"total":0.003749000000000002},"no-prototype-builtins":{"total":0.004127},"no-regex-spaces":{"total":0.013166000000000004},"no-self-assign":{"total":0.000625},"no-shadow-restricted-names":{"total":0.00525},"no-sparse-arrays":{"total":0.000957},"no-unsafe-finally":{"total":0.00279},"no-unsafe-optional-chaining":{"total":0.005374},"no-unused-labels":{"total":0.0005},"no-unused-private-class-members":{"total":0.000541},"no-useless-backreference":{"total":0.004959},"no-useless-catch":{"total":0.00025},"no-useless-escape":{"total":0.013495},"require-yield":{"total":0.000458},"use-isnan":{"total":0.001459},"valid-typeof":{"total":0.001959},"no-var":{"total":0.000792},"prefer-const":{"total":0.001834},"prefer-rest-params":{"total":0.000541},"prefer-spread":{"total":0.003919},"@typescript-eslint/ban-ts-comment":{"total":0.011541},"@typescript-eslint/no-array-constructor":{"total":0.004125},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001083},"@typescript-eslint/no-empty-object-type":{"total":0.036209000000000005},"@typescript-eslint/no-explicit-any":{"total":0.00275},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000958},"@typescript-eslint/no-misused-new":{"total":0.001125},"@typescript-eslint/no-namespace":{"total":0.002166},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001083},"@typescript-eslint/no-this-alias":{"total":0.002625},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.012625},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001417},"@typescript-eslint/no-unsafe-function-type":{"total":0.0022500000000000003},"@typescript-eslint/no-unused-expressions":{"total":0.009875},"@typescript-eslint/no-unused-vars":{"total":0.535042},"@typescript-eslint/no-wrapper-object-types":{"total":0.006832},"@typescript-eslint/prefer-as-const":{"total":0.002916},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000833},"@typescript-eslint/triple-slash-reference":{"total":0.008497},"@typescript-eslint/no-non-null-assertion":{"total":0.000709},"@typescript-eslint/adjacent-overload-signatures":{"total":0.005584},"@typescript-eslint/no-empty-function":{"total":0.025706999999999997},"@typescript-eslint/no-inferrable-types":{"total":0.010334000000000001},"@typescript-eslint/no-empty-interface":{"total":0.001708},"@nx/enforce-module-boundaries":{"total":0.514833}},"fix":{"total":0},"total":4.48375}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/cli/commands/cpu-measure/handler.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'$0' is assigned a value but never used.","line":8,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cpuProfDir2' is assigned a value but never used.","line":10,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cpuProfInterval2' is assigned a value but never used.","line":12,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cpuProfName2' is assigned a value but never used.","line":14,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'commandToProfile2' is assigned a value but never used.","line":16,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'flagMain2' is assigned a value but never used.","line":18,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":29},{"ruleId":"prefer-const","severity":2,"message":"'errorMessage' is never reassigned. Use 'const' instead.","line":65,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":65,"endColumn":21,"fix":{"range":[2033,2081],"text":"const errorMessage = e.message || 'Unknown error';"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import type { MeasureArgs } from './types';\nimport { runWithCpuProf } from '../../../lib/cpu/run-with-cpu-prof';\nimport { filterCliOptions } from './utils';\n\nexport async function handler(argv: MeasureArgs): Promise<void> {\n  const { _: positionalArgs = [], ...options } = argv;\n  const {\n    $0,\n    cpuProfDir,\n    ['cpu-prof-dir']: cpuProfDir2,\n    cpuProfInterval,\n    ['cpu-prof-interval']: cpuProfInterval2,\n    cpuProfName,\n    ['cpu-prof-name']: cpuProfName2,\n    commandToProfile,\n    ['command-to-profile']: commandToProfile2,\n    flagMain,\n    ['flag-main']: flagMain2,\n    ...commandOptions\n  } = options;\n\n  // Determine the actual command to profile\n  const cmdToRun = // Case 1: Explicit 'measure' command is used.\n    // Example: `cpu-prof measure npm -v`\n    // Here, `commandToProfile` will be `['npm', '-v']`.\n    (\n      commandToProfile && commandToProfile.length > 0\n        ? commandToProfile\n        : // Case 2: Default command ('*') is used (i.e., 'measure' is not explicitly typed).\n          // Example: `cpu-prof npm -v`\n          // Here, `positionalArgs` (argv._) will be `['npm', '-v']`.\n          positionalArgs\n    ) as string[];\n\n  const nodeOptions = {\n    ...(cpuProfDir ? { cpuProfDir } : {}),\n    ...(cpuProfInterval ? { cpuProfInterval } : {}),\n    ...(cpuProfName ? { cpuProfName } : {}),\n    ...(flagMain ? { flagMain } : {}),\n  };\n\n  if (!cmdToRun || !Array.isArray(cmdToRun) || cmdToRun.length === 0) {\n    console.error(\n      '❌ Error: No command or script provided to profile. Usage: measure <command_or_script.js> [args...]'\n    );\n    process.exit(1);\n  }\n\n  const [actualCommand, ...actualCommandArgs] = cmdToRun;\n\n  // Filter commandOptions to prefer kebab-case and remove duplicate camelCase keys\n  const filteredCommandOptions = filterCliOptions(commandOptions);\n\n  try {\n    await runWithCpuProf(\n      actualCommand,\n      {\n        _: actualCommandArgs,\n        ...filteredCommandOptions,\n      },\n      nodeOptions\n    );\n  } catch (error) {\n    const e = error as Error;\n    let errorMessage = e.message || 'Unknown error';\n\n    if (errorMessage && errorMessage.includes('not allowed in NODE_OPTIONS')) {\n      console.error(\n        '❌ Error: Node.js has restricted some V8 options (like --cpu-prof) from being set via NODE_OPTIONS.\\n' +\n          '   This is a security feature in recent Node.js versions.\\n' +\n          '   The V8 option \"--cpu-prof\" specifically was disallowed.\\n' +\n          '   It works in Node.js version > 22, you can switch to it (e.g., `nvm use <version>`).\\n'\n      );\n    } else if (errorMessage.includes('Command failed with exit code')) {\n      // Generic failure from executeChildProcess, could append more details if available\n      console.error(`❌ Error during CPU profiling: ${errorMessage}.`);\n    } else {\n      // Other types of errors (e.g., issues within runWithCpuProf before spawning)\n      console.error(`❌ Error during CPU profiling setup: ${errorMessage}`);\n    }\n    process.exit(1);\n  }\n}\n","stats":{"times":{"passes":[{"parse":{"total":3.041667},"rules":{"for-direction":{"total":0.002166},"no-async-promise-executor":{"total":0.000291},"no-case-declarations":{"total":0.000292},"no-compare-neg-zero":{"total":0.002833},"no-cond-assign":{"total":0.002416},"no-constant-binary-expression":{"total":0.07379200000000001},"no-constant-condition":{"total":0.010499999999999999},"no-control-regex":{"total":0.005124},"no-debugger":{"total":0.000375},"no-delete-var":{"total":0.000709},"no-dupe-else-if":{"total":0.060084},"no-duplicate-case":{"total":0.000459},"no-empty":{"total":0.0032920000000000007},"no-empty-character-class":{"total":0.00025},"no-empty-pattern":{"total":0.020249999999999997},"no-empty-static-block":{"total":0.00075},"no-ex-assign":{"total":0.0024590000000000002},"no-extra-boolean-cast":{"total":0.004665999999999999},"no-fallthrough":{"total":0.01541800000000001},"no-global-assign":{"total":0.019667},"no-invalid-regexp":{"total":0.002749},"no-irregular-whitespace":{"total":0.005083000000000001},"no-loss-of-precision":{"total":0.012209000000000001},"no-misleading-character-class":{"total":0.011082999999999999},"no-nonoctal-decimal-escape":{"total":0.005039},"no-octal":{"total":0.0031260000000000003},"no-prototype-builtins":{"total":0.004374000000000001},"no-regex-spaces":{"total":0.012207000000000003},"no-self-assign":{"total":0.000583},"no-shadow-restricted-names":{"total":0.007249000000000002},"no-sparse-arrays":{"total":0.000792},"no-unsafe-finally":{"total":0.000334},"no-unsafe-optional-chaining":{"total":0.011752000000000005},"no-unused-labels":{"total":0.000416},"no-unused-private-class-members":{"total":0.000375},"no-useless-backreference":{"total":0.002875},"no-useless-catch":{"total":0.000916},"no-useless-escape":{"total":0.011669},"require-yield":{"total":0.000959},"use-isnan":{"total":0.004084000000000001},"valid-typeof":{"total":0.002292},"no-var":{"total":0.001458},"prefer-const":{"total":0.10308400000000001},"prefer-rest-params":{"total":0.002125},"prefer-spread":{"total":0.0037079999999999995},"@typescript-eslint/ban-ts-comment":{"total":0.020791999999999998},"@typescript-eslint/no-array-constructor":{"total":0.003542000000000001},"@typescript-eslint/no-duplicate-enum-values":{"total":0.00125},"@typescript-eslint/no-empty-object-type":{"total":0.003875},"@typescript-eslint/no-explicit-any":{"total":0.002833},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001042},"@typescript-eslint/no-misused-new":{"total":0.001125},"@typescript-eslint/no-namespace":{"total":0.002542},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001083},"@typescript-eslint/no-this-alias":{"total":0.002875},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.008},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001416},"@typescript-eslint/no-unsafe-function-type":{"total":0.0029999999999999996},"@typescript-eslint/no-unused-expressions":{"total":0.014872},"@typescript-eslint/no-unused-vars":{"total":0.568125},"@typescript-eslint/no-wrapper-object-types":{"total":0.0031659999999999995},"@typescript-eslint/prefer-as-const":{"total":0.0038320000000000003},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000959},"@typescript-eslint/triple-slash-reference":{"total":0.008582000000000001},"@typescript-eslint/no-non-null-assertion":{"total":0.000917},"@typescript-eslint/adjacent-overload-signatures":{"total":0.010833000000000002},"@typescript-eslint/no-empty-function":{"total":0.035083},"@typescript-eslint/no-inferrable-types":{"total":0.007666999999999999},"@typescript-eslint/no-empty-interface":{"total":0.001958},"@nx/enforce-module-boundaries":{"total":0.12645900000000002}},"fix":{"total":0},"total":5.893041}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/cli/commands/cpu-measure/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.5245},"rules":{"for-direction":{"total":0.002709},"no-async-promise-executor":{"total":0.000292},"no-case-declarations":{"total":0.000375},"no-compare-neg-zero":{"total":0.007},"no-cond-assign":{"total":0.001375},"no-constant-binary-expression":{"total":0.000416},"no-constant-condition":{"total":0.001125},"no-control-regex":{"total":0.001416},"no-debugger":{"total":0.000375},"no-delete-var":{"total":0.00025},"no-dupe-else-if":{"total":0.000542},"no-duplicate-case":{"total":0.000292},"no-empty":{"total":0.000625},"no-empty-character-class":{"total":0.00025},"no-empty-pattern":{"total":0.000584},"no-empty-static-block":{"total":0.000375},"no-ex-assign":{"total":0.0005},"no-extra-boolean-cast":{"total":0.001333},"no-fallthrough":{"total":0.0038330000000000005},"no-global-assign":{"total":0.028167},"no-invalid-regexp":{"total":0.000709},"no-irregular-whitespace":{"total":0.002457},"no-loss-of-precision":{"total":0.000998},"no-misleading-character-class":{"total":0.015292},"no-nonoctal-decimal-escape":{"total":0.001291},"no-octal":{"total":0.0005},"no-prototype-builtins":{"total":0.000708},"no-regex-spaces":{"total":0.00075},"no-self-assign":{"total":0.000583},"no-shadow-restricted-names":{"total":0.002208},"no-sparse-arrays":{"total":0.000292},"no-unsafe-finally":{"total":0.000333},"no-unsafe-optional-chaining":{"total":0.001},"no-unused-labels":{"total":0.000459},"no-unused-private-class-members":{"total":0.005292},"no-useless-backreference":{"total":0.003416},"no-useless-catch":{"total":0.000292},"no-useless-escape":{"total":0.002583},"require-yield":{"total":0.0005},"use-isnan":{"total":0.001042},"valid-typeof":{"total":0.0015},"no-var":{"total":0.000334},"prefer-const":{"total":0.006874999999999999},"prefer-rest-params":{"total":0.000417},"prefer-spread":{"total":0.000333},"@typescript-eslint/ban-ts-comment":{"total":0.011958},"@typescript-eslint/no-array-constructor":{"total":0.001625},"@typescript-eslint/no-duplicate-enum-values":{"total":0.00125},"@typescript-eslint/no-empty-object-type":{"total":0.003917},"@typescript-eslint/no-explicit-any":{"total":0.002667},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001709},"@typescript-eslint/no-misused-new":{"total":0.001417},"@typescript-eslint/no-namespace":{"total":0.003208},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001209},"@typescript-eslint/no-this-alias":{"total":0.003291},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.0105},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.0015},"@typescript-eslint/no-unsafe-function-type":{"total":0.00125},"@typescript-eslint/no-unused-expressions":{"total":0.01},"@typescript-eslint/no-unused-vars":{"total":1.446333},"@typescript-eslint/no-wrapper-object-types":{"total":0.001167},"@typescript-eslint/prefer-as-const":{"total":0.001208},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000958},"@typescript-eslint/triple-slash-reference":{"total":0.007667000000000001},"@typescript-eslint/no-non-null-assertion":{"total":0.000875},"@typescript-eslint/adjacent-overload-signatures":{"total":0.0041659999999999996},"@typescript-eslint/no-empty-function":{"total":0.004542},"@typescript-eslint/no-inferrable-types":{"total":0.004208},"@typescript-eslint/no-empty-interface":{"total":0.001875},"@nx/enforce-module-boundaries":{"total":0.057501}},"fix":{"total":0},"total":3.289833}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/cli/commands/cpu-measure/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[255,258],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[255,258],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface MeasureArgs {\n  _?: string[];\n  'cpu-prof-interval'?: number;\n  cpuProfInterval?: number;\n  'cpu-prof-dir'?: string;\n  cpuProfDir?: string;\n  'cpu-prof-name'?: string;\n  cpuProfName?: string;\n  commandToProfile?: string;\n  [key: string]: any;\n}\n","stats":{"times":{"passes":[{"parse":{"total":1.859958},"rules":{"for-direction":{"total":0.003417},"no-async-promise-executor":{"total":0.000375},"no-case-declarations":{"total":0.000375},"no-compare-neg-zero":{"total":0.001083},"no-cond-assign":{"total":0.002},"no-constant-binary-expression":{"total":0.000834},"no-constant-condition":{"total":0.002},"no-control-regex":{"total":0.001207},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.00025},"no-dupe-else-if":{"total":0.000875},"no-duplicate-case":{"total":0.000667},"no-empty":{"total":0.001417},"no-empty-character-class":{"total":0.000208},"no-empty-pattern":{"total":0.000875},"no-empty-static-block":{"total":0.000833},"no-ex-assign":{"total":0.00075},"no-extra-boolean-cast":{"total":0.002084},"no-fallthrough":{"total":0.003457},"no-global-assign":{"total":0.017834},"no-invalid-regexp":{"total":0.001208},"no-irregular-whitespace":{"total":0.002667},"no-loss-of-precision":{"total":0.001083},"no-misleading-character-class":{"total":0.008584},"no-nonoctal-decimal-escape":{"total":0.001499},"no-octal":{"total":0.0006259999999999999},"no-prototype-builtins":{"total":0.000583},"no-regex-spaces":{"total":0.0012500000000000002},"no-self-assign":{"total":0.001291},"no-shadow-restricted-names":{"total":0.000959},"no-sparse-arrays":{"total":0.00025},"no-unsafe-finally":{"total":0.000625},"no-unsafe-optional-chaining":{"total":0.007666},"no-unused-labels":{"total":0.00125},"no-unused-private-class-members":{"total":0.000458},"no-useless-backreference":{"total":0.003375},"no-useless-catch":{"total":0.000458},"no-useless-escape":{"total":0.0029579999999999997},"require-yield":{"total":0.000417},"use-isnan":{"total":0.002417},"valid-typeof":{"total":0.002792},"no-var":{"total":0.000875},"prefer-const":{"total":0.0025},"prefer-rest-params":{"total":0.000958},"prefer-spread":{"total":0.000834},"@typescript-eslint/ban-ts-comment":{"total":0.008791},"@typescript-eslint/no-array-constructor":{"total":0.001791},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001},"@typescript-eslint/no-empty-object-type":{"total":0.045},"@typescript-eslint/no-explicit-any":{"total":0.1475},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001417},"@typescript-eslint/no-misused-new":{"total":0.001291},"@typescript-eslint/no-namespace":{"total":0.002334},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001292},"@typescript-eslint/no-this-alias":{"total":0.00225},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.006208},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.023167},"@typescript-eslint/no-unsafe-function-type":{"total":0.001084},"@typescript-eslint/no-unused-expressions":{"total":0.0095},"@typescript-eslint/no-unused-vars":{"total":0.369583},"@typescript-eslint/no-wrapper-object-types":{"total":0.001125},"@typescript-eslint/prefer-as-const":{"total":0.000834},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000708},"@typescript-eslint/triple-slash-reference":{"total":0.005333},"@typescript-eslint/no-non-null-assertion":{"total":0.00075},"@typescript-eslint/adjacent-overload-signatures":{"total":0.006166},"@typescript-eslint/no-empty-function":{"total":0.004209},"@typescript-eslint/no-inferrable-types":{"total":0.003417},"@typescript-eslint/no-empty-interface":{"total":0.036750000000000005},"@nx/enforce-module-boundaries":{"total":0.020125}},"fix":{"total":0},"total":3.693625}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/cli/commands/cpu-measure/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[67,70],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[67,70],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[90,93],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[90,93],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[144,147],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[144,147],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export function filterCliOptions(\n  commandOptions: Record<string, any>\n): Record<string, any> {\n  const filteredCommandOptions: Record<string, any> = {};\n  for (const key in commandOptions) {\n    if (Object.prototype.hasOwnProperty.call(commandOptions, key)) {\n      // If the key is camelCase and its kebab-case version also exists, skip the camelCase version.\n      // This prevents duplicate arguments like --foo-bar and --fooBar when yargs provides both.\n      const kebabKey = key.replace(\n        /[A-Z]/g,\n        (letter) => `-${letter.toLowerCase()}`\n      );\n      if (key !== kebabKey && commandOptions[kebabKey] !== undefined) {\n        continue;\n      }\n      filteredCommandOptions[key] = commandOptions[key];\n    }\n  }\n  return filteredCommandOptions;\n}\n","stats":{"times":{"passes":[{"parse":{"total":0.90575},"rules":{"for-direction":{"total":0.001667},"no-async-promise-executor":{"total":0.000292},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.002667},"no-cond-assign":{"total":0.0015},"no-constant-binary-expression":{"total":0.025124},"no-constant-condition":{"total":0.005625},"no-control-regex":{"total":0.27899999999999997},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.000209},"no-dupe-else-if":{"total":0.009458000000000001},"no-duplicate-case":{"total":0.000292},"no-empty":{"total":0.001459},"no-empty-character-class":{"total":0.0009170000000000001},"no-empty-pattern":{"total":0.000416},"no-empty-static-block":{"total":0.00025},"no-ex-assign":{"total":0.000292},"no-extra-boolean-cast":{"total":0.001626},"no-fallthrough":{"total":0.009038000000000001},"no-global-assign":{"total":0.018375},"no-invalid-regexp":{"total":0.001209},"no-irregular-whitespace":{"total":0.002624},"no-loss-of-precision":{"total":0.000666},"no-misleading-character-class":{"total":0.239417},"no-nonoctal-decimal-escape":{"total":0.001},"no-octal":{"total":0.00037600000000000003},"no-prototype-builtins":{"total":0.0019169999999999999},"no-regex-spaces":{"total":0.005665},"no-self-assign":{"total":0.0445},"no-shadow-restricted-names":{"total":0.004043},"no-sparse-arrays":{"total":0.000209},"no-unsafe-finally":{"total":0.098125},"no-unsafe-optional-chaining":{"total":0.004960999999999999},"no-unused-labels":{"total":0.013292},"no-unused-private-class-members":{"total":0.000291},"no-useless-backreference":{"total":0.079541},"no-useless-catch":{"total":0.000209},"no-useless-escape":{"total":0.18100099999999997},"require-yield":{"total":0.000624},"use-isnan":{"total":0.00375},"valid-typeof":{"total":0.001375},"no-var":{"total":0.000709},"prefer-const":{"total":0.0015429999999999999},"prefer-rest-params":{"total":0.001666},"prefer-spread":{"total":0.001667},"@typescript-eslint/ban-ts-comment":{"total":0.007917},"@typescript-eslint/no-array-constructor":{"total":0.002041},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000958},"@typescript-eslint/no-empty-object-type":{"total":0.002459},"@typescript-eslint/no-explicit-any":{"total":0.106209},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000875},"@typescript-eslint/no-misused-new":{"total":0.000958},"@typescript-eslint/no-namespace":{"total":0.001791},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001},"@typescript-eslint/no-this-alias":{"total":0.001792},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.003917},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001042},"@typescript-eslint/no-unsafe-function-type":{"total":0.004126},"@typescript-eslint/no-unused-expressions":{"total":0.01275},"@typescript-eslint/no-unused-vars":{"total":0.360083},"@typescript-eslint/no-wrapper-object-types":{"total":0.002751},"@typescript-eslint/prefer-as-const":{"total":0.002293},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000834},"@typescript-eslint/triple-slash-reference":{"total":0.0045839999999999995},"@typescript-eslint/no-non-null-assertion":{"total":0.000875},"@typescript-eslint/adjacent-overload-signatures":{"total":0.0067079999999999996},"@typescript-eslint/no-empty-function":{"total":0.021209},"@typescript-eslint/no-inferrable-types":{"total":0.057418},"@typescript-eslint/no-empty-interface":{"total":0.0015},"@nx/enforce-module-boundaries":{"total":0.111291}},"fix":{"total":0},"total":3.907542}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/cli/commands/cpu-merge/args-processor.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'inputDir' is never reassigned. Use 'const' instead.","line":8,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":8,"endColumn":17,"fix":{"range":[246,320],"text":"const { inputDir, outputDir, verbose, smosh, startTracingInBrowser } = argv;"}},{"ruleId":"prefer-const","severity":2,"message":"'outputDir' is never reassigned. Use 'const' instead.","line":8,"column":19,"nodeType":"Identifier","messageId":"useConst","endLine":8,"endColumn":28,"fix":{"range":[246,320],"text":"const { inputDir, outputDir, verbose, smosh, startTracingInBrowser } = argv;"}},{"ruleId":"prefer-const","severity":2,"message":"'verbose' is never reassigned. Use 'const' instead.","line":8,"column":30,"nodeType":"Identifier","messageId":"useConst","endLine":8,"endColumn":37,"fix":{"range":[246,320],"text":"const { inputDir, outputDir, verbose, smosh, startTracingInBrowser } = argv;"}},{"ruleId":"prefer-const","severity":2,"message":"'smosh' is never reassigned. Use 'const' instead.","line":8,"column":39,"nodeType":"Identifier","messageId":"useConst","endLine":8,"endColumn":44,"fix":{"range":[246,320],"text":"const { inputDir, outputDir, verbose, smosh, startTracingInBrowser } = argv;"}},{"ruleId":"prefer-const","severity":2,"message":"'startTracingInBrowser' is never reassigned. Use 'const' instead.","line":8,"column":46,"nodeType":"Identifier","messageId":"useConst","endLine":8,"endColumn":67,"fix":{"range":[246,320],"text":"const { inputDir, outputDir, verbose, smosh, startTracingInBrowser } = argv;"}}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"import { isAbsolute, join } from 'node:path';\nimport type { MergeArgs, ProcessedMergeArgs } from './types';\n\n/**\n * Process and validate CLI arguments for the merge command\n */\nexport function processArgs(argv: MergeArgs): ProcessedMergeArgs {\n  let { inputDir, outputDir, verbose, smosh, startTracingInBrowser } = argv;\n\n  if (!inputDir) {\n    // Should be caught by yargs due to <inputDir> being required (demandOption)\n    // and builder.ts check\n    throw new Error('Input directory is required and was not provided.');\n  }\n\n  const resolvedInputDir = isAbsolute(inputDir)\n    ? inputDir\n    : join(process.cwd(), inputDir);\n\n  let resolvedOutputDir: string;\n  if (!outputDir) {\n    // If no output directory specified, use input directory\n    resolvedOutputDir = resolvedInputDir;\n  } else {\n    // If outputDir is provided, resolve it relative to cwd if it's not absolute\n    resolvedOutputDir = isAbsolute(outputDir)\n      ? outputDir\n      : join(process.cwd(), outputDir);\n  }\n\n  return {\n    inputDir: resolvedInputDir,\n    outputDir: resolvedOutputDir,\n    verbose: verbose || false,\n    smosh: smosh ?? false,\n    startTracingInBrowser: startTracingInBrowser ?? true,\n  };\n}\n","stats":{"times":{"passes":[{"parse":{"total":1.023917},"rules":{"for-direction":{"total":0.001625},"no-async-promise-executor":{"total":0.000375},"no-case-declarations":{"total":0.000292},"no-compare-neg-zero":{"total":0.000833},"no-cond-assign":{"total":0.002334},"no-constant-binary-expression":{"total":0.0038339999999999997},"no-constant-condition":{"total":0.0062900000000000005},"no-control-regex":{"total":0.002167},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.000583},"no-dupe-else-if":{"total":0.006291},"no-duplicate-case":{"total":0.00025},"no-empty":{"total":0.001417},"no-empty-character-class":{"total":0.000208},"no-empty-pattern":{"total":0.00075},"no-empty-static-block":{"total":0.00025},"no-ex-assign":{"total":0.000292},"no-extra-boolean-cast":{"total":0.0026249999999999997},"no-fallthrough":{"total":0.010042999999999996},"no-global-assign":{"total":0.017791},"no-invalid-regexp":{"total":0.0018350000000000003},"no-irregular-whitespace":{"total":0.003459},"no-loss-of-precision":{"total":0.001458},"no-misleading-character-class":{"total":0.006918},"no-nonoctal-decimal-escape":{"total":0.0015},"no-octal":{"total":0.000958},"no-prototype-builtins":{"total":0.0022510000000000004},"no-regex-spaces":{"total":0.007124000000000001},"no-self-assign":{"total":0.002584},"no-shadow-restricted-names":{"total":0.004168},"no-sparse-arrays":{"total":0.000209},"no-unsafe-finally":{"total":0.0067079999999999996},"no-unsafe-optional-chaining":{"total":0.0051220000000000016},"no-unused-labels":{"total":0.000333},"no-unused-private-class-members":{"total":0.000292},"no-useless-backreference":{"total":0.002625},"no-useless-catch":{"total":0.000291},"no-useless-escape":{"total":0.0028330000000000004},"require-yield":{"total":0.00075},"use-isnan":{"total":0.001},"valid-typeof":{"total":0.001958},"no-var":{"total":0.0009170000000000001},"prefer-const":{"total":0.4015},"prefer-rest-params":{"total":0.0014990000000000001},"prefer-spread":{"total":0.0019149999999999998},"@typescript-eslint/ban-ts-comment":{"total":0.009541000000000001},"@typescript-eslint/no-array-constructor":{"total":0.0027919999999999998},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001291},"@typescript-eslint/no-empty-object-type":{"total":0.002625},"@typescript-eslint/no-explicit-any":{"total":0.003834},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001417},"@typescript-eslint/no-misused-new":{"total":0.001208},"@typescript-eslint/no-namespace":{"total":0.002375},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001375},"@typescript-eslint/no-this-alias":{"total":0.002333},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.004792},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001083},"@typescript-eslint/no-unsafe-function-type":{"total":0.001917},"@typescript-eslint/no-unused-expressions":{"total":0.008375},"@typescript-eslint/no-unused-vars":{"total":0.433667},"@typescript-eslint/no-wrapper-object-types":{"total":0.0022500000000000003},"@typescript-eslint/prefer-as-const":{"total":0.0015010000000000002},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000875},"@typescript-eslint/triple-slash-reference":{"total":0.0052910000000000006},"@typescript-eslint/no-non-null-assertion":{"total":0.000833},"@typescript-eslint/adjacent-overload-signatures":{"total":0.007417},"@typescript-eslint/no-empty-function":{"total":0.040833},"@typescript-eslint/no-inferrable-types":{"total":0.050416},"@typescript-eslint/no-empty-interface":{"total":0.001542},"@nx/enforce-module-boundaries":{"total":0.134832}},"fix":{"total":0},"total":3.509875}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/cli/commands/cpu-merge/builder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":1.786792},"rules":{"for-direction":{"total":0.002833},"no-async-promise-executor":{"total":0.0005},"no-case-declarations":{"total":0.000375},"no-compare-neg-zero":{"total":0.00125},"no-cond-assign":{"total":0.003417},"no-constant-binary-expression":{"total":0.0011259999999999998},"no-constant-condition":{"total":0.0065},"no-control-regex":{"total":0.007582000000000002},"no-debugger":{"total":0.000334},"no-delete-var":{"total":0.001209},"no-dupe-else-if":{"total":0.005292},"no-duplicate-case":{"total":0.000333},"no-empty":{"total":0.001709},"no-empty-character-class":{"total":0.000291},"no-empty-pattern":{"total":0.000458},"no-empty-static-block":{"total":0.00025},"no-ex-assign":{"total":0.000417},"no-extra-boolean-cast":{"total":0.003376000000000001},"no-fallthrough":{"total":0.010126999999999999},"no-global-assign":{"total":0.020166},"no-invalid-regexp":{"total":0.0026680000000000007},"no-irregular-whitespace":{"total":0.005542},"no-loss-of-precision":{"total":0.005707000000000001},"no-misleading-character-class":{"total":0.009458},"no-nonoctal-decimal-escape":{"total":0.006790000000000002},"no-octal":{"total":0.004581000000000003},"no-prototype-builtins":{"total":0.003959},"no-regex-spaces":{"total":0.023123000000000005},"no-self-assign":{"total":0.0034570000000000004},"no-shadow-restricted-names":{"total":0.004375},"no-sparse-arrays":{"total":0.000626},"no-unsafe-finally":{"total":0.005706999999999999},"no-unsafe-optional-chaining":{"total":0.007710000000000001},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000416},"no-useless-backreference":{"total":0.0029170000000000003},"no-useless-catch":{"total":0.000208},"no-useless-escape":{"total":0.012581999999999996},"require-yield":{"total":0.001082},"use-isnan":{"total":0.001},"valid-typeof":{"total":0.046625},"no-var":{"total":0.000625},"prefer-const":{"total":0.001834},"prefer-rest-params":{"total":0.003291},"prefer-spread":{"total":0.0032069999999999998},"@typescript-eslint/ban-ts-comment":{"total":0.012792},"@typescript-eslint/no-array-constructor":{"total":0.004416},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001542},"@typescript-eslint/no-empty-object-type":{"total":0.003541},"@typescript-eslint/no-explicit-any":{"total":0.003125},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001209},"@typescript-eslint/no-misused-new":{"total":0.001458},"@typescript-eslint/no-namespace":{"total":0.002584},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.00125},"@typescript-eslint/no-this-alias":{"total":0.002416},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.005875},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001292},"@typescript-eslint/no-unsafe-function-type":{"total":0.004251000000000001},"@typescript-eslint/no-unused-expressions":{"total":0.011541000000000001},"@typescript-eslint/no-unused-vars":{"total":0.43170800000000004},"@typescript-eslint/no-wrapper-object-types":{"total":0.004501000000000001},"@typescript-eslint/prefer-as-const":{"total":0.00275},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001125},"@typescript-eslint/triple-slash-reference":{"total":0.008249000000000001},"@typescript-eslint/no-non-null-assertion":{"total":0.001},"@typescript-eslint/adjacent-overload-signatures":{"total":0.008709},"@typescript-eslint/no-empty-function":{"total":0.03475},"@typescript-eslint/no-inferrable-types":{"total":0.0058319999999999995},"@typescript-eslint/no-empty-interface":{"total":0.001958},"@nx/enforce-module-boundaries":{"total":0.648417}},"fix":{"total":0},"total":4.633542}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/cli/commands/cpu-merge/handler.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":48,"column":5,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":48,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":49,"column":5,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":50,"endColumn":67}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { mkdirSync } from 'node:fs';\nimport { readFile } from 'node:fs/promises';\nimport { join } from 'path';\nimport type { MergeArgs, ProcessedMergeArgs } from './types';\nimport { processArgs } from './args-processor';\nimport { mergeCpuProfileFiles } from '../../../lib/merge-cpuprofile-files';\nimport * as console from 'node:console';\n\n/**\n * Handle the merge command execution\n */\nexport async function handler(argv: MergeArgs): Promise<void> {\n  const processedArgs = processArgs(argv);\n\n  try {\n    await handleCpuProfileMerge(processedArgs);\n  } catch (error) {\n    console.error(\n      '❌ Error in cpu-merge command handler:',\n      (error as Error).message\n    );\n    process.exit(1);\n  }\n}\n\n/**\n * Handle CPU profile merging (original bin.ts logic)\n */\nasync function handleCpuProfileMerge(\n  processedArgs: ProcessedMergeArgs\n): Promise<void> {\n  const { inputDir, outputDir, verbose, smosh, startTracingInBrowser } =\n    processedArgs;\n\n  if (!inputDir || inputDir === '') {\n    throw new Error('Input directory is required for CPU profile mode');\n  }\n\n  // Create an output directory if it doesn't exist\n  mkdirSync(outputDir, { recursive: true });\n\n  // Define the output file path inside the output directory\n  const outputFilePath = join(outputDir, 'merged-profile.json');\n\n  if (verbose) {\n    console.log(`🔧 Merging CPU profile files from: ${inputDir}`);\n    console.log(`📄 Output file: ${outputFilePath}`);\n    smosh && console.log('✅ Smosh processes for better DX');\n    startTracingInBrowser &&\n      console.log(`✅ Highlight process ${startTracingInBrowser}`);\n  }\n\n  // Use the existing mergeCpuProfileFiles function with the full file path\n  await mergeCpuProfileFiles(inputDir, outputFilePath, {\n    smosh: smosh ? 'pid' : 'off',\n    startTracingInBrowser,\n  });\n\n  // Read the created file to get statistics\n  const resultContent = await readFile(outputFilePath, 'utf8');\n  const resultTrace = JSON.parse(resultContent);\n  const eventCount = Array.isArray(resultTrace)\n    ? resultTrace.length\n    : resultTrace.traceEvents?.length || 0;\n\n  console.log(`✅ CPU profiles merged successfully!`);\n  console.log(` - 📊 Generated ${eventCount} trace events`);\n  console.log(` - 📄 Output file: ${outputFilePath}`);\n}\n","stats":{"times":{"passes":[{"parse":{"total":1.790041},"rules":{"for-direction":{"total":0.00225},"no-async-promise-executor":{"total":0.000334},"no-case-declarations":{"total":0.000375},"no-compare-neg-zero":{"total":0.0017079999999999999},"no-cond-assign":{"total":0.0018759999999999998},"no-constant-binary-expression":{"total":0.070331},"no-constant-condition":{"total":0.005708},"no-control-regex":{"total":0.004540000000000001},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.000624},"no-dupe-else-if":{"total":0.004458999999999999},"no-duplicate-case":{"total":0.00025},"no-empty":{"total":0.0016260000000000003},"no-empty-character-class":{"total":0.000334},"no-empty-pattern":{"total":0.00075},"no-empty-static-block":{"total":0.00025},"no-ex-assign":{"total":0.002417},"no-extra-boolean-cast":{"total":0.004580000000000001},"no-fallthrough":{"total":0.013461000000000008},"no-global-assign":{"total":0.020501000000000002},"no-invalid-regexp":{"total":0.0032900000000000013},"no-irregular-whitespace":{"total":0.003459},"no-loss-of-precision":{"total":0.009709000000000002},"no-misleading-character-class":{"total":0.017166},"no-nonoctal-decimal-escape":{"total":0.004085000000000001},"no-octal":{"total":0.003086},"no-prototype-builtins":{"total":0.005919},"no-regex-spaces":{"total":0.019875000000000004},"no-self-assign":{"total":0.000833},"no-shadow-restricted-names":{"total":0.007667},"no-sparse-arrays":{"total":0.000292},"no-unsafe-finally":{"total":0.002125},"no-unsafe-optional-chaining":{"total":0.015582000000000004},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000292},"no-useless-backreference":{"total":0.003166},"no-useless-catch":{"total":0.000999},"no-useless-escape":{"total":0.011499},"require-yield":{"total":0.001208},"use-isnan":{"total":0.002124},"valid-typeof":{"total":0.002001},"no-var":{"total":0.001125},"prefer-const":{"total":0.002334},"prefer-rest-params":{"total":0.003959},"prefer-spread":{"total":0.004791},"@typescript-eslint/ban-ts-comment":{"total":0.016208},"@typescript-eslint/no-array-constructor":{"total":0.004790000000000001},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001375},"@typescript-eslint/no-empty-object-type":{"total":0.014917},"@typescript-eslint/no-explicit-any":{"total":0.002209},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001042},"@typescript-eslint/no-misused-new":{"total":0.00125},"@typescript-eslint/no-namespace":{"total":0.001834},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001083},"@typescript-eslint/no-this-alias":{"total":0.001833},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.005084},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.00125},"@typescript-eslint/no-unsafe-function-type":{"total":0.002084},"@typescript-eslint/no-unused-expressions":{"total":0.13091499999999998},"@typescript-eslint/no-unused-vars":{"total":0.416334},"@typescript-eslint/no-wrapper-object-types":{"total":0.0029159999999999998},"@typescript-eslint/prefer-as-const":{"total":0.002667},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000917},"@typescript-eslint/triple-slash-reference":{"total":0.007125000000000001},"@typescript-eslint/no-non-null-assertion":{"total":0.000791},"@typescript-eslint/adjacent-overload-signatures":{"total":0.025626000000000003},"@typescript-eslint/no-empty-function":{"total":0.034626000000000004},"@typescript-eslint/no-inferrable-types":{"total":0.005915000000000001},"@typescript-eslint/no-empty-interface":{"total":0.001667},"@nx/enforce-module-boundaries":{"total":0.077501}},"fix":{"total":0},"total":4.26125}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/cli/commands/cpu-merge/index.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":9,"column":42,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":9,"endColumn":44,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[244,246],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[244,246],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { CommandModule } from 'yargs';\nimport type { MergeArgs } from './types';\nimport { builder } from './builder';\nimport { handler } from './handler';\n\n/**\n * Merge command module for yargs\n */\nexport const mergeCommand: CommandModule<{}, MergeArgs> = {\n  command: 'merge <inputDir>',\n  describe:\n    'Merge multiple Chrome DevTools trace files or CPU profile files into a single file',\n  builder,\n  handler,\n};\n\nexport default mergeCommand;\n\n// Re-export types and utilities for external use\nexport type { MergeArgs, ProcessedMergeArgs } from './types';\nexport { processArgs } from './args-processor';\n","stats":{"times":{"passes":[{"parse":{"total":0.718583},"rules":{"for-direction":{"total":0.0025},"no-async-promise-executor":{"total":0.000334},"no-case-declarations":{"total":0.000333},"no-compare-neg-zero":{"total":0.001041},"no-cond-assign":{"total":0.000875},"no-constant-binary-expression":{"total":0.000416},"no-constant-condition":{"total":0.001334},"no-control-regex":{"total":0.0024999999999999996},"no-debugger":{"total":0.000333},"no-delete-var":{"total":0.000208},"no-dupe-else-if":{"total":0.000458},"no-duplicate-case":{"total":0.000459},"no-empty":{"total":0.000542},"no-empty-character-class":{"total":0.00025},"no-empty-pattern":{"total":0.000458},"no-empty-static-block":{"total":0.000292},"no-ex-assign":{"total":0.000291},"no-extra-boolean-cast":{"total":0.001125},"no-fallthrough":{"total":0.002957},"no-global-assign":{"total":0.018833},"no-invalid-regexp":{"total":0.000666},"no-irregular-whitespace":{"total":0.003},"no-loss-of-precision":{"total":0.001957},"no-misleading-character-class":{"total":0.009916},"no-nonoctal-decimal-escape":{"total":0.0025},"no-octal":{"total":0.001168},"no-prototype-builtins":{"total":0.000583},"no-regex-spaces":{"total":0.0014990000000000003},"no-self-assign":{"total":0.0005},"no-shadow-restricted-names":{"total":0.003543},"no-sparse-arrays":{"total":0.000417},"no-unsafe-finally":{"total":0.000375},"no-unsafe-optional-chaining":{"total":0.0014990000000000001},"no-unused-labels":{"total":0.000416},"no-unused-private-class-members":{"total":0.000333},"no-useless-backreference":{"total":0.002874},"no-useless-catch":{"total":0.000167},"no-useless-escape":{"total":0.004083},"require-yield":{"total":0.000375},"use-isnan":{"total":0.000958},"valid-typeof":{"total":0.001667},"no-var":{"total":0.0006670000000000001},"prefer-const":{"total":0.001916},"prefer-rest-params":{"total":0.000375},"prefer-spread":{"total":0.000375},"@typescript-eslint/ban-ts-comment":{"total":0.014709},"@typescript-eslint/no-array-constructor":{"total":0.001916},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001125},"@typescript-eslint/no-empty-object-type":{"total":0.119167},"@typescript-eslint/no-explicit-any":{"total":0.003083},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001042},"@typescript-eslint/no-misused-new":{"total":0.001041},"@typescript-eslint/no-namespace":{"total":0.002084},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001},"@typescript-eslint/no-this-alias":{"total":0.002166},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.006959},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001041},"@typescript-eslint/no-unsafe-function-type":{"total":0.001916},"@typescript-eslint/no-unused-expressions":{"total":0.008292},"@typescript-eslint/no-unused-vars":{"total":0.298},"@typescript-eslint/no-wrapper-object-types":{"total":0.0045},"@typescript-eslint/prefer-as-const":{"total":0.002709},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001209},"@typescript-eslint/triple-slash-reference":{"total":0.007626},"@typescript-eslint/no-non-null-assertion":{"total":0.001208},"@typescript-eslint/adjacent-overload-signatures":{"total":0.005666},"@typescript-eslint/no-empty-function":{"total":0.004417},"@typescript-eslint/no-inferrable-types":{"total":0.005749000000000001},"@typescript-eslint/no-empty-interface":{"total":0.001708},"@nx/enforce-module-boundaries":{"total":0.07933300000000001}},"fix":{"total":0},"total":2.446167}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/cli/commands/cpu-merge/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.472917},"rules":{"for-direction":{"total":0.001958},"no-async-promise-executor":{"total":0.00025},"no-case-declarations":{"total":0.000292},"no-compare-neg-zero":{"total":0.000833},"no-cond-assign":{"total":0.000833},"no-constant-binary-expression":{"total":0.000292},"no-constant-condition":{"total":0.001041},"no-control-regex":{"total":0.000334},"no-debugger":{"total":0.000333},"no-delete-var":{"total":0.00025},"no-dupe-else-if":{"total":0.000334},"no-duplicate-case":{"total":0.00025},"no-empty":{"total":0.000625},"no-empty-character-class":{"total":0.000209},"no-empty-pattern":{"total":0.000459},"no-empty-static-block":{"total":0.000291},"no-ex-assign":{"total":0.00025},"no-extra-boolean-cast":{"total":0.001042},"no-fallthrough":{"total":0.002292},"no-global-assign":{"total":0.017458},"no-invalid-regexp":{"total":0.000583},"no-irregular-whitespace":{"total":0.002042},"no-loss-of-precision":{"total":0.000375},"no-misleading-character-class":{"total":0.007708},"no-nonoctal-decimal-escape":{"total":0.000292},"no-octal":{"total":0.000209},"no-prototype-builtins":{"total":0.000458},"no-regex-spaces":{"total":0.000292},"no-self-assign":{"total":0.000458},"no-shadow-restricted-names":{"total":0.000583},"no-sparse-arrays":{"total":0.000334},"no-unsafe-finally":{"total":0.000291},"no-unsafe-optional-chaining":{"total":0.000917},"no-unused-labels":{"total":0.0005},"no-unused-private-class-members":{"total":0.000375},"no-useless-backreference":{"total":0.002917},"no-useless-catch":{"total":0.00025},"no-useless-escape":{"total":0.001083},"require-yield":{"total":0.000292},"use-isnan":{"total":0.000958},"valid-typeof":{"total":0.001333},"no-var":{"total":0.000292},"prefer-const":{"total":0.001292},"prefer-rest-params":{"total":0.000459},"prefer-spread":{"total":0.000333},"@typescript-eslint/ban-ts-comment":{"total":0.00775},"@typescript-eslint/no-array-constructor":{"total":0.00125},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000875},"@typescript-eslint/no-empty-object-type":{"total":0.0033749999999999995},"@typescript-eslint/no-explicit-any":{"total":0.002},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000959},"@typescript-eslint/no-misused-new":{"total":0.000875},"@typescript-eslint/no-namespace":{"total":0.001708},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000958},"@typescript-eslint/no-this-alias":{"total":0.001667},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.003917},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.0036249999999999998},"@typescript-eslint/no-unsafe-function-type":{"total":0.001},"@typescript-eslint/no-unused-expressions":{"total":0.006792},"@typescript-eslint/no-unused-vars":{"total":0.31058399999999997},"@typescript-eslint/no-wrapper-object-types":{"total":0.001125},"@typescript-eslint/prefer-as-const":{"total":0.000875},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000709},"@typescript-eslint/triple-slash-reference":{"total":0.00475},"@typescript-eslint/no-non-null-assertion":{"total":0.000792},"@typescript-eslint/adjacent-overload-signatures":{"total":0.005333},"@typescript-eslint/no-empty-function":{"total":0.003416},"@typescript-eslint/no-inferrable-types":{"total":0.003375},"@typescript-eslint/no-empty-interface":{"total":0.001917},"@nx/enforce-module-boundaries":{"total":0.011958}},"fix":{"total":0},"total":1.870291}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/cli/commands/trace-reduce/args-processor.ts","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":12,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":12,"endColumn":36},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":13,"column":22,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":13,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ReduceTraceArgs, ProcessedArgs } from './types';\n\n/**\n * Process and validate CLI arguments for the reduce-trace command\n * Note: Default input/output file handling is now done by yargs middleware\n */\nexport function processArgs(\n  argv: ReduceTraceArgs,\n  logger = console\n): ProcessedArgs {\n  // Input and output files are now handled by middleware\n  const inputFile = argv.inputFile!; // Safe to assert since middleware ensures it's set\n  const outputFile = argv.output!; // Safe to assert since middleware ensures it's set\n\n  if (argv.verbose) {\n    // Verbose logging is handled elsewhere - this just indicates middleware was used\n    logger.log(`📁 Using input file: ${inputFile}`);\n    logger.log(`📁 Using output file: ${outputFile}`);\n  }\n\n  return {\n    inputFile,\n    outputFile,\n    verbose: argv.verbose || false,\n    filterOptions: {\n      filterNetwork: argv.network ?? true,\n      filterAnimation: argv.animation ?? true,\n      filterGPU: argv.gpu ?? true,\n      filterThreadPool: argv.threadpool ?? true,\n      filterStreamingCompile: argv.streamingcompile ?? true,\n      durMin: argv['dur-min'],\n      durMax: argv['dur-max'],\n      tsMin: argv['ts-min'],\n      tsMax: argv['ts-max'],\n      includePhases: argv['include-phases'],\n      excludePhases: argv['exclude-phases'],\n      includePids: argv['include-pids'],\n      excludePids: argv['exclude-pids'],\n      includeTids: argv['include-tids'],\n      excludeTids: argv['exclude-tids'],\n      includeNames: argv['include-names'],\n      excludeNames: argv['exclude-names'],\n      includeCats: argv['include-cats'],\n      excludeCats: argv['exclude-cats'],\n    },\n  };\n}\n","stats":{"times":{"passes":[{"parse":{"total":0.973125},"rules":{"for-direction":{"total":0.001583},"no-async-promise-executor":{"total":0.00025},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.000791},"no-cond-assign":{"total":0.001167},"no-constant-binary-expression":{"total":0.053749000000000005},"no-constant-condition":{"total":0.002709},"no-control-regex":{"total":0.00421},"no-debugger":{"total":0.000208},"no-delete-var":{"total":0.000208},"no-dupe-else-if":{"total":0.0019169999999999999},"no-duplicate-case":{"total":0.000292},"no-empty":{"total":0.000959},"no-empty-character-class":{"total":0.000208},"no-empty-pattern":{"total":0.000417},"no-empty-static-block":{"total":0.000208},"no-ex-assign":{"total":0.00025},"no-extra-boolean-cast":{"total":0.001459},"no-fallthrough":{"total":0.00996},"no-global-assign":{"total":0.017458},"no-invalid-regexp":{"total":0.001001},"no-irregular-whitespace":{"total":0.002916},"no-loss-of-precision":{"total":0.003420000000000001},"no-misleading-character-class":{"total":0.006791999999999999},"no-nonoctal-decimal-escape":{"total":0.003836000000000001},"no-octal":{"total":0.0026270000000000004},"no-prototype-builtins":{"total":0.0017499999999999998},"no-regex-spaces":{"total":0.009375000000000001},"no-self-assign":{"total":0.000417},"no-shadow-restricted-names":{"total":0.003124},"no-sparse-arrays":{"total":0.00025},"no-unsafe-finally":{"total":0.00175},"no-unsafe-optional-chaining":{"total":0.0072499999999999995},"no-unused-labels":{"total":0.000292},"no-unused-private-class-members":{"total":0.00025},"no-useless-backreference":{"total":0.002792},"no-useless-catch":{"total":0.000209},"no-useless-escape":{"total":0.008124},"require-yield":{"total":0.000832},"use-isnan":{"total":0.000834},"valid-typeof":{"total":0.001292},"no-var":{"total":0.0006670000000000001},"prefer-const":{"total":0.0015},"prefer-rest-params":{"total":0.001292},"prefer-spread":{"total":0.0014590000000000002},"@typescript-eslint/ban-ts-comment":{"total":0.010124000000000001},"@typescript-eslint/no-array-constructor":{"total":0.0015829999999999998},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000834},"@typescript-eslint/no-empty-object-type":{"total":0.002041},"@typescript-eslint/no-explicit-any":{"total":0.001875},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000833},"@typescript-eslint/no-misused-new":{"total":0.000792},"@typescript-eslint/no-namespace":{"total":0.001625},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000834},"@typescript-eslint/no-this-alias":{"total":0.001708},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.004},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001},"@typescript-eslint/no-unsafe-function-type":{"total":0.001458},"@typescript-eslint/no-unused-expressions":{"total":0.009292000000000002},"@typescript-eslint/no-unused-vars":{"total":1.154792},"@typescript-eslint/no-wrapper-object-types":{"total":0.001791},"@typescript-eslint/prefer-as-const":{"total":0.001208},"@typescript-eslint/prefer-namespace-keyword":{"total":0.00075},"@typescript-eslint/triple-slash-reference":{"total":0.005083},"@typescript-eslint/no-non-null-assertion":{"total":0.135126},"@typescript-eslint/adjacent-overload-signatures":{"total":0.006041},"@typescript-eslint/no-empty-function":{"total":0.023875},"@typescript-eslint/no-inferrable-types":{"total":0.006958000000000001},"@typescript-eslint/no-empty-interface":{"total":0.001458},"@nx/enforce-module-boundaries":{"total":0.029417}},"fix":{"total":0},"total":3.679584}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/cli/commands/trace-reduce/builder.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DEFAULT_EXCLUDE_CATS' is assigned a value but never used.","line":16,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Argv } from 'yargs';\nimport { DEFAULT_FILTER_OPTIONS } from '../../../lib/reduce-trace';\nimport type { ReduceTraceArgs } from './types';\nimport {\n  coerceStringArray,\n  coerceNumberArray,\n  coerceStringArrayWithDefaults,\n} from '../../utils';\nimport { validateTraceReduceArgs } from './helpers';\nimport { findNewestTraceFile, generateOutputFilename } from '../../utils';\n\n// Constants for default values to reduce duplication\nconst DEFAULT_DUR_MIN = DEFAULT_FILTER_OPTIONS.durMin;\nconst DEFAULT_EXCLUDE_NAMES =\n  DEFAULT_FILTER_OPTIONS.excludeNames?.join(', ') ?? '';\nconst DEFAULT_EXCLUDE_CATS =\n  DEFAULT_FILTER_OPTIONS.excludeCats?.join(', ') ?? '';\nconst DEFAULT_EXCLUDE_NAMES_COMMA =\n  DEFAULT_FILTER_OPTIONS.excludeNames?.join(',') ?? '';\nconst DEFAULT_EXCLUDE_CATS_COMMA =\n  DEFAULT_FILTER_OPTIONS.excludeCats?.join(',') ?? '';\n\n/**\n * Add basic options (output, verbose)\n */\nfunction addBasicOptions(yargs: Argv<ReduceTraceArgs>): Argv<ReduceTraceArgs> {\n  return yargs\n    .group(['help', 'version', 'verbose', 'output'], 'Basic Options:')\n    .options({\n      output: {\n        alias: 'o',\n        describe: 'Output file path',\n        type: 'string',\n        normalize: true,\n      },\n      verbose: {\n        alias: 'v',\n        describe: 'Enable verbose logging',\n        type: 'boolean',\n        default: false,\n      },\n    });\n}\n\n/**\n * Add event type filtering options\n */\nfunction addEventTypeFilters(\n  yargs: Argv<ReduceTraceArgs>\n): Argv<ReduceTraceArgs> {\n  return yargs\n    .group(\n      ['network', 'animation', 'gpu', 'threadpool', 'streamingcompile'],\n      'Event Type Filtering:'\n    )\n    .options({\n      network: {\n        describe: 'Enable network event filtering',\n        type: 'boolean',\n        default: true,\n      },\n      animation: {\n        describe: 'Enable animation event filtering',\n        type: 'boolean',\n        default: true,\n      },\n      gpu: {\n        describe: 'Enable GPU event filtering',\n        type: 'boolean',\n        default: true,\n      },\n      threadpool: {\n        describe: 'Enable ThreadPool event filtering',\n        type: 'boolean',\n        default: true,\n      },\n      streamingcompile: {\n        describe: 'Enable StreamingCompile event filtering',\n        type: 'boolean',\n        default: true,\n      },\n    });\n}\n\n/**\n * Add advanced filtering options (phases, PIDs, TIDs)\n */\nfunction addAdvancedFiltering(\n  yargs: Argv<ReduceTraceArgs>\n): Argv<ReduceTraceArgs> {\n  return yargs\n    .group(\n      [\n        'include-phases',\n        'exclude-phases',\n        'include-pids',\n        'exclude-pids',\n        'include-tids',\n        'exclude-tids',\n      ],\n      'Advanced Filtering:'\n    )\n    .options({\n      'include-phases': {\n        describe:\n          'Comma-separated list of event phases to include (e.g., B,E,X)',\n        type: 'array',\n        coerce: coerceStringArray,\n      },\n      'exclude-phases': {\n        describe: 'Comma-separated list of event phases to exclude (e.g., M,I)',\n        type: 'array',\n        coerce: coerceStringArray,\n      },\n      'include-pids': {\n        describe: 'Comma-separated list of Process IDs to include',\n        type: 'array',\n        coerce: (arg) => coerceNumberArray(arg, 'PID'),\n      },\n      'exclude-pids': {\n        describe: 'Comma-separated list of Process IDs to exclude',\n        type: 'array',\n        coerce: (arg) => coerceNumberArray(arg, 'PID'),\n      },\n      'include-tids': {\n        describe: 'Comma-separated list of Thread IDs to include',\n        type: 'array',\n        coerce: (arg) => coerceNumberArray(arg, 'TID'),\n      },\n      'exclude-tids': {\n        describe: 'Comma-separated list of Thread IDs to exclude',\n        type: 'array',\n        coerce: (arg) => coerceNumberArray(arg, 'TID'),\n      },\n    });\n}\n\n/**\n * Add name and category filtering options\n */\nfunction addNameCatFiltering(\n  yargs: Argv<ReduceTraceArgs>\n): Argv<ReduceTraceArgs> {\n  return yargs\n    .group(\n      ['include-names', 'exclude-names', 'include-cats', 'exclude-cats'],\n      'Name & Category Filtering:'\n    )\n    .options({\n      'include-names': {\n        describe: 'Comma-separated list of event names to include',\n        type: 'array',\n        coerce: coerceStringArray,\n      },\n      'exclude-names': {\n        describe: `Comma-separated list of event names to exclude (default: ${DEFAULT_EXCLUDE_NAMES_COMMA})`,\n        type: 'array',\n        default: DEFAULT_FILTER_OPTIONS.excludeNames,\n        coerce: (arg) =>\n          coerceStringArrayWithDefaults(\n            arg,\n            DEFAULT_FILTER_OPTIONS.excludeNames\n          ),\n      },\n      'include-cats': {\n        describe: 'Comma-separated list of event categories to include',\n        type: 'array',\n        coerce: coerceStringArray,\n      },\n      'exclude-cats': {\n        describe: `Comma-separated list of event categories to exclude (default: ${DEFAULT_EXCLUDE_CATS_COMMA})`,\n        type: 'array',\n        default: DEFAULT_FILTER_OPTIONS.excludeCats,\n        coerce: (arg) =>\n          coerceStringArrayWithDefaults(\n            arg,\n            DEFAULT_FILTER_OPTIONS.excludeCats\n          ),\n      },\n    });\n}\n\n/**\n * Add duration and timestamp filtering options\n */\nfunction addDurationTimestampFiltering(\n  yargs: Argv<ReduceTraceArgs>\n): Argv<ReduceTraceArgs> {\n  return yargs\n    .group(\n      ['dur-min', 'dur-max', 'ts-min', 'ts-max'],\n      'Duration & Timestamp Filtering:'\n    )\n    .options({\n      'dur-min': {\n        describe: `Filter out events shorter than specified duration in microseconds (default: ${DEFAULT_DUR_MIN}μs)`,\n        type: 'number',\n        default: DEFAULT_FILTER_OPTIONS.durMin,\n      },\n      'dur-max': {\n        describe:\n          'Filter out events longer than specified duration in microseconds',\n        type: 'number',\n      },\n      'ts-min': {\n        describe:\n          'Filter out events with timestamp earlier than specified in microseconds',\n        type: 'number',\n      },\n      'ts-max': {\n        describe:\n          'Filter out events with timestamp later than specified in microseconds',\n        type: 'number',\n      },\n    });\n}\n\n/**\n * Build the yargs command configuration for reduce-trace\n */\nexport function builder(yargs: Argv): Argv<ReduceTraceArgs> {\n  return [\n    addBasicOptions,\n    addEventTypeFilters,\n    addAdvancedFiltering,\n    addNameCatFiltering,\n    addDurationTimestampFiltering,\n  ]\n    .reduce((acc, fn) => fn(acc), yargs)\n    .positional('inputFile', {\n      describe: 'Path to the input trace file (JSON format)',\n      type: 'string',\n      normalize: true,\n    })\n    .example(\n      '$0 trace-reduce trace.json',\n      'Reduce trace.json with default filters'\n    )\n    .example(\n      '$0 trace-reduce trace.json -o cleaned.json -v',\n      'Reduce with custom output and verbose logging'\n    )\n    .example(\n      '$0 trace-reduce --no-network --no-gpu trace.json',\n      'Reduce keeping network and GPU events'\n    )\n    .example(\n      '$0 trace-reduce --include-cats blink,v8 trace.json',\n      'Include only blink and v8 categories'\n    )\n    .example(\n      '$0 trace-reduce --dur-min 1000 --dur-max 50000 trace.json',\n      'Filter by duration range'\n    )\n    .epilog(\n      `\nDefault Behavior:\n  • Network, animation, GPU, ThreadPool, StreamingCompile filtering: enabled\n  • v8.compile category filtering: enabled  \n  • Minimum duration filtering: ${DEFAULT_DUR_MIN}μs\n  • Default excluded names: ${DEFAULT_EXCLUDE_NAMES}\n  • If no input file provided, uses newest .json file from ./packages/cpu-prof/mocks/fixtures/\n  • If no output file specified, adds .reduced.json to the input filename\n  • Use --no-<option> to disable any boolean filter (e.g., --no-network, --no-animation)\n  • Use --no-dur-min to disable minimum duration filtering\n    `\n    )\n    .conflicts('include-phases', 'exclude-phases')\n    .conflicts('include-pids', 'exclude-pids')\n    .conflicts('include-tids', 'exclude-tids')\n    .conflicts('include-names', 'exclude-names')\n    .conflicts('include-cats', 'exclude-cats')\n    .middleware((argv) => {\n      // Handle input file (auto-select if not provided)\n      if (!argv.inputFile) {\n        argv.inputFile = findNewestTraceFile();\n      }\n\n      // Handle output file (auto-generate if not provided)\n      if (!argv.output) {\n        argv.output = generateOutputFilename(argv.inputFile);\n      }\n    })\n    .check(validateTraceReduceArgs);\n}\n","stats":{"times":{"passes":[{"parse":{"total":2.827917},"rules":{"for-direction":{"total":0.002542},"no-async-promise-executor":{"total":0.000417},"no-case-declarations":{"total":0.000333},"no-compare-neg-zero":{"total":0.000958},"no-cond-assign":{"total":0.001543},"no-constant-binary-expression":{"total":0.005374},"no-constant-condition":{"total":0.005371999999999999},"no-control-regex":{"total":0.027621000000000014},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.000834},"no-dupe-else-if":{"total":0.002251},"no-duplicate-case":{"total":0.000375},"no-empty":{"total":0.0019160000000000002},"no-empty-character-class":{"total":0.000209},"no-empty-pattern":{"total":0.000416},"no-empty-static-block":{"total":0.000292},"no-ex-assign":{"total":0.000334},"no-extra-boolean-cast":{"total":0.008040000000000002},"no-fallthrough":{"total":0.023003000000000016},"no-global-assign":{"total":0.019834},"no-invalid-regexp":{"total":0.006417000000000001},"no-irregular-whitespace":{"total":0.009459},"no-loss-of-precision":{"total":0.019082000000000005},"no-misleading-character-class":{"total":0.009916},"no-nonoctal-decimal-escape":{"total":0.020828000000000006},"no-octal":{"total":0.016295000000000004},"no-prototype-builtins":{"total":0.010666000000000004},"no-regex-spaces":{"total":0.04192500000000003},"no-self-assign":{"total":0.006875},"no-shadow-restricted-names":{"total":0.012292000000000004},"no-sparse-arrays":{"total":0.002041},"no-unsafe-finally":{"total":0.00475},"no-unsafe-optional-chaining":{"total":0.01620600000000001},"no-unused-labels":{"total":0.000417},"no-unused-private-class-members":{"total":0.000375},"no-useless-backreference":{"total":0.002958},"no-useless-catch":{"total":0.00025},"no-useless-escape":{"total":0.03329400000000002},"require-yield":{"total":0.0022069999999999998},"use-isnan":{"total":0.000959},"valid-typeof":{"total":0.002041},"no-var":{"total":0.001166},"prefer-const":{"total":0.002333},"prefer-rest-params":{"total":0.004041},"prefer-spread":{"total":0.009542000000000002},"@typescript-eslint/ban-ts-comment":{"total":0.018000000000000002},"@typescript-eslint/no-array-constructor":{"total":0.007707},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000917},"@typescript-eslint/no-empty-object-type":{"total":0.00275},"@typescript-eslint/no-explicit-any":{"total":0.002458},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001167},"@typescript-eslint/no-misused-new":{"total":0.001208},"@typescript-eslint/no-namespace":{"total":0.002167},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000916},"@typescript-eslint/no-this-alias":{"total":0.002333},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.005333},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001041},"@typescript-eslint/no-unsafe-function-type":{"total":0.004750999999999999},"@typescript-eslint/no-unused-expressions":{"total":0.010792},"@typescript-eslint/no-unused-vars":{"total":0.559875},"@typescript-eslint/no-wrapper-object-types":{"total":0.005500999999999998},"@typescript-eslint/prefer-as-const":{"total":0.0017500000000000003},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000875},"@typescript-eslint/triple-slash-reference":{"total":0.008709},"@typescript-eslint/no-non-null-assertion":{"total":0.000875},"@typescript-eslint/adjacent-overload-signatures":{"total":0.013457000000000002},"@typescript-eslint/no-empty-function":{"total":0.09012600000000003},"@typescript-eslint/no-inferrable-types":{"total":0.009376},"@typescript-eslint/no-empty-interface":{"total":0.001958},"@nx/enforce-module-boundaries":{"total":0.07304200000000001}},"fix":{"total":0},"total":5.909}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/cli/commands/trace-reduce/handler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.660084},"rules":{"for-direction":{"total":0.002083},"no-async-promise-executor":{"total":0.000291},"no-case-declarations":{"total":0.000292},"no-compare-neg-zero":{"total":0.001},"no-cond-assign":{"total":0.001125},"no-constant-binary-expression":{"total":0.000291},"no-constant-condition":{"total":0.002666},"no-control-regex":{"total":0.001961},"no-debugger":{"total":0.000208},"no-delete-var":{"total":0.000209},"no-dupe-else-if":{"total":0.001374},"no-duplicate-case":{"total":0.000375},"no-empty":{"total":0.0011250000000000001},"no-empty-character-class":{"total":0.00025},"no-empty-pattern":{"total":0.000459},"no-empty-static-block":{"total":0.00025},"no-ex-assign":{"total":0.002458},"no-extra-boolean-cast":{"total":0.002291},"no-fallthrough":{"total":0.005164},"no-global-assign":{"total":0.018958},"no-invalid-regexp":{"total":0.0017510000000000004},"no-irregular-whitespace":{"total":0.002418},"no-loss-of-precision":{"total":0.012917},"no-misleading-character-class":{"total":0.008625},"no-nonoctal-decimal-escape":{"total":0.002083},"no-octal":{"total":0.0017079999999999999},"no-prototype-builtins":{"total":0.002791},"no-regex-spaces":{"total":0.006914999999999999},"no-self-assign":{"total":0.000542},"no-shadow-restricted-names":{"total":0.004708},"no-sparse-arrays":{"total":0.000208},"no-unsafe-finally":{"total":0.001625},"no-unsafe-optional-chaining":{"total":0.004208000000000001},"no-unused-labels":{"total":0.0005},"no-unused-private-class-members":{"total":0.000334},"no-useless-backreference":{"total":0.002834},"no-useless-catch":{"total":0.0009159999999999999},"no-useless-escape":{"total":0.0034590000000000003},"require-yield":{"total":0.0008750000000000001},"use-isnan":{"total":0.001125},"valid-typeof":{"total":0.001458},"no-var":{"total":0.00075},"prefer-const":{"total":0.001665},"prefer-rest-params":{"total":0.001209},"prefer-spread":{"total":0.002},"@typescript-eslint/ban-ts-comment":{"total":0.014041},"@typescript-eslint/no-array-constructor":{"total":0.002917},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001042},"@typescript-eslint/no-empty-object-type":{"total":0.002666},"@typescript-eslint/no-explicit-any":{"total":0.002},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000916},"@typescript-eslint/no-misused-new":{"total":0.000958},"@typescript-eslint/no-namespace":{"total":0.002042},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.002875},"@typescript-eslint/no-this-alias":{"total":0.001917},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.004625},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001083},"@typescript-eslint/no-unsafe-function-type":{"total":0.001709},"@typescript-eslint/no-unused-expressions":{"total":0.011458000000000001},"@typescript-eslint/no-unused-vars":{"total":0.361083},"@typescript-eslint/no-wrapper-object-types":{"total":0.002375},"@typescript-eslint/prefer-as-const":{"total":0.00371},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000792},"@typescript-eslint/triple-slash-reference":{"total":0.006125},"@typescript-eslint/no-non-null-assertion":{"total":0.000875},"@typescript-eslint/adjacent-overload-signatures":{"total":0.0075829999999999995},"@typescript-eslint/no-empty-function":{"total":0.017958000000000002},"@typescript-eslint/no-inferrable-types":{"total":0.005000999999999999},"@typescript-eslint/no-empty-interface":{"total":0.001625},"@nx/enforce-module-boundaries":{"total":0.052168}},"fix":{"total":0},"total":2.339208}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/cli/commands/trace-reduce/helpers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3061,3064],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3061,3064],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ProcessedArgs } from './types';\nimport type { TraceReductionStats } from '../../../lib/reduce-trace';\nimport path from 'path';\nimport {\n  fileExists,\n  isJsonFile,\n  directoryExists,\n} from '../../../lib/file-utils';\n\n/**\n * Log verbose options when verbose mode is enabled\n */\nexport function logVerboseOptions(args: ProcessedArgs, logger = console): void {\n  logger.log('🔧 Filter Options:');\n  logger.log(\n    `  Network filtering: ${\n      args.filterOptions.filterNetwork ? 'enabled' : 'disabled'\n    }`\n  );\n  logger.log(\n    `  Animation filtering: ${\n      args.filterOptions.filterAnimation ? 'enabled' : 'disabled'\n    }`\n  );\n  logger.log(\n    `  GPU filtering: ${args.filterOptions.filterGPU ? 'enabled' : 'disabled'}`\n  );\n  logger.log(\n    `  ThreadPool filtering: ${\n      args.filterOptions.filterThreadPool ? 'enabled' : 'disabled'\n    }`\n  );\n  logger.log(\n    `  StreamingCompile filtering: ${\n      args.filterOptions.filterStreamingCompile ? 'enabled' : 'disabled'\n    }`\n  );\n\n  if (args.filterOptions.durMin !== undefined) {\n    logger.log(`  Minimum duration: ${args.filterOptions.durMin}μs`);\n  }\n  if (args.filterOptions.durMax !== undefined) {\n    logger.log(`  Maximum duration: ${args.filterOptions.durMax}μs`);\n  }\n  if (args.filterOptions.tsMin !== undefined) {\n    logger.log(`  Minimum timestamp: ${args.filterOptions.tsMin}`);\n  }\n  if (args.filterOptions.tsMax !== undefined) {\n    logger.log(`  Maximum timestamp: ${args.filterOptions.tsMax}`);\n  }\n  if (args.filterOptions.includePhases) {\n    logger.log(\n      `  Include phases: ${args.filterOptions.includePhases.join(', ')}`\n    );\n  }\n  if (args.filterOptions.excludePhases) {\n    logger.log(\n      `  Exclude phases: ${args.filterOptions.excludePhases.join(', ')}`\n    );\n  }\n  if (args.filterOptions.includePids) {\n    logger.log(`  Include PIDs: ${args.filterOptions.includePids.join(', ')}`);\n  }\n  if (args.filterOptions.excludePids) {\n    logger.log(`  Exclude PIDs: ${args.filterOptions.excludePids.join(', ')}`);\n  }\n  if (args.filterOptions.includeTids) {\n    logger.log(`  Include TIDs: ${args.filterOptions.includeTids.join(', ')}`);\n  }\n  if (args.filterOptions.excludeTids) {\n    logger.log(`  Exclude TIDs: ${args.filterOptions.excludeTids.join(', ')}`);\n  }\n  if (args.filterOptions.includeNames) {\n    logger.log(\n      `  Include names: ${args.filterOptions.includeNames.join(', ')}`\n    );\n  }\n  if (args.filterOptions.excludeNames) {\n    logger.log(\n      `  Exclude names: ${args.filterOptions.excludeNames.join(', ')}`\n    );\n  }\n  if (args.filterOptions.includeCats) {\n    logger.log(\n      `  Include categories: ${args.filterOptions.includeCats.join(', ')}`\n    );\n  }\n  if (args.filterOptions.excludeCats) {\n    logger.log(\n      `  Exclude categories: ${args.filterOptions.excludeCats.join(', ')}`\n    );\n  }\n\n  logger.log(`📁 Input file: ${args.inputFile}`);\n  logger.log(`📁 Output file: ${args.outputFile}`);\n}\n\n/**\n * Validate command line arguments for trace-reduce command\n */\nexport function validateTraceReduceArgs(argv: any): boolean {\n  // File validation\n  const inputFile = argv.inputFile;\n  if (inputFile) {\n    if (!fileExists(inputFile as string)) {\n      throw new Error(`Input file does not exist: ${inputFile}`);\n    }\n    if (!isJsonFile(inputFile as string)) {\n      throw new Error(`Input file must be a JSON file: ${inputFile}`);\n    }\n  }\n\n  // Output directory validation\n  if (argv.output) {\n    const outputDir = path.dirname(argv.output as string);\n    if (outputDir !== '.' && !directoryExists(outputDir)) {\n      throw new Error(`Output directory does not exist: ${outputDir}`);\n    }\n  }\n\n  // Duration min/max relationship validation\n  if (\n    argv['dur-min'] !== undefined &&\n    argv['dur-max'] !== undefined &&\n    argv['dur-min'] > argv['dur-max']\n  ) {\n    throw new Error('--dur-min cannot be greater than --dur-max');\n  }\n\n  // Timestamp min/max relationship validation\n  if (\n    argv['ts-min'] !== undefined &&\n    argv['ts-max'] !== undefined &&\n    argv['ts-min'] > argv['ts-max']\n  ) {\n    throw new Error('--ts-min cannot be greater than --ts-max');\n  }\n\n  return true;\n}\n\n/**\n * Format trace reduction statistics for display\n */\nexport interface FormattedStats {\n  originalFileMB: string;\n  originalEventCount: number;\n  cleanedFileMB: string;\n  filteredEventCount: number;\n  removedEventCount: number;\n  reductionRatio: string;\n  inputFile: string;\n  outputFile: string;\n}\n\nexport function getStats(result: TraceReductionStats): FormattedStats {\n  return {\n    originalFileMB: (result.originalSize / (1024 * 1024)).toFixed(2),\n    originalEventCount: result.originalEventCount,\n    cleanedFileMB: (result.cleanedSize / (1024 * 1024)).toFixed(2),\n    filteredEventCount: result.filteredEventCount,\n    removedEventCount: result.removedEventCount,\n    reductionRatio: (\n      (result.removedEventCount / result.originalEventCount) *\n      100\n    ).toFixed(1),\n    inputFile: result.inputFile,\n    outputFile: result.outputFile,\n  };\n}\n\n/**\n * Log trace reduction statistics to console\n */\nexport function logStats(stats: FormattedStats, logger = console): void {\n  logger.log(\n    `📊 Original file: ${stats.originalFileMB} MB, ${stats.originalEventCount} events`\n  );\n  logger.log(\n    `📊 Cleaned file: ${stats.cleanedFileMB} MB, ${stats.filteredEventCount} events`\n  );\n  logger.log(`📊 Events removed: ${stats.removedEventCount}`);\n  logger.log(`📊 Reduction ratio: ${stats.reductionRatio}%`);\n  logger.log(`✅ Reduced trace file created: ${stats.outputFile}`);\n  logger.log(`✅ Original file preserved: ${stats.inputFile}`);\n}\n","stats":{"times":{"passes":[{"parse":{"total":3.219208},"rules":{"for-direction":{"total":0.002083},"no-async-promise-executor":{"total":0.00025},"no-case-declarations":{"total":0.000375},"no-compare-neg-zero":{"total":0.004583},"no-cond-assign":{"total":0.004916000000000001},"no-constant-binary-expression":{"total":0.025830000000000002},"no-constant-condition":{"total":0.017999},"no-control-regex":{"total":0.008714999999999999},"no-debugger":{"total":0.0005},"no-delete-var":{"total":0.0009159999999999999},"no-dupe-else-if":{"total":0.010585},"no-duplicate-case":{"total":0.000417},"no-empty":{"total":0.009585000000000003},"no-empty-character-class":{"total":0.00025},"no-empty-pattern":{"total":0.000458},"no-empty-static-block":{"total":0.000333},"no-ex-assign":{"total":0.000333},"no-extra-boolean-cast":{"total":0.008124000000000003},"no-fallthrough":{"total":0.028336000000000017},"no-global-assign":{"total":0.017542000000000002},"no-invalid-regexp":{"total":0.006962000000000001},"no-irregular-whitespace":{"total":0.006416},"no-loss-of-precision":{"total":0.025878000000000005},"no-misleading-character-class":{"total":0.007667},"no-nonoctal-decimal-escape":{"total":0.00804},"no-octal":{"total":0.005663000000000002},"no-prototype-builtins":{"total":0.011665000000000002},"no-regex-spaces":{"total":0.043663000000000014},"no-self-assign":{"total":0.0005},"no-shadow-restricted-names":{"total":0.006372999999999999},"no-sparse-arrays":{"total":0.000291},"no-unsafe-finally":{"total":0.005126},"no-unsafe-optional-chaining":{"total":0.03224700000000002},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000292},"no-useless-backreference":{"total":0.003},"no-useless-catch":{"total":0.000208},"no-useless-escape":{"total":0.034169000000000026},"require-yield":{"total":0.0018740000000000002},"use-isnan":{"total":0.007043000000000001},"valid-typeof":{"total":0.002},"no-var":{"total":0.000542},"prefer-const":{"total":0.001792},"prefer-rest-params":{"total":0.0038339999999999997},"prefer-spread":{"total":0.010923000000000006},"@typescript-eslint/ban-ts-comment":{"total":0.015165999999999999},"@typescript-eslint/no-array-constructor":{"total":0.007457000000000003},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000958},"@typescript-eslint/no-empty-object-type":{"total":0.002959},"@typescript-eslint/no-explicit-any":{"total":0.024459},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001041},"@typescript-eslint/no-misused-new":{"total":0.001167},"@typescript-eslint/no-namespace":{"total":0.001875},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000792},"@typescript-eslint/no-this-alias":{"total":0.002125},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.005375},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.0029579999999999997},"@typescript-eslint/no-unsafe-function-type":{"total":0.00229},"@typescript-eslint/no-unused-expressions":{"total":0.036713},"@typescript-eslint/no-unused-vars":{"total":1.603667},"@typescript-eslint/no-wrapper-object-types":{"total":0.002501},"@typescript-eslint/prefer-as-const":{"total":0.0035420000000000004},"@typescript-eslint/prefer-namespace-keyword":{"total":0.00075},"@typescript-eslint/triple-slash-reference":{"total":0.007833},"@typescript-eslint/no-non-null-assertion":{"total":0.00075},"@typescript-eslint/adjacent-overload-signatures":{"total":0.032372000000000005},"@typescript-eslint/no-empty-function":{"total":0.071},"@typescript-eslint/no-inferrable-types":{"total":0.00625},"@typescript-eslint/no-empty-interface":{"total":0.001708},"@nx/enforce-module-boundaries":{"total":0.059375}},"fix":{"total":0},"total":7.423416}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/cli/commands/trace-reduce/index.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":6,"column":48,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":6,"endColumn":50,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[214,216],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[214,216],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { CommandModule } from 'yargs';\nimport type { ReduceTraceArgs } from './types';\nimport { builder } from './builder';\nimport { handler } from './handler';\n\nexport const reduceTraceCommand: CommandModule<{}, ReduceTraceArgs> = {\n  command: 'trace-reduce [inputFile]',\n  describe: 'Reduce Chrome DevTools trace files by filtering unwanted events',\n  builder,\n  handler,\n};\n\nexport default reduceTraceCommand;\n\nexport type { ReduceTraceArgs, ProcessedArgs, ValidatedArgs } from './types';\nexport { processArgs } from './args-processor';\nexport { logVerboseOptions } from './helpers';\n","stats":{"times":{"passes":[{"parse":{"total":0.600167},"rules":{"for-direction":{"total":0.002417},"no-async-promise-executor":{"total":0.00025},"no-case-declarations":{"total":0.000417},"no-compare-neg-zero":{"total":0.001167},"no-cond-assign":{"total":0.000916},"no-constant-binary-expression":{"total":0.000375},"no-constant-condition":{"total":0.001125},"no-control-regex":{"total":0.0026670000000000005},"no-debugger":{"total":0.000375},"no-delete-var":{"total":0.00025},"no-dupe-else-if":{"total":0.000417},"no-duplicate-case":{"total":0.000292},"no-empty":{"total":0.000667},"no-empty-character-class":{"total":0.00025},"no-empty-pattern":{"total":0.0005},"no-empty-static-block":{"total":0.00025},"no-ex-assign":{"total":0.000375},"no-extra-boolean-cast":{"total":0.001083},"no-fallthrough":{"total":0.002668},"no-global-assign":{"total":0.018291},"no-invalid-regexp":{"total":0.000791},"no-irregular-whitespace":{"total":0.003042},"no-loss-of-precision":{"total":0.006958},"no-misleading-character-class":{"total":0.017792},"no-nonoctal-decimal-escape":{"total":0.0027940000000000005},"no-octal":{"total":0.001458},"no-prototype-builtins":{"total":0.000625},"no-regex-spaces":{"total":0.0016660000000000004},"no-self-assign":{"total":0.000458},"no-shadow-restricted-names":{"total":0.0034180000000000005},"no-sparse-arrays":{"total":0.000375},"no-unsafe-finally":{"total":0.000292},"no-unsafe-optional-chaining":{"total":0.0012079999999999999},"no-unused-labels":{"total":0.000458},"no-unused-private-class-members":{"total":0.000291},"no-useless-backreference":{"total":0.003083},"no-useless-catch":{"total":0.00025},"no-useless-escape":{"total":0.004626},"require-yield":{"total":0.000458},"use-isnan":{"total":0.000959},"valid-typeof":{"total":0.00475},"no-var":{"total":0.000499},"prefer-const":{"total":0.0017079999999999999},"prefer-rest-params":{"total":0.0005},"prefer-spread":{"total":0.000333},"@typescript-eslint/ban-ts-comment":{"total":0.016083},"@typescript-eslint/no-array-constructor":{"total":0.001583},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001083},"@typescript-eslint/no-empty-object-type":{"total":0.028001},"@typescript-eslint/no-explicit-any":{"total":0.002291},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000917},"@typescript-eslint/no-misused-new":{"total":0.001333},"@typescript-eslint/no-namespace":{"total":0.002208},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001291},"@typescript-eslint/no-this-alias":{"total":0.0025},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.004542},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001125},"@typescript-eslint/no-unsafe-function-type":{"total":0.00175},"@typescript-eslint/no-unused-expressions":{"total":0.008125},"@typescript-eslint/no-unused-vars":{"total":0.29125},"@typescript-eslint/no-wrapper-object-types":{"total":0.002084},"@typescript-eslint/prefer-as-const":{"total":0.002708},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000958},"@typescript-eslint/triple-slash-reference":{"total":0.011458000000000001},"@typescript-eslint/no-non-null-assertion":{"total":0.000917},"@typescript-eslint/adjacent-overload-signatures":{"total":0.00475},"@typescript-eslint/no-empty-function":{"total":0.009667},"@typescript-eslint/no-inferrable-types":{"total":0.006208},"@typescript-eslint/no-empty-interface":{"total":0.001708},"@nx/enforce-module-boundaries":{"total":0.26683599999999996}},"fix":{"total":0},"total":2.397625}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/cli/commands/trace-reduce/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":1.092875},"rules":{"for-direction":{"total":0.001916},"no-async-promise-executor":{"total":0.00025},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.000833},"no-cond-assign":{"total":0.000875},"no-constant-binary-expression":{"total":0.000333},"no-constant-condition":{"total":0.001042},"no-control-regex":{"total":0.002875},"no-debugger":{"total":0.000209},"no-delete-var":{"total":0.000208},"no-dupe-else-if":{"total":0.000375},"no-duplicate-case":{"total":0.000333},"no-empty":{"total":0.000542},"no-empty-character-class":{"total":0.000208},"no-empty-pattern":{"total":0.000417},"no-empty-static-block":{"total":0.00025},"no-ex-assign":{"total":0.000291},"no-extra-boolean-cast":{"total":0.001084},"no-fallthrough":{"total":0.0023750000000000004},"no-global-assign":{"total":0.018042},"no-invalid-regexp":{"total":0.000625},"no-irregular-whitespace":{"total":0.003874},"no-loss-of-precision":{"total":0.0023340000000000006},"no-misleading-character-class":{"total":0.007790999999999999},"no-nonoctal-decimal-escape":{"total":0.0024590000000000007},"no-octal":{"total":0.0017529999999999998},"no-prototype-builtins":{"total":0.000458},"no-regex-spaces":{"total":0.0019160000000000002},"no-self-assign":{"total":0.000458},"no-shadow-restricted-names":{"total":0.000708},"no-sparse-arrays":{"total":0.000208},"no-unsafe-finally":{"total":0.000292},"no-unsafe-optional-chaining":{"total":0.000792},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000333},"no-useless-backreference":{"total":0.002542},"no-useless-catch":{"total":0.000208},"no-useless-escape":{"total":0.004000999999999999},"require-yield":{"total":0.000333},"use-isnan":{"total":0.000917},"valid-typeof":{"total":0.0015},"no-var":{"total":0.000334},"prefer-const":{"total":0.001125},"prefer-rest-params":{"total":0.000291},"prefer-spread":{"total":0.00025},"@typescript-eslint/ban-ts-comment":{"total":0.010625},"@typescript-eslint/no-array-constructor":{"total":0.001167},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000875},"@typescript-eslint/no-empty-object-type":{"total":0.004042},"@typescript-eslint/no-explicit-any":{"total":0.001958},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000875},"@typescript-eslint/no-misused-new":{"total":0.000875},"@typescript-eslint/no-namespace":{"total":0.001833},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000875},"@typescript-eslint/no-this-alias":{"total":0.001708},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.003833},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.005292000000000001},"@typescript-eslint/no-unsafe-function-type":{"total":0.000916},"@typescript-eslint/no-unused-expressions":{"total":0.006916},"@typescript-eslint/no-unused-vars":{"total":0.321208},"@typescript-eslint/no-wrapper-object-types":{"total":0.001083},"@typescript-eslint/prefer-as-const":{"total":0.000834},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000792},"@typescript-eslint/triple-slash-reference":{"total":0.005334},"@typescript-eslint/no-non-null-assertion":{"total":0.000833},"@typescript-eslint/adjacent-overload-signatures":{"total":0.01996},"@typescript-eslint/no-empty-function":{"total":0.003542},"@typescript-eslint/no-inferrable-types":{"total":0.003375},"@typescript-eslint/no-empty-interface":{"total":0.002124},"@nx/enforce-module-boundaries":{"total":0.012083}},"fix":{"total":0},"total":2.701292}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/cli/core/commands.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":10,"column":38,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":10,"endColumn":40,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[435,437],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[435,437],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[439,442],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[439,442],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { CommandModule } from 'yargs';\n// @TODO: add back in when we it is cleaned up and considered useful after research is trace event done.\n// import { reduceTraceCommand } from '../commands/trace-reduce/index';\nimport { mergeCommand } from '../commands/cpu-merge/index';\nimport { measureCommand } from '../commands/cpu-measure/builder';\n\n/**\n * Registry of all available CLI commands\n */\nexport const commands: CommandModule<{}, any>[] = [\n  {\n    ...measureCommand,\n    command: '*',\n  },\n  measureCommand,\n  mergeCommand,\n  // @TODO: add back in when we it is cleaned up and considered useful after research is trace event done.\n  // reduceTraceCommand,\n];\n\nexport { reduceTraceCommand } from '../commands/trace-reduce/index';\nexport { mergeCommand } from '../commands/cpu-merge/index';\nexport { measureCommand } from '../commands/cpu-measure/builder';\n","stats":{"times":{"passes":[{"parse":{"total":0.529375},"rules":{"for-direction":{"total":0.001708},"no-async-promise-executor":{"total":0.000291},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.000833},"no-cond-assign":{"total":0.000833},"no-constant-binary-expression":{"total":0.000292},"no-constant-condition":{"total":0.000916},"no-control-regex":{"total":0.002001},"no-debugger":{"total":0.000208},"no-delete-var":{"total":0.000208},"no-dupe-else-if":{"total":0.000334},"no-duplicate-case":{"total":0.000291},"no-empty":{"total":0.0005},"no-empty-character-class":{"total":0.000208},"no-empty-pattern":{"total":0.000459},"no-empty-static-block":{"total":0.000209},"no-ex-assign":{"total":0.00025},"no-extra-boolean-cast":{"total":0.001042},"no-fallthrough":{"total":0.0023759999999999996},"no-global-assign":{"total":0.017208},"no-invalid-regexp":{"total":0.000541},"no-irregular-whitespace":{"total":0.002874},"no-loss-of-precision":{"total":0.0016260000000000003},"no-misleading-character-class":{"total":0.007208000000000001},"no-nonoctal-decimal-escape":{"total":0.001668},"no-octal":{"total":0.001082},"no-prototype-builtins":{"total":0.000708},"no-regex-spaces":{"total":0.0012490000000000001},"no-self-assign":{"total":0.000458},"no-shadow-restricted-names":{"total":0.002416},"no-sparse-arrays":{"total":0.0007080000000000001},"no-unsafe-finally":{"total":0.000292},"no-unsafe-optional-chaining":{"total":0.001499},"no-unused-labels":{"total":0.000459},"no-unused-private-class-members":{"total":0.000291},"no-useless-backreference":{"total":0.002666},"no-useless-catch":{"total":0.000208},"no-useless-escape":{"total":0.003417},"require-yield":{"total":0.000333},"use-isnan":{"total":0.000875},"valid-typeof":{"total":0.001375},"no-var":{"total":0.000417},"prefer-const":{"total":0.001292},"prefer-rest-params":{"total":0.00025},"prefer-spread":{"total":0.000291},"@typescript-eslint/ban-ts-comment":{"total":0.009875},"@typescript-eslint/no-array-constructor":{"total":0.0015},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000875},"@typescript-eslint/no-empty-object-type":{"total":0.055541},"@typescript-eslint/no-explicit-any":{"total":0.013541999999999998},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000875},"@typescript-eslint/no-misused-new":{"total":0.000959},"@typescript-eslint/no-namespace":{"total":0.001834},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001},"@typescript-eslint/no-this-alias":{"total":0.001792},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.003875},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001167},"@typescript-eslint/no-unsafe-function-type":{"total":0.001167},"@typescript-eslint/no-unused-expressions":{"total":0.00675},"@typescript-eslint/no-unused-vars":{"total":2.612583},"@typescript-eslint/no-wrapper-object-types":{"total":0.001625},"@typescript-eslint/prefer-as-const":{"total":0.002708},"@typescript-eslint/prefer-namespace-keyword":{"total":0.00075},"@typescript-eslint/triple-slash-reference":{"total":0.005249000000000001},"@typescript-eslint/no-non-null-assertion":{"total":0.000792},"@typescript-eslint/adjacent-overload-signatures":{"total":0.003834},"@typescript-eslint/no-empty-function":{"total":0.003416},"@typescript-eslint/no-inferrable-types":{"total":0.005124},"@typescript-eslint/no-empty-interface":{"total":0.0015},"@nx/enforce-module-boundaries":{"total":0.056499999999999995}},"fix":{"total":0},"total":4.356167}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/cli/core/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.203167},"rules":{"for-direction":{"total":0.048625},"no-async-promise-executor":{"total":0.000625},"no-case-declarations":{"total":0.000458},"no-compare-neg-zero":{"total":0.001208},"no-cond-assign":{"total":0.001},"no-constant-binary-expression":{"total":0.000333},"no-constant-condition":{"total":0.000958},"no-control-regex":{"total":0.001209},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.000208},"no-dupe-else-if":{"total":0.000375},"no-duplicate-case":{"total":0.000417},"no-empty":{"total":0.000584},"no-empty-character-class":{"total":0.000166},"no-empty-pattern":{"total":0.000625},"no-empty-static-block":{"total":0.000292},"no-ex-assign":{"total":0.000291},"no-extra-boolean-cast":{"total":0.001083},"no-fallthrough":{"total":0.002292},"no-global-assign":{"total":0.021458},"no-invalid-regexp":{"total":0.000541},"no-irregular-whitespace":{"total":0.001958},"no-loss-of-precision":{"total":0.001042},"no-misleading-character-class":{"total":0.012792},"no-nonoctal-decimal-escape":{"total":0.0008739999999999999},"no-octal":{"total":0.000583},"no-prototype-builtins":{"total":0.000541},"no-regex-spaces":{"total":0.00075},"no-self-assign":{"total":0.000458},"no-shadow-restricted-names":{"total":0.000625},"no-sparse-arrays":{"total":0.000208},"no-unsafe-finally":{"total":0.000292},"no-unsafe-optional-chaining":{"total":0.000791},"no-unused-labels":{"total":0.000541},"no-unused-private-class-members":{"total":0.000292},"no-useless-backreference":{"total":0.003208},"no-useless-catch":{"total":0.000208},"no-useless-escape":{"total":0.0020829999999999998},"require-yield":{"total":0.000333},"use-isnan":{"total":0.001},"valid-typeof":{"total":0.0015},"no-var":{"total":0.000291},"prefer-const":{"total":0.001416},"prefer-rest-params":{"total":0.000333},"prefer-spread":{"total":0.000333},"@typescript-eslint/ban-ts-comment":{"total":0.012542},"@typescript-eslint/no-array-constructor":{"total":0.001541},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000958},"@typescript-eslint/no-empty-object-type":{"total":0.002791},"@typescript-eslint/no-explicit-any":{"total":0.00225},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000875},"@typescript-eslint/no-misused-new":{"total":0.000917},"@typescript-eslint/no-namespace":{"total":0.001916},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000875},"@typescript-eslint/no-this-alias":{"total":0.002042},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.004375},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001},"@typescript-eslint/no-unsafe-function-type":{"total":0.000916},"@typescript-eslint/no-unused-expressions":{"total":0.01175},"@typescript-eslint/no-unused-vars":{"total":0.272334},"@typescript-eslint/no-wrapper-object-types":{"total":0.00125},"@typescript-eslint/prefer-as-const":{"total":0.000959},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000958},"@typescript-eslint/triple-slash-reference":{"total":0.0055},"@typescript-eslint/no-non-null-assertion":{"total":0.000917},"@typescript-eslint/adjacent-overload-signatures":{"total":0.00225},"@typescript-eslint/no-empty-function":{"total":0.003708},"@typescript-eslint/no-inferrable-types":{"total":0.00375},"@typescript-eslint/no-empty-interface":{"total":0.001667},"@nx/enforce-module-boundaries":{"total":0.032375}},"fix":{"total":0},"total":1.624125}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/cli/core/main.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.557708},"rules":{"for-direction":{"total":0.001791},"no-async-promise-executor":{"total":0.00025},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.000875},"no-cond-assign":{"total":0.000916},"no-constant-binary-expression":{"total":0.000334},"no-constant-condition":{"total":0.002751},"no-control-regex":{"total":0.0027940000000000005},"no-debugger":{"total":0.000208},"no-delete-var":{"total":0.00025},"no-dupe-else-if":{"total":0.000375},"no-duplicate-case":{"total":0.000209},"no-empty":{"total":0.001041},"no-empty-character-class":{"total":0.000208},"no-empty-pattern":{"total":0.000459},"no-empty-static-block":{"total":0.000375},"no-ex-assign":{"total":0.00025},"no-extra-boolean-cast":{"total":0.003167000000000001},"no-fallthrough":{"total":0.050166999999999996},"no-global-assign":{"total":0.018208000000000002},"no-invalid-regexp":{"total":0.0025420000000000004},"no-irregular-whitespace":{"total":0.002375},"no-loss-of-precision":{"total":0.013249},"no-misleading-character-class":{"total":0.006625000000000001},"no-nonoctal-decimal-escape":{"total":0.0026260000000000003},"no-octal":{"total":0.0022090000000000005},"no-prototype-builtins":{"total":0.0051660000000000005},"no-regex-spaces":{"total":0.012958},"no-self-assign":{"total":0.0005},"no-shadow-restricted-names":{"total":0.0037929999999999995},"no-sparse-arrays":{"total":0.000208},"no-unsafe-finally":{"total":0.000334},"no-unsafe-optional-chaining":{"total":0.013500000000000002},"no-unused-labels":{"total":0.000333},"no-unused-private-class-members":{"total":0.000417},"no-useless-backreference":{"total":0.0027080000000000003},"no-useless-catch":{"total":0.000208},"no-useless-escape":{"total":0.005997},"require-yield":{"total":0.0009170000000000001},"use-isnan":{"total":0.001125},"valid-typeof":{"total":0.001417},"no-var":{"total":0.000542},"prefer-const":{"total":0.0013739999999999998},"prefer-rest-params":{"total":0.001166},"prefer-spread":{"total":0.0044139999999999995},"@typescript-eslint/ban-ts-comment":{"total":0.007042},"@typescript-eslint/no-array-constructor":{"total":0.003458},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000917},"@typescript-eslint/no-empty-object-type":{"total":0.002042},"@typescript-eslint/no-explicit-any":{"total":0.001833},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001083},"@typescript-eslint/no-misused-new":{"total":0.000875},"@typescript-eslint/no-namespace":{"total":0.001625},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000875},"@typescript-eslint/no-this-alias":{"total":0.001667},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.003958},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001125},"@typescript-eslint/no-unsafe-function-type":{"total":0.001543},"@typescript-eslint/no-unused-expressions":{"total":0.009209},"@typescript-eslint/no-unused-vars":{"total":2.735332},"@typescript-eslint/no-wrapper-object-types":{"total":0.002},"@typescript-eslint/prefer-as-const":{"total":0.001166},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000791},"@typescript-eslint/triple-slash-reference":{"total":0.0054589999999999994},"@typescript-eslint/no-non-null-assertion":{"total":0.000792},"@typescript-eslint/adjacent-overload-signatures":{"total":0.006291000000000001},"@typescript-eslint/no-empty-function":{"total":0.020667},"@typescript-eslint/no-inferrable-types":{"total":0.004709},"@typescript-eslint/no-empty-interface":{"total":0.0015},"@nx/enforce-module-boundaries":{"total":0.19766699999999998}},"fix":{"total":0},"total":4.868459}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/cli/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.238458},"rules":{"for-direction":{"total":0.001625},"no-async-promise-executor":{"total":0.000208},"no-case-declarations":{"total":0.000292},"no-compare-neg-zero":{"total":0.000792},"no-cond-assign":{"total":0.00075},"no-constant-binary-expression":{"total":0.00025},"no-constant-condition":{"total":0.000709},"no-control-regex":{"total":0.001124},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.00025},"no-dupe-else-if":{"total":0.000375},"no-duplicate-case":{"total":0.000292},"no-empty":{"total":0.000417},"no-empty-character-class":{"total":0.000208},"no-empty-pattern":{"total":0.000416},"no-empty-static-block":{"total":0.00025},"no-ex-assign":{"total":0.000167},"no-extra-boolean-cast":{"total":0.001},"no-fallthrough":{"total":0.001959},"no-global-assign":{"total":0.017041},"no-invalid-regexp":{"total":0.000584},"no-irregular-whitespace":{"total":0.001417},"no-loss-of-precision":{"total":0.0010409999999999998},"no-misleading-character-class":{"total":0.014667},"no-nonoctal-decimal-escape":{"total":0.001126},"no-octal":{"total":0.000708},"no-prototype-builtins":{"total":0.0005},"no-regex-spaces":{"total":0.003501},"no-self-assign":{"total":0.000459},"no-shadow-restricted-names":{"total":0.000625},"no-sparse-arrays":{"total":0.000208},"no-unsafe-finally":{"total":0.000292},"no-unsafe-optional-chaining":{"total":0.000625},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000291},"no-useless-backreference":{"total":0.0026249999999999997},"no-useless-catch":{"total":0.00025},"no-useless-escape":{"total":0.002124},"require-yield":{"total":0.000333},"use-isnan":{"total":0.000916},"valid-typeof":{"total":0.001417},"no-var":{"total":0.000291},"prefer-const":{"total":0.000959},"prefer-rest-params":{"total":0.000292},"prefer-spread":{"total":0.00025},"@typescript-eslint/ban-ts-comment":{"total":0.009541999999999998},"@typescript-eslint/no-array-constructor":{"total":0.001166},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000875},"@typescript-eslint/no-empty-object-type":{"total":0.002084},"@typescript-eslint/no-explicit-any":{"total":0.001791},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000917},"@typescript-eslint/no-misused-new":{"total":0.000875},"@typescript-eslint/no-namespace":{"total":0.001708},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000875},"@typescript-eslint/no-this-alias":{"total":0.001584},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.003333},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001},"@typescript-eslint/no-unsafe-function-type":{"total":0.000834},"@typescript-eslint/no-unused-expressions":{"total":0.005875},"@typescript-eslint/no-unused-vars":{"total":0.236375},"@typescript-eslint/no-wrapper-object-types":{"total":0.001041},"@typescript-eslint/prefer-as-const":{"total":0.00075},"@typescript-eslint/prefer-namespace-keyword":{"total":0.00075},"@typescript-eslint/triple-slash-reference":{"total":0.004207},"@typescript-eslint/no-non-null-assertion":{"total":0.00075},"@typescript-eslint/adjacent-overload-signatures":{"total":0.002208},"@typescript-eslint/no-empty-function":{"total":0.003167},"@typescript-eslint/no-inferrable-types":{"total":0.003041},"@typescript-eslint/no-empty-interface":{"total":0.001417},"@nx/enforce-module-boundaries":{"total":0.05441599999999999}},"fix":{"total":0},"total":1.532833}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/cli/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type string trivially inferred from a string literal, remove type annotation.","line":9,"column":3,"nodeType":"AssignmentPattern","messageId":"noInferrableType","endLine":9,"endColumn":60,"fix":{"range":[220,228],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type string trivially inferred from a string literal, remove type annotation.","line":41,"column":3,"nodeType":"AssignmentPattern","messageId":"noInferrableType","endLine":41,"endColumn":30,"fix":{"range":[1085,1093],"text":""}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import fs from 'fs';\nimport path from 'path';\nimport type { FileInfo } from '../lib/file-utils';\n\n/**\n * Find the newest trace file in a directory (CLI-specific logic)\n */\nexport function findNewestTraceFile(\n  directory: string = './packages/cpu-prof/mocks/fixtures/'\n): string {\n  try {\n    const files: FileInfo[] = fs\n      .readdirSync(directory)\n      .filter((file: string) => file.endsWith('.json'))\n      .map((file: string) => ({\n        name: file,\n        path: path.join(directory, file),\n        mtime: fs.statSync(path.join(directory, file)).mtime,\n      }))\n      .sort(\n        (a: FileInfo, b: FileInfo) => b.mtime.getTime() - a.mtime.getTime()\n      ); // Newest first\n\n    if (files.length === 0) {\n      throw new Error(`No .json files found in ${directory}`);\n    }\n\n    return files[0].path;\n  } catch (error) {\n    throw new Error(\n      `Error reading directory ${directory}: ${(error as Error).message}`\n    );\n  }\n}\n\n/**\n * Generate output filename with suffix (CLI naming convention)\n */\nexport function generateOutputFilename(\n  inputFile: string,\n  suffix: string = '.reduced'\n): string {\n  return inputFile.replace('.json', `${suffix}.json`);\n}\n\n/**\n * Helper function to coerce string array arguments from CLI input\n */\nexport function coerceStringArray(\n  arg: string[] | string | boolean\n): string[] | undefined {\n  if (arg === false || arg === undefined) {\n    return undefined;\n  }\n  if (typeof arg === 'string') {\n    return arg.split(',').map((item: string) => item.trim());\n  }\n  if (Array.isArray(arg)) {\n    return arg.flatMap((item: string) =>\n      item.split(',').map((s: string) => s.trim())\n    );\n  }\n  return undefined;\n}\n\n/**\n * Helper function to coerce number array arguments from CLI input\n */\nexport function coerceNumberArray(\n  arg: string[] | string | boolean,\n  type: 'PID' | 'TID'\n): number[] | undefined {\n  if (arg === false || arg === undefined) {\n    return undefined;\n  }\n  const values =\n    typeof arg === 'string'\n      ? arg.split(',')\n      : Array.isArray(arg)\n      ? arg.flatMap((item: string) => item.split(','))\n      : [];\n  return values.map((id: string) => {\n    const numId = parseInt(id.trim(), 10);\n    if (isNaN(numId)) {\n      throw new Error(`Invalid ${type}: ${id}. ${type}s must be numbers.`);\n    }\n    return numId;\n  });\n}\n\n/**\n * Helper function to coerce string array arguments with default values\n */\nexport function coerceStringArrayWithDefaults(\n  arg: string[] | string | boolean,\n  defaults: string[] = []\n): string[] {\n  // Handle yargs negation (--no-exclude-*)\n  if (arg === false || arg === undefined) {\n    return [];\n  }\n\n  if (typeof arg === 'string') {\n    const userValues = arg.split(',').map((item: string) => item.trim());\n    return [...new Set([...defaults, ...userValues])];\n  }\n  if (Array.isArray(arg)) {\n    const userValues = arg.flatMap((item: string) =>\n      item.split(',').map((s: string) => s.trim())\n    );\n    return [...new Set([...defaults, ...userValues])];\n  }\n  return defaults;\n}\n","stats":{"times":{"passes":[{"parse":{"total":2.519},"rules":{"for-direction":{"total":0.002709},"no-async-promise-executor":{"total":0.000375},"no-case-declarations":{"total":0.000292},"no-compare-neg-zero":{"total":0.004625},"no-cond-assign":{"total":0.0027500000000000007},"no-constant-binary-expression":{"total":0.05912400000000001},"no-constant-condition":{"total":0.010506000000000001},"no-control-regex":{"total":0.005543000000000001},"no-debugger":{"total":0.000375},"no-delete-var":{"total":0.000792},"no-dupe-else-if":{"total":0.006001},"no-duplicate-case":{"total":0.00025},"no-empty":{"total":0.0030840000000000012},"no-empty-character-class":{"total":0.00025},"no-empty-pattern":{"total":0.0005},"no-empty-static-block":{"total":0.000375},"no-ex-assign":{"total":0.002375},"no-extra-boolean-cast":{"total":0.006169999999999999},"no-fallthrough":{"total":0.029453000000000017},"no-global-assign":{"total":0.021333},"no-invalid-regexp":{"total":0.006250000000000001},"no-irregular-whitespace":{"total":0.020625},"no-loss-of-precision":{"total":0.019708000000000003},"no-misleading-character-class":{"total":0.011916},"no-nonoctal-decimal-escape":{"total":0.004834000000000001},"no-octal":{"total":0.003252000000000001},"no-prototype-builtins":{"total":0.009543000000000003},"no-regex-spaces":{"total":0.027749000000000017},"no-self-assign":{"total":0.000417},"no-shadow-restricted-names":{"total":0.03921000000000001},"no-sparse-arrays":{"total":0.0021279999999999997},"no-unsafe-finally":{"total":0.012251},"no-unsafe-optional-chaining":{"total":0.018172000000000008},"no-unused-labels":{"total":0.000459},"no-unused-private-class-members":{"total":0.000375},"no-useless-backreference":{"total":0.0032920000000000002},"no-useless-catch":{"total":0.000958},"no-useless-escape":{"total":0.021708000000000005},"require-yield":{"total":0.001957},"use-isnan":{"total":0.008165},"valid-typeof":{"total":0.0049570000000000005},"no-var":{"total":0.001126},"prefer-const":{"total":0.002124},"prefer-rest-params":{"total":0.0027089999999999996},"prefer-spread":{"total":0.008790000000000001},"@typescript-eslint/ban-ts-comment":{"total":0.021709},"@typescript-eslint/no-array-constructor":{"total":0.007208000000000002},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001167},"@typescript-eslint/no-empty-object-type":{"total":0.003166},"@typescript-eslint/no-explicit-any":{"total":0.002208},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000875},"@typescript-eslint/no-misused-new":{"total":0.000958},"@typescript-eslint/no-namespace":{"total":0.001833},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000958},"@typescript-eslint/no-this-alias":{"total":0.002292},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.006417},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001041},"@typescript-eslint/no-unsafe-function-type":{"total":0.002042},"@typescript-eslint/no-unused-expressions":{"total":0.008167},"@typescript-eslint/no-unused-vars":{"total":0.490625},"@typescript-eslint/no-wrapper-object-types":{"total":0.0024580000000000005},"@typescript-eslint/prefer-as-const":{"total":0.004292000000000001},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001167},"@typescript-eslint/triple-slash-reference":{"total":0.007542000000000001},"@typescript-eslint/no-non-null-assertion":{"total":0.001041},"@typescript-eslint/adjacent-overload-signatures":{"total":0.018958000000000006},"@typescript-eslint/no-empty-function":{"total":0.08641700000000002},"@typescript-eslint/no-inferrable-types":{"total":0.24541499999999997},"@typescript-eslint/no-empty-interface":{"total":0.00175},"@nx/enforce-module-boundaries":{"total":0.054207000000000005}},"fix":{"total":0},"total":5.652583}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/cli/utils.unit.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[439,442],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[439,442],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1378,1381],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1378,1381],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2875,2878],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2875,2878],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  coerceStringArray,\n  coerceNumberArray,\n  coerceStringArrayWithDefaults,\n  findNewestTraceFile,\n  generateOutputFilename,\n} from './utils';\n\ndescribe('CLI Utils', () => {\n  describe('coerceStringArray', () => {\n    it('should return undefined for false', () => {\n      expect(coerceStringArray(false)).toBeUndefined();\n    });\n\n    it('should return undefined for undefined', () => {\n      expect(coerceStringArray(undefined as any)).toBeUndefined();\n    });\n\n    it('should split string by comma and trim', () => {\n      expect(coerceStringArray('a,b,c')).toEqual(['a', 'b', 'c']);\n      expect(coerceStringArray('a, b , c ')).toEqual(['a', 'b', 'c']);\n    });\n\n    it('should handle single string', () => {\n      expect(coerceStringArray('single')).toEqual(['single']);\n    });\n\n    it('should handle array of strings', () => {\n      expect(coerceStringArray(['a,b', 'c,d'])).toEqual(['a', 'b', 'c', 'd']);\n    });\n\n    it('should trim items in arrays', () => {\n      expect(coerceStringArray(['a, b ', ' c,d '])).toEqual([\n        'a',\n        'b',\n        'c',\n        'd',\n      ]);\n    });\n  });\n\n  describe('coerceNumberArray', () => {\n    it('should return undefined for false', () => {\n      expect(coerceNumberArray(false, 'PID')).toBeUndefined();\n    });\n\n    it('should return undefined for undefined', () => {\n      expect(coerceNumberArray(undefined as any, 'PID')).toBeUndefined();\n    });\n\n    it('should parse comma-separated string numbers', () => {\n      expect(coerceNumberArray('1,2,3', 'PID')).toEqual([1, 2, 3]);\n      expect(coerceNumberArray('100, 200 , 300 ', 'TID')).toEqual([\n        100, 200, 300,\n      ]);\n    });\n\n    it('should handle single number string', () => {\n      expect(coerceNumberArray('42', 'PID')).toEqual([42]);\n    });\n\n    it('should handle array of number strings', () => {\n      expect(coerceNumberArray(['1,2', '3,4'], 'PID')).toEqual([1, 2, 3, 4]);\n    });\n\n    it('should throw error for invalid PID', () => {\n      expect(() => coerceNumberArray('invalid', 'PID')).toThrow(\n        'Invalid PID: invalid. PIDs must be numbers.'\n      );\n    });\n\n    it('should throw error for invalid TID', () => {\n      expect(() => coerceNumberArray('1,invalid,3', 'TID')).toThrow(\n        'Invalid TID: invalid. TIDs must be numbers.'\n      );\n    });\n\n    it('should handle mixed valid and invalid numbers', () => {\n      expect(() => coerceNumberArray(['1,2', 'invalid,4'], 'PID')).toThrow(\n        'Invalid PID: invalid. PIDs must be numbers.'\n      );\n    });\n  });\n\n  describe('coerceStringArrayWithDefaults', () => {\n    const defaults = ['default1', 'default2'];\n\n    it('should return empty array for false', () => {\n      expect(coerceStringArrayWithDefaults(false, defaults)).toEqual([]);\n    });\n\n    it('should return empty array for undefined', () => {\n      expect(coerceStringArrayWithDefaults(undefined as any, defaults)).toEqual(\n        []\n      );\n    });\n\n    it('should merge string input with defaults', () => {\n      const result = coerceStringArrayWithDefaults('user1,user2', defaults);\n      expect(result).toEqual(['default1', 'default2', 'user1', 'user2']);\n    });\n\n    it('should merge array input with defaults', () => {\n      const result = coerceStringArrayWithDefaults(\n        ['user1,user2', 'user3'],\n        defaults\n      );\n      expect(result).toEqual([\n        'default1',\n        'default2',\n        'user1',\n        'user2',\n        'user3',\n      ]);\n    });\n\n    it('should deduplicate values', () => {\n      const result = coerceStringArrayWithDefaults('default1,user1', defaults);\n      expect(result).toEqual(['default1', 'default2', 'user1']);\n    });\n\n    it('should return defaults when no defaults provided', () => {\n      expect(coerceStringArrayWithDefaults('user1,user2')).toEqual([\n        'user1',\n        'user2',\n      ]);\n    });\n\n    it('should handle empty defaults', () => {\n      expect(coerceStringArrayWithDefaults('user1,user2', [])).toEqual([\n        'user1',\n        'user2',\n      ]);\n    });\n  });\n\n  describe('findNewestTraceFile', () => {\n    // Note: These would be integration tests that require actual files\n    // For unit tests, we'd need to mock fs operations\n    it('should be defined', () => {\n      expect(findNewestTraceFile).toBeDefined();\n    });\n  });\n\n  describe('generateOutputFilename', () => {\n    it('should add suffix before .json extension', () => {\n      expect(generateOutputFilename('input.json', '.reduced')).toBe(\n        'input.reduced.json'\n      );\n    });\n\n    it('should use default suffix', () => {\n      expect(generateOutputFilename('input.json')).toBe('input.reduced.json');\n    });\n\n    it('should handle files without .json extension', () => {\n      expect(generateOutputFilename('input.txt', '.reduced')).toBe('input.txt');\n    });\n  });\n});\n","stats":{"times":{"passes":[{"parse":{"total":2.471709},"rules":{"for-direction":{"total":0.002542},"no-async-promise-executor":{"total":0.000333},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.001542},"no-cond-assign":{"total":0.001083},"no-constant-binary-expression":{"total":0.000375},"no-constant-condition":{"total":0.001208},"no-control-regex":{"total":0.03162700000000001},"no-debugger":{"total":0.000417},"no-delete-var":{"total":0.000375},"no-dupe-else-if":{"total":0.000542},"no-duplicate-case":{"total":0.000625},"no-empty":{"total":0.005292000000000003},"no-empty-character-class":{"total":0.000459},"no-empty-pattern":{"total":0.000666},"no-empty-static-block":{"total":0.000333},"no-ex-assign":{"total":0.00025},"no-extra-boolean-cast":{"total":0.01691700000000001},"no-fallthrough":{"total":0.027919000000000017},"no-global-assign":{"total":0.017333},"no-invalid-regexp":{"total":0.016999000000000014},"no-irregular-whitespace":{"total":0.015208000000000001},"no-loss-of-precision":{"total":0.04057900000000001},"no-misleading-character-class":{"total":0.009958},"no-nonoctal-decimal-escape":{"total":0.019800000000000016},"no-octal":{"total":0.01762500000000001},"no-prototype-builtins":{"total":0.02162800000000001},"no-regex-spaces":{"total":0.08587200000000006},"no-self-assign":{"total":0.0005},"no-shadow-restricted-names":{"total":0.017834000000000003},"no-sparse-arrays":{"total":0.006706},"no-unsafe-finally":{"total":0.00025},"no-unsafe-optional-chaining":{"total":0.02579000000000001},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000333},"no-useless-backreference":{"total":0.003042},"no-useless-catch":{"total":0.000292},"no-useless-escape":{"total":0.020382000000000015},"require-yield":{"total":0.000375},"use-isnan":{"total":0.000875},"valid-typeof":{"total":0.001584},"no-var":{"total":0.001124},"prefer-const":{"total":0.0022919999999999998},"prefer-rest-params":{"total":0.000375},"prefer-spread":{"total":0.039127000000000016},"@typescript-eslint/ban-ts-comment":{"total":0.011958},"@typescript-eslint/no-array-constructor":{"total":0.019246000000000006},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000958},"@typescript-eslint/no-empty-object-type":{"total":0.003041},"@typescript-eslint/no-explicit-any":{"total":0.044043},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001125},"@typescript-eslint/no-misused-new":{"total":0.000959},"@typescript-eslint/no-namespace":{"total":0.001959},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000875},"@typescript-eslint/no-this-alias":{"total":0.002167},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.00525},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001},"@typescript-eslint/no-unsafe-function-type":{"total":0.000917},"@typescript-eslint/no-unused-expressions":{"total":0.03425000000000002},"@typescript-eslint/no-unused-vars":{"total":0.423875},"@typescript-eslint/no-wrapper-object-types":{"total":0.001041},"@typescript-eslint/prefer-as-const":{"total":0.0026660000000000004},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000792},"@typescript-eslint/triple-slash-reference":{"total":0.006459},"@typescript-eslint/no-non-null-assertion":{"total":0.00075},"@typescript-eslint/adjacent-overload-signatures":{"total":0.02454300000000001},"@typescript-eslint/no-empty-function":{"total":0.1929149999999999},"@typescript-eslint/no-inferrable-types":{"total":0.015836000000000003},"@typescript-eslint/no-empty-interface":{"total":0.001667},"@nx/enforce-module-boundaries":{"total":0.030958}},"fix":{"total":0},"total":6.575708}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.13675},"rules":{"for-direction":{"total":0.0015},"no-async-promise-executor":{"total":0.00025},"no-case-declarations":{"total":0.000208},"no-compare-neg-zero":{"total":0.000667},"no-cond-assign":{"total":0.000667},"no-constant-binary-expression":{"total":0.000292},"no-constant-condition":{"total":0.000625},"no-control-regex":{"total":0.0010830000000000002},"no-debugger":{"total":0.000208},"no-delete-var":{"total":0.000208},"no-dupe-else-if":{"total":0.000333},"no-duplicate-case":{"total":0.000209},"no-empty":{"total":0.0005},"no-empty-character-class":{"total":0.000209},"no-empty-pattern":{"total":0.000375},"no-empty-static-block":{"total":0.000208},"no-ex-assign":{"total":0.000209},"no-extra-boolean-cast":{"total":0.000875},"no-fallthrough":{"total":0.0020410000000000003},"no-global-assign":{"total":0.016791},"no-invalid-regexp":{"total":0.000417},"no-irregular-whitespace":{"total":0.001251},"no-loss-of-precision":{"total":0.001333},"no-misleading-character-class":{"total":0.005458},"no-nonoctal-decimal-escape":{"total":0.001},"no-octal":{"total":0.000667},"no-prototype-builtins":{"total":0.000458},"no-regex-spaces":{"total":0.000834},"no-self-assign":{"total":0.000542},"no-shadow-restricted-names":{"total":0.000625},"no-sparse-arrays":{"total":0.000208},"no-unsafe-finally":{"total":0.00025},"no-unsafe-optional-chaining":{"total":0.000667},"no-unused-labels":{"total":0.000333},"no-unused-private-class-members":{"total":0.000333},"no-useless-backreference":{"total":0.0025840000000000004},"no-useless-catch":{"total":0.000208},"no-useless-escape":{"total":0.002},"require-yield":{"total":0.000334},"use-isnan":{"total":0.000833},"valid-typeof":{"total":0.001251},"no-var":{"total":0.00025},"prefer-const":{"total":0.000916},"prefer-rest-params":{"total":0.000291},"prefer-spread":{"total":0.000208},"@typescript-eslint/ban-ts-comment":{"total":0.0045000000000000005},"@typescript-eslint/no-array-constructor":{"total":0.001042},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000833},"@typescript-eslint/no-empty-object-type":{"total":0.002},"@typescript-eslint/no-explicit-any":{"total":0.001792},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000833},"@typescript-eslint/no-misused-new":{"total":0.000875},"@typescript-eslint/no-namespace":{"total":0.001542},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000791},"@typescript-eslint/no-this-alias":{"total":0.001542},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.002792},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.000917},"@typescript-eslint/no-unsafe-function-type":{"total":0.000916},"@typescript-eslint/no-unused-expressions":{"total":0.005625},"@typescript-eslint/no-unused-vars":{"total":0.221083},"@typescript-eslint/no-wrapper-object-types":{"total":0.000959},"@typescript-eslint/prefer-as-const":{"total":0.00075},"@typescript-eslint/prefer-namespace-keyword":{"total":0.00075},"@typescript-eslint/triple-slash-reference":{"total":0.0038339999999999997},"@typescript-eslint/no-non-null-assertion":{"total":0.00075},"@typescript-eslint/adjacent-overload-signatures":{"total":0.002541},"@typescript-eslint/no-empty-function":{"total":0.003083},"@typescript-eslint/no-inferrable-types":{"total":0.003042},"@typescript-eslint/no-empty-interface":{"total":0.001417},"@nx/enforce-module-boundaries":{"total":0.031000000000000003}},"fix":{"total":0},"total":1.332584}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/lib/__snapshots__/merge-cpu-profile-files-merged-profile.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":1.4635},"rules":{"@nx/dependency-checks":{"total":0.021209}},"fix":{"total":0},"total":2.444708}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/lib/cpu/cpuprofile.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.687291},"rules":{"for-direction":{"total":0.002541},"no-async-promise-executor":{"total":0.000291},"no-case-declarations":{"total":0.000292},"no-compare-neg-zero":{"total":0.001},"no-cond-assign":{"total":0.001042},"no-constant-binary-expression":{"total":0.000459},"no-constant-condition":{"total":0.001208},"no-control-regex":{"total":0.000334},"no-debugger":{"total":0.000334},"no-delete-var":{"total":0.000166},"no-dupe-else-if":{"total":0.000375},"no-duplicate-case":{"total":0.00025},"no-empty":{"total":0.000458},"no-empty-character-class":{"total":0.000167},"no-empty-pattern":{"total":0.000375},"no-empty-static-block":{"total":0.000333},"no-ex-assign":{"total":0.00025},"no-extra-boolean-cast":{"total":0.000958},"no-fallthrough":{"total":0.0022909999999999996},"no-global-assign":{"total":0.018084},"no-invalid-regexp":{"total":0.000667},"no-irregular-whitespace":{"total":0.004167},"no-loss-of-precision":{"total":0.000375},"no-misleading-character-class":{"total":0.007959},"no-nonoctal-decimal-escape":{"total":0.000291},"no-octal":{"total":0.000208},"no-prototype-builtins":{"total":0.000583},"no-regex-spaces":{"total":0.000334},"no-self-assign":{"total":0.000417},"no-shadow-restricted-names":{"total":0.00075},"no-sparse-arrays":{"total":0.000292},"no-unsafe-finally":{"total":0.000292},"no-unsafe-optional-chaining":{"total":0.000792},"no-unused-labels":{"total":0.000333},"no-unused-private-class-members":{"total":0.000292},"no-useless-backreference":{"total":0.0025840000000000004},"no-useless-catch":{"total":0.000209},"no-useless-escape":{"total":0.000958},"require-yield":{"total":0.000292},"use-isnan":{"total":0.000833},"valid-typeof":{"total":0.001292},"no-var":{"total":0.00025},"prefer-const":{"total":0.001124},"prefer-rest-params":{"total":0.000375},"prefer-spread":{"total":0.000292},"@typescript-eslint/ban-ts-comment":{"total":0.015},"@typescript-eslint/no-array-constructor":{"total":0.001417},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000917},"@typescript-eslint/no-empty-object-type":{"total":0.003832},"@typescript-eslint/no-explicit-any":{"total":0.002125},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000917},"@typescript-eslint/no-misused-new":{"total":0.000834},"@typescript-eslint/no-namespace":{"total":0.001709},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000916},"@typescript-eslint/no-this-alias":{"total":0.001709},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.004917},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.009876000000000001},"@typescript-eslint/no-unsafe-function-type":{"total":0.0017920000000000004},"@typescript-eslint/no-unused-expressions":{"total":0.007125},"@typescript-eslint/no-unused-vars":{"total":0.261667},"@typescript-eslint/no-wrapper-object-types":{"total":0.002334},"@typescript-eslint/prefer-as-const":{"total":0.000875},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000917},"@typescript-eslint/triple-slash-reference":{"total":0.005499},"@typescript-eslint/no-non-null-assertion":{"total":0.000708},"@typescript-eslint/adjacent-overload-signatures":{"total":0.009749},"@typescript-eslint/no-empty-function":{"total":0.003417},"@typescript-eslint/no-inferrable-types":{"total":0.003417},"@typescript-eslint/no-empty-interface":{"total":0.0023740000000000002},"@nx/enforce-module-boundaries":{"total":0.013584}},"fix":{"total":0},"total":2.219708}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/lib/cpu/load-cpu-profiles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":1.127708},"rules":{"for-direction":{"total":0.001542},"no-async-promise-executor":{"total":0.000292},"no-case-declarations":{"total":0.000208},"no-compare-neg-zero":{"total":0.00075},"no-cond-assign":{"total":0.001291},"no-constant-binary-expression":{"total":0.0011250000000000001},"no-constant-condition":{"total":0.003334},"no-control-regex":{"total":0.002333},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.000626},"no-dupe-else-if":{"total":0.002416},"no-duplicate-case":{"total":0.000292},"no-empty":{"total":0.001333},"no-empty-character-class":{"total":0.000208},"no-empty-pattern":{"total":0.000375},"no-empty-static-block":{"total":0.00025},"no-ex-assign":{"total":0.00025},"no-extra-boolean-cast":{"total":0.004252000000000001},"no-fallthrough":{"total":0.00854},"no-global-assign":{"total":0.044375},"no-invalid-regexp":{"total":0.0026670000000000005},"no-irregular-whitespace":{"total":0.002958},"no-loss-of-precision":{"total":0.0021670000000000005},"no-misleading-character-class":{"total":0.010374},"no-nonoctal-decimal-escape":{"total":0.002333},"no-octal":{"total":0.001248},"no-prototype-builtins":{"total":0.004417000000000001},"no-regex-spaces":{"total":0.011750000000000002},"no-self-assign":{"total":0.000458},"no-shadow-restricted-names":{"total":0.0064589999999999995},"no-sparse-arrays":{"total":0.000209},"no-unsafe-finally":{"total":0.00404},"no-unsafe-optional-chaining":{"total":0.005919000000000001},"no-unused-labels":{"total":0.000333},"no-unused-private-class-members":{"total":0.000292},"no-useless-backreference":{"total":0.0029170000000000003},"no-useless-catch":{"total":0.000167},"no-useless-escape":{"total":0.007330000000000001},"require-yield":{"total":0.000876},"use-isnan":{"total":0.000917},"valid-typeof":{"total":0.0017919999999999998},"no-var":{"total":0.0011679999999999998},"prefer-const":{"total":0.001834},"prefer-rest-params":{"total":0.001292},"prefer-spread":{"total":0.0038339999999999997},"@typescript-eslint/ban-ts-comment":{"total":0.011625},"@typescript-eslint/no-array-constructor":{"total":0.0033320000000000003},"@typescript-eslint/no-duplicate-enum-values":{"total":0.00075},"@typescript-eslint/no-empty-object-type":{"total":0.002167},"@typescript-eslint/no-explicit-any":{"total":0.001667},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000875},"@typescript-eslint/no-misused-new":{"total":0.000792},"@typescript-eslint/no-namespace":{"total":0.001791},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001},"@typescript-eslint/no-this-alias":{"total":0.001708},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.003125},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001},"@typescript-eslint/no-unsafe-function-type":{"total":0.0027920000000000006},"@typescript-eslint/no-unused-expressions":{"total":0.005792},"@typescript-eslint/no-unused-vars":{"total":0.356125},"@typescript-eslint/no-wrapper-object-types":{"total":0.0030819999999999997},"@typescript-eslint/prefer-as-const":{"total":0.003415},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000792},"@typescript-eslint/triple-slash-reference":{"total":0.019375},"@typescript-eslint/no-non-null-assertion":{"total":0.000708},"@typescript-eslint/adjacent-overload-signatures":{"total":0.01025},"@typescript-eslint/no-empty-function":{"total":1.610709},"@typescript-eslint/no-inferrable-types":{"total":0.020002000000000002},"@typescript-eslint/no-empty-interface":{"total":0.002334},"@nx/enforce-module-boundaries":{"total":0.067915}},"fix":{"total":0},"total":4.515958}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/lib/cpu/load-cpu-profiles.unit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.700916},"rules":{"for-direction":{"total":0.00175},"no-async-promise-executor":{"total":0.000292},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.000834},"no-cond-assign":{"total":0.000792},"no-constant-binary-expression":{"total":0.000291},"no-constant-condition":{"total":0.001208},"no-control-regex":{"total":0.0026230000000000008},"no-debugger":{"total":0.000292},"no-delete-var":{"total":0.000333},"no-dupe-else-if":{"total":0.000459},"no-duplicate-case":{"total":0.000333},"no-empty":{"total":0.001375},"no-empty-character-class":{"total":0.000208},"no-empty-pattern":{"total":0.0005},"no-empty-static-block":{"total":0.00025},"no-ex-assign":{"total":0.000208},"no-extra-boolean-cast":{"total":0.0027920000000000006},"no-fallthrough":{"total":0.004542},"no-global-assign":{"total":0.017584000000000002},"no-invalid-regexp":{"total":0.002332},"no-irregular-whitespace":{"total":0.003333},"no-loss-of-precision":{"total":0.013543},"no-misleading-character-class":{"total":0.008584},"no-nonoctal-decimal-escape":{"total":0.0033740000000000003},"no-octal":{"total":0.0024180000000000004},"no-prototype-builtins":{"total":0.003623},"no-regex-spaces":{"total":0.009080999999999999},"no-self-assign":{"total":0.000458},"no-shadow-restricted-names":{"total":0.0036249999999999998},"no-sparse-arrays":{"total":0.000708},"no-unsafe-finally":{"total":0.00025},"no-unsafe-optional-chaining":{"total":0.004542000000000002},"no-unused-labels":{"total":0.000333},"no-unused-private-class-members":{"total":0.000292},"no-useless-backreference":{"total":0.002709},"no-useless-catch":{"total":0.000209},"no-useless-escape":{"total":0.007914},"require-yield":{"total":0.000459},"use-isnan":{"total":0.000959},"valid-typeof":{"total":0.001417},"no-var":{"total":0.001},"prefer-const":{"total":0.0019170000000000003},"prefer-rest-params":{"total":0.000417},"prefer-spread":{"total":0.0023340000000000006},"@typescript-eslint/ban-ts-comment":{"total":0.006916},"@typescript-eslint/no-array-constructor":{"total":0.0027070000000000006},"@typescript-eslint/no-duplicate-enum-values":{"total":0.002083},"@typescript-eslint/no-empty-object-type":{"total":0.002208},"@typescript-eslint/no-explicit-any":{"total":0.001958},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000875},"@typescript-eslint/no-misused-new":{"total":0.000875},"@typescript-eslint/no-namespace":{"total":0.001792},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000958},"@typescript-eslint/no-this-alias":{"total":0.001833},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.003791},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001},"@typescript-eslint/no-unsafe-function-type":{"total":0.001459},"@typescript-eslint/no-unused-expressions":{"total":0.009875000000000002},"@typescript-eslint/no-unused-vars":{"total":1.424209},"@typescript-eslint/no-wrapper-object-types":{"total":0.001875},"@typescript-eslint/prefer-as-const":{"total":0.0024990000000000004},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000792},"@typescript-eslint/triple-slash-reference":{"total":0.005541000000000001},"@typescript-eslint/no-non-null-assertion":{"total":0.000833},"@typescript-eslint/adjacent-overload-signatures":{"total":0.004834},"@typescript-eslint/no-empty-function":{"total":0.014251},"@typescript-eslint/no-inferrable-types":{"total":0.005000999999999999},"@typescript-eslint/no-empty-interface":{"total":0.0015},"@nx/enforce-module-boundaries":{"total":0.270542}},"fix":{"total":0},"total":3.69825}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/lib/cpu/profile-selection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.473458},"rules":{"for-direction":{"total":0.001959},"no-async-promise-executor":{"total":0.000292},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.002208},"no-cond-assign":{"total":0.0015829999999999998},"no-constant-binary-expression":{"total":0.005041},"no-constant-condition":{"total":0.004666},"no-control-regex":{"total":0.000959},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.000208},"no-dupe-else-if":{"total":0.0037920000000000002},"no-duplicate-case":{"total":0.000208},"no-empty":{"total":0.0012500000000000002},"no-empty-character-class":{"total":0.000166},"no-empty-pattern":{"total":0.0005},"no-empty-static-block":{"total":0.000375},"no-ex-assign":{"total":0.000208},"no-extra-boolean-cast":{"total":0.001375},"no-fallthrough":{"total":0.0072949999999999985},"no-global-assign":{"total":0.017375},"no-invalid-regexp":{"total":0.0010840000000000001},"no-irregular-whitespace":{"total":0.003667},"no-loss-of-precision":{"total":0.0010409999999999998},"no-misleading-character-class":{"total":0.007709000000000001},"no-nonoctal-decimal-escape":{"total":0.001001},"no-octal":{"total":0.0008330000000000001},"no-prototype-builtins":{"total":0.0012079999999999999},"no-regex-spaces":{"total":0.002418},"no-self-assign":{"total":0.000458},"no-shadow-restricted-names":{"total":0.0018759999999999998},"no-sparse-arrays":{"total":0.000292},"no-unsafe-finally":{"total":0.004374},"no-unsafe-optional-chaining":{"total":0.0033350000000000007},"no-unused-labels":{"total":0.000417},"no-unused-private-class-members":{"total":0.000334},"no-useless-backreference":{"total":0.0026249999999999997},"no-useless-catch":{"total":0.000209},"no-useless-escape":{"total":0.002375},"require-yield":{"total":0.000875},"use-isnan":{"total":0.004208},"valid-typeof":{"total":0.0013319999999999999},"no-var":{"total":0.00025},"prefer-const":{"total":0.001},"prefer-rest-params":{"total":0.001333},"prefer-spread":{"total":0.0007509999999999999},"@typescript-eslint/ban-ts-comment":{"total":0.006792},"@typescript-eslint/no-array-constructor":{"total":0.0015010000000000002},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000833},"@typescript-eslint/no-empty-object-type":{"total":0.002292},"@typescript-eslint/no-explicit-any":{"total":0.002084},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000875},"@typescript-eslint/no-misused-new":{"total":0.000958},"@typescript-eslint/no-namespace":{"total":0.001791},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000792},"@typescript-eslint/no-this-alias":{"total":0.002},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.003458},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.000958},"@typescript-eslint/no-unsafe-function-type":{"total":0.001418},"@typescript-eslint/no-unused-expressions":{"total":0.006583},"@typescript-eslint/no-unused-vars":{"total":0.253209},"@typescript-eslint/no-wrapper-object-types":{"total":0.001624},"@typescript-eslint/prefer-as-const":{"total":0.00075},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000791},"@typescript-eslint/triple-slash-reference":{"total":0.0048330000000000005},"@typescript-eslint/no-non-null-assertion":{"total":0.000791},"@typescript-eslint/adjacent-overload-signatures":{"total":0.006209},"@typescript-eslint/no-empty-function":{"total":0.01125},"@typescript-eslint/no-inferrable-types":{"total":0.009875000000000002},"@typescript-eslint/no-empty-interface":{"total":0.001458},"@nx/enforce-module-boundaries":{"total":0.027833}},"fix":{"total":0},"total":1.90375}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/lib/cpu/profile-selection.unit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":1.356334},"rules":{"for-direction":{"total":0.00175},"no-async-promise-executor":{"total":0.00025},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.000833},"no-cond-assign":{"total":0.00075},"no-constant-binary-expression":{"total":0.000291},"no-constant-condition":{"total":0.000834},"no-control-regex":{"total":0.008166000000000003},"no-debugger":{"total":0.000209},"no-delete-var":{"total":0.0009170000000000001},"no-dupe-else-if":{"total":0.000334},"no-duplicate-case":{"total":0.000208},"no-empty":{"total":0.001375},"no-empty-character-class":{"total":0.000208},"no-empty-pattern":{"total":0.000459},"no-empty-static-block":{"total":0.00025},"no-ex-assign":{"total":0.00025},"no-extra-boolean-cast":{"total":0.005792},"no-fallthrough":{"total":0.008413},"no-global-assign":{"total":0.018416},"no-invalid-regexp":{"total":0.004623},"no-irregular-whitespace":{"total":0.0060420000000000005},"no-loss-of-precision":{"total":0.10179100000000002},"no-misleading-character-class":{"total":0.007042},"no-nonoctal-decimal-escape":{"total":0.009539000000000004},"no-octal":{"total":0.007662000000000003},"no-prototype-builtins":{"total":0.005166000000000002},"no-regex-spaces":{"total":0.021667000000000013},"no-self-assign":{"total":0.002375},"no-shadow-restricted-names":{"total":0.005915000000000001},"no-sparse-arrays":{"total":0.002789},"no-unsafe-finally":{"total":0.000292},"no-unsafe-optional-chaining":{"total":0.007707000000000001},"no-unused-labels":{"total":0.000333},"no-unused-private-class-members":{"total":0.000333},"no-useless-backreference":{"total":0.002834},"no-useless-catch":{"total":0.000208},"no-useless-escape":{"total":0.012377000000000004},"require-yield":{"total":0.0005},"use-isnan":{"total":0.000917},"valid-typeof":{"total":0.0022500000000000003},"no-var":{"total":0.001751},"prefer-const":{"total":0.002292},"prefer-rest-params":{"total":0.000375},"prefer-spread":{"total":0.004041000000000001},"@typescript-eslint/ban-ts-comment":{"total":0.011498999999999999},"@typescript-eslint/no-array-constructor":{"total":0.004332000000000001},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000917},"@typescript-eslint/no-empty-object-type":{"total":0.002167},"@typescript-eslint/no-explicit-any":{"total":0.001791},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000833},"@typescript-eslint/no-misused-new":{"total":0.001083},"@typescript-eslint/no-namespace":{"total":0.001875},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000917},"@typescript-eslint/no-this-alias":{"total":0.001708},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.003583},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001},"@typescript-eslint/no-unsafe-function-type":{"total":0.001208},"@typescript-eslint/no-unused-expressions":{"total":0.011542000000000002},"@typescript-eslint/no-unused-vars":{"total":0.383791},"@typescript-eslint/no-wrapper-object-types":{"total":0.001666},"@typescript-eslint/prefer-as-const":{"total":0.0025830000000000007},"@typescript-eslint/prefer-namespace-keyword":{"total":0.00075},"@typescript-eslint/triple-slash-reference":{"total":0.005208},"@typescript-eslint/no-non-null-assertion":{"total":0.000791},"@typescript-eslint/adjacent-overload-signatures":{"total":0.006792},"@typescript-eslint/no-empty-function":{"total":0.029374},"@typescript-eslint/no-inferrable-types":{"total":0.008960000000000001},"@typescript-eslint/no-empty-interface":{"total":0.0015},"@nx/enforce-module-boundaries":{"total":0.037375}},"fix":{"total":0},"total":3.454166}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/lib/cpu/run-with-cpu-prof.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":2.7355},"rules":{"for-direction":{"total":0.002625},"no-async-promise-executor":{"total":0.000333},"no-case-declarations":{"total":0.000333},"no-compare-neg-zero":{"total":0.001084},"no-cond-assign":{"total":0.001125},"no-constant-binary-expression":{"total":0.000333},"no-constant-condition":{"total":0.001167},"no-control-regex":{"total":0.010588000000000004},"no-debugger":{"total":0.000459},"no-delete-var":{"total":0.000333},"no-dupe-else-if":{"total":0.000416},"no-duplicate-case":{"total":0.000417},"no-empty":{"total":0.0022930000000000008},"no-empty-character-class":{"total":0.00025},"no-empty-pattern":{"total":0.000541},"no-empty-static-block":{"total":0.000292},"no-ex-assign":{"total":0.0005},"no-extra-boolean-cast":{"total":0.016081},"no-fallthrough":{"total":0.033204000000000004},"no-global-assign":{"total":0.018875},"no-invalid-regexp":{"total":0.010163000000000005},"no-irregular-whitespace":{"total":0.008},"no-loss-of-precision":{"total":0.023705000000000004},"no-misleading-character-class":{"total":0.008875},"no-nonoctal-decimal-escape":{"total":0.014337},"no-octal":{"total":0.008329999999999999},"no-prototype-builtins":{"total":0.013793000000000003},"no-regex-spaces":{"total":0.05616300000000003},"no-self-assign":{"total":0.091167},"no-shadow-restricted-names":{"total":0.009459},"no-sparse-arrays":{"total":0.001959},"no-unsafe-finally":{"total":0.000292},"no-unsafe-optional-chaining":{"total":0.021585000000000007},"no-unused-labels":{"total":0.0005},"no-unused-private-class-members":{"total":0.000333},"no-useless-backreference":{"total":0.002875},"no-useless-catch":{"total":0.000208},"no-useless-escape":{"total":0.016796000000000012},"require-yield":{"total":0.000375},"use-isnan":{"total":0.000959},"valid-typeof":{"total":0.0013750000000000001},"no-var":{"total":0.0018310000000000002},"prefer-const":{"total":0.012749},"prefer-rest-params":{"total":0.000375},"prefer-spread":{"total":0.019798000000000003},"@typescript-eslint/ban-ts-comment":{"total":0.008},"@typescript-eslint/no-array-constructor":{"total":0.014952000000000003},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000958},"@typescript-eslint/no-empty-object-type":{"total":0.003416},"@typescript-eslint/no-explicit-any":{"total":0.002208},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000875},"@typescript-eslint/no-misused-new":{"total":0.001},"@typescript-eslint/no-namespace":{"total":0.002},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001},"@typescript-eslint/no-this-alias":{"total":0.0025},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.00475},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001084},"@typescript-eslint/no-unsafe-function-type":{"total":0.006958},"@typescript-eslint/no-unused-expressions":{"total":0.02725000000000001},"@typescript-eslint/no-unused-vars":{"total":0.486958},"@typescript-eslint/no-wrapper-object-types":{"total":0.002542},"@typescript-eslint/prefer-as-const":{"total":0.002585000000000001},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000791},"@typescript-eslint/triple-slash-reference":{"total":0.006749000000000001},"@typescript-eslint/no-non-null-assertion":{"total":0.000792},"@typescript-eslint/adjacent-overload-signatures":{"total":0.033961000000000005},"@typescript-eslint/no-empty-function":{"total":0.07733600000000002},"@typescript-eslint/no-inferrable-types":{"total":0.009123000000000003},"@typescript-eslint/no-empty-interface":{"total":0.001458},"@nx/enforce-module-boundaries":{"total":0.43249899999999997}},"fix":{"total":0},"total":5.988916}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/lib/cpu/run-with-cpu-prof.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":4.580792},"rules":{"for-direction":{"total":0.002},"no-async-promise-executor":{"total":0.000291},"no-case-declarations":{"total":0.000208},"no-compare-neg-zero":{"total":0.003291},"no-cond-assign":{"total":0.004706},"no-constant-binary-expression":{"total":0.007125000000000001},"no-constant-condition":{"total":0.018749000000000005},"no-control-regex":{"total":0.011751000000000004},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.0012500000000000002},"no-dupe-else-if":{"total":0.005916000000000001},"no-duplicate-case":{"total":0.00025},"no-empty":{"total":0.004084},"no-empty-character-class":{"total":0.000333},"no-empty-pattern":{"total":0.0020410000000000003},"no-empty-static-block":{"total":0.000209},"no-ex-assign":{"total":0.003166},"no-extra-boolean-cast":{"total":0.009295000000000001},"no-fallthrough":{"total":0.03241200000000002},"no-global-assign":{"total":0.017708},"no-invalid-regexp":{"total":0.0074610000000000015},"no-irregular-whitespace":{"total":0.009334},"no-loss-of-precision":{"total":0.010122000000000003},"no-misleading-character-class":{"total":0.008459000000000001},"no-nonoctal-decimal-escape":{"total":0.006998999999999999},"no-octal":{"total":0.0041670000000000006},"no-prototype-builtins":{"total":0.015285000000000002},"no-regex-spaces":{"total":0.031041000000000016},"no-self-assign":{"total":0.000542},"no-shadow-restricted-names":{"total":0.014375000000000004},"no-sparse-arrays":{"total":0.0023749999999999995},"no-unsafe-finally":{"total":0.010043999999999999},"no-unsafe-optional-chaining":{"total":0.018497000000000006},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000334},"no-useless-backreference":{"total":0.002541},"no-useless-catch":{"total":0.00075},"no-useless-escape":{"total":0.02520400000000001},"require-yield":{"total":0.001583},"use-isnan":{"total":0.005666999999999999},"valid-typeof":{"total":0.005998},"no-var":{"total":0.006875000000000001},"prefer-const":{"total":0.0030410000000000007},"prefer-rest-params":{"total":0.0024159999999999997},"prefer-spread":{"total":0.011334000000000004},"@typescript-eslint/ban-ts-comment":{"total":0.014},"@typescript-eslint/no-array-constructor":{"total":0.007290000000000003},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000916},"@typescript-eslint/no-empty-object-type":{"total":0.051791000000000004},"@typescript-eslint/no-explicit-any":{"total":0.002},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000791},"@typescript-eslint/no-misused-new":{"total":0.000958},"@typescript-eslint/no-namespace":{"total":0.001667},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000834},"@typescript-eslint/no-this-alias":{"total":0.00225},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.03962500000000001},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.000959},"@typescript-eslint/no-unsafe-function-type":{"total":0.008707},"@typescript-eslint/no-unused-expressions":{"total":0.014416000000000002},"@typescript-eslint/no-unused-vars":{"total":0.872834},"@typescript-eslint/no-wrapper-object-types":{"total":0.004871999999999999},"@typescript-eslint/prefer-as-const":{"total":0.0037100000000000006},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000708},"@typescript-eslint/triple-slash-reference":{"total":0.008291999999999999},"@typescript-eslint/no-non-null-assertion":{"total":0.000834},"@typescript-eslint/adjacent-overload-signatures":{"total":0.023251000000000004},"@typescript-eslint/no-empty-function":{"total":0.04692},"@typescript-eslint/no-inferrable-types":{"total":0.014709000000000003},"@typescript-eslint/no-empty-interface":{"total":0.001916},"@nx/enforce-module-boundaries":{"total":0.4770820000000001}},"fix":{"total":0},"total":8.523875}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/lib/cpu/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":3.238834},"rules":{"for-direction":{"total":0.003209},"no-async-promise-executor":{"total":0.000333},"no-case-declarations":{"total":0.000334},"no-compare-neg-zero":{"total":0.002166},"no-cond-assign":{"total":0.001793},"no-constant-binary-expression":{"total":0.005667},"no-constant-condition":{"total":0.006542},"no-control-regex":{"total":0.7561690000000008},"no-debugger":{"total":0.000333},"no-delete-var":{"total":0.0014590000000000002},"no-dupe-else-if":{"total":0.002208},"no-duplicate-case":{"total":0.000416},"no-empty":{"total":0.0018320000000000003},"no-empty-character-class":{"total":0.002126},"no-empty-pattern":{"total":0.001167},"no-empty-static-block":{"total":0.00025},"no-ex-assign":{"total":0.000375},"no-extra-boolean-cast":{"total":0.007541000000000001},"no-fallthrough":{"total":0.01950300000000001},"no-global-assign":{"total":0.021458},"no-invalid-regexp":{"total":0.006666},"no-irregular-whitespace":{"total":0.009167},"no-loss-of-precision":{"total":0.032833000000000015},"no-misleading-character-class":{"total":1.065},"no-nonoctal-decimal-escape":{"total":0.0068790000000000006},"no-octal":{"total":0.005498000000000002},"no-prototype-builtins":{"total":0.011041000000000002},"no-regex-spaces":{"total":0.03846100000000001},"no-self-assign":{"total":0.000583},"no-shadow-restricted-names":{"total":0.010332000000000004},"no-sparse-arrays":{"total":0.000333},"no-unsafe-finally":{"total":0.005376},"no-unsafe-optional-chaining":{"total":0.026039000000000007},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000334},"no-useless-backreference":{"total":0.1915},"no-useless-catch":{"total":0.00025},"no-useless-escape":{"total":0.4187899999999996},"require-yield":{"total":0.002},"use-isnan":{"total":0.002292},"valid-typeof":{"total":0.003582},"no-var":{"total":0.003750000000000001},"prefer-const":{"total":0.004836000000000002},"prefer-rest-params":{"total":0.003249},"prefer-spread":{"total":0.0056630000000000005},"@typescript-eslint/ban-ts-comment":{"total":0.02225},"@typescript-eslint/no-array-constructor":{"total":0.008712000000000001},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000958},"@typescript-eslint/no-empty-object-type":{"total":0.0034170000000000003},"@typescript-eslint/no-explicit-any":{"total":0.002459},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000917},"@typescript-eslint/no-misused-new":{"total":0.001042},"@typescript-eslint/no-namespace":{"total":0.001792},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001},"@typescript-eslint/no-this-alias":{"total":0.002125},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.004875},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001041},"@typescript-eslint/no-unsafe-function-type":{"total":0.0036650000000000003},"@typescript-eslint/no-unused-expressions":{"total":0.00975},"@typescript-eslint/no-unused-vars":{"total":0.570542},"@typescript-eslint/no-wrapper-object-types":{"total":0.004707},"@typescript-eslint/prefer-as-const":{"total":0.004084000000000002},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000708},"@typescript-eslint/triple-slash-reference":{"total":0.006668},"@typescript-eslint/no-non-null-assertion":{"total":0.000833},"@typescript-eslint/adjacent-overload-signatures":{"total":0.014081999999999999},"@typescript-eslint/no-empty-function":{"total":0.07487700000000001},"@typescript-eslint/no-inferrable-types":{"total":0.011250000000000003},"@typescript-eslint/no-empty-interface":{"total":0.001583},"@nx/enforce-module-boundaries":{"total":0.018168000000000004}},"fix":{"total":0},"total":8.372666}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/lib/cpu/utils.unit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":1.728459},"rules":{"for-direction":{"total":0.002291},"no-async-promise-executor":{"total":0.000292},"no-case-declarations":{"total":0.000334},"no-compare-neg-zero":{"total":0.000917},"no-cond-assign":{"total":0.001042},"no-constant-binary-expression":{"total":0.000333},"no-constant-condition":{"total":0.001083},"no-control-regex":{"total":0.01033},"no-debugger":{"total":0.0005},"no-delete-var":{"total":0.000291},"no-dupe-else-if":{"total":0.000375},"no-duplicate-case":{"total":0.000292},"no-empty":{"total":0.002917000000000001},"no-empty-character-class":{"total":0.000292},"no-empty-pattern":{"total":0.000583},"no-empty-static-block":{"total":0.000334},"no-ex-assign":{"total":0.000375},"no-extra-boolean-cast":{"total":0.012748000000000006},"no-fallthrough":{"total":0.016044000000000006},"no-global-assign":{"total":0.018167000000000003},"no-invalid-regexp":{"total":0.012832000000000007},"no-irregular-whitespace":{"total":0.006917},"no-loss-of-precision":{"total":0.05600200000000003},"no-misleading-character-class":{"total":0.009332},"no-nonoctal-decimal-escape":{"total":0.011872000000000004},"no-octal":{"total":0.009167000000000003},"no-prototype-builtins":{"total":0.015542000000000004},"no-regex-spaces":{"total":0.05008300000000003},"no-self-assign":{"total":0.000458},"no-shadow-restricted-names":{"total":0.006253999999999997},"no-sparse-arrays":{"total":0.000333},"no-unsafe-finally":{"total":0.000375},"no-unsafe-optional-chaining":{"total":0.02045400000000001},"no-unused-labels":{"total":0.000417},"no-unused-private-class-members":{"total":0.000375},"no-useless-backreference":{"total":0.002875},"no-useless-catch":{"total":0.00025},"no-useless-escape":{"total":0.015712000000000007},"require-yield":{"total":0.000375},"use-isnan":{"total":0.001},"valid-typeof":{"total":0.0015},"no-var":{"total":0.001167},"prefer-const":{"total":0.002249},"prefer-rest-params":{"total":0.000417},"prefer-spread":{"total":0.015958000000000007},"@typescript-eslint/ban-ts-comment":{"total":0.023417},"@typescript-eslint/no-array-constructor":{"total":0.011295000000000005},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001042},"@typescript-eslint/no-empty-object-type":{"total":0.002833},"@typescript-eslint/no-explicit-any":{"total":0.002333},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000875},"@typescript-eslint/no-misused-new":{"total":0.001041},"@typescript-eslint/no-namespace":{"total":0.002125},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000958},"@typescript-eslint/no-this-alias":{"total":0.002625},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.005458},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001833},"@typescript-eslint/no-unsafe-function-type":{"total":0.001125},"@typescript-eslint/no-unused-expressions":{"total":0.025377000000000014},"@typescript-eslint/no-unused-vars":{"total":1.5007089999999998},"@typescript-eslint/no-wrapper-object-types":{"total":0.001208},"@typescript-eslint/prefer-as-const":{"total":0.001875},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000875},"@typescript-eslint/triple-slash-reference":{"total":0.007417},"@typescript-eslint/no-non-null-assertion":{"total":0.000833},"@typescript-eslint/adjacent-overload-signatures":{"total":0.011999000000000003},"@typescript-eslint/no-empty-function":{"total":0.05033400000000001},"@typescript-eslint/no-inferrable-types":{"total":0.008087999999999994},"@typescript-eslint/no-empty-interface":{"total":0.001792},"@nx/enforce-module-boundaries":{"total":0.04}},"fix":{"total":0},"total":5.39775}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/lib/execute-process.ts","messages":[{"ruleId":"functional/no-let","message":"Definition for rule 'functional/no-let' was not found.","line":158,"column":5,"endLine":158,"endColumn":50,"severity":2,"nodeType":null},{"ruleId":"functional/no-let","message":"Definition for rule 'functional/no-let' was not found.","line":160,"column":5,"endLine":160,"endColumn":50,"severity":2,"nodeType":null}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  type ChildProcess,\n  type ChildProcessByStdio,\n  type SpawnOptionsWithStdioTuple,\n  type StdioPipe,\n  spawn,\n} from 'node:child_process';\nimport type { Readable, Writable } from 'node:stream';\n\n/**\n * Represents the process result.\n * @category Types\n * @public\n * @property {string} stdout - The stdout of the process.\n * @property {string} stderr - The stderr of the process.\n * @property {number | null} code - The exit code of the process.\n */\nexport type ProcessResult = {\n  stdout: string;\n  stderr: string;\n  code: number | null;\n  date: string;\n  duration: number;\n};\n\n/**\n * Error class for process errors.\n * Contains additional information about the process result.\n * @category Error\n * @public\n * @class\n * @extends Error\n * @example\n * const result = await executeProcess({})\n * .catch((error) => {\n *   if (error instanceof ProcessError) {\n *   console.error(error.code);\n *   console.error(error.stderr);\n *   console.error(error.stdout);\n *   }\n * });\n *\n */\nexport class ProcessError extends Error {\n  code: number | null;\n  stderr: string;\n  stdout: string;\n\n  constructor(result: ProcessResult) {\n    super(result.stderr);\n    this.code = result.code;\n    this.stderr = result.stderr;\n    this.stdout = result.stdout;\n  }\n}\n\n/**\n * Process config object. Contains the command, args and observer.\n * @param cfg - process config object with command, args and observer (optional)\n * @category Types\n * @public\n * @property {string} command - The command to execute.\n * @property {string[]} args - The arguments for the command.\n * @property {ProcessObserver} observer - The observer for the process.\n *\n * @example\n *\n * // bash command\n * const cfg = {\n *   command: 'bash',\n *   args: ['-c', 'echo \"hello world\"']\n * };\n *\n * // node command\n * const cfg = {\n * command: 'node',\n * args: ['--version']\n * };\n *\n * // npx command\n * const cfg = {\n * command: 'npx',\n * args: ['--version']\n *\n */\nexport type ProcessConfig = Omit<\n  SpawnOptionsWithStdioTuple<StdioPipe, StdioPipe, StdioPipe>,\n  'stdio'\n> & {\n  command: string;\n  args?: string[];\n  observer?: ProcessObserver;\n  ignoreExitCode?: boolean;\n};\n\n/**\n * Process observer object. Contains the onStdout, error and complete function.\n * @category Types\n * @public\n * @property {function} onStdout - The onStdout function of the observer (optional).\n * @property {function} onError - The error function of the observer (optional).\n * @property {function} onComplete - The complete function of the observer (optional).\n *\n * @example\n * const observer = {\n *  onStdout: (stdout) => console.info(stdout)\n *  }\n */\nexport type ProcessObserver = {\n  onStdout?: (stdout: string, sourceProcess?: ChildProcess) => void;\n  onStderr?: (stderr: string, sourceProcess?: ChildProcess) => void;\n  onError?: (error: ProcessError) => void;\n  onComplete?: () => void;\n};\n\n/**\n * Executes a process and returns a promise with the result as `ProcessResult`.\n *\n * @example\n *\n * // sync process execution\n * const result = await executeProcess({\n *  command: 'node',\n *  args: ['--version']\n * });\n *\n * console.info(result);\n *\n * // async process execution\n * const result = await executeProcess({\n *    command: 'node',\n *    args: ['download-data.js'],\n *    observer: {\n *      onStdout: updateProgress,\n *      error: handleError,\n *      complete: cleanLogs,\n *    }\n * });\n *\n * console.info(result);\n *\n * @param cfg - see {@link ProcessConfig}\n */\nexport function executeProcess(cfg: ProcessConfig): Promise<ProcessResult> {\n  const { command, args, observer, ignoreExitCode = false, ...options } = cfg;\n  const { onStdout, onStderr, onError, onComplete } = observer ?? {};\n  const date = new Date().toISOString();\n  const start = performance.now();\n\n  return new Promise((resolve, reject) => {\n    // shell:true tells Windows to use shell command for spawning a child process\n    const spawnedProcess = spawn(command, args ?? [], {\n      shell: true,\n      windowsHide: true,\n      ...options,\n    }) as ChildProcessByStdio<Writable, Readable, Readable>;\n\n    // eslint-disable-next-line functional/no-let\n    let stdout = '';\n    // eslint-disable-next-line functional/no-let\n    let stderr = '';\n\n    spawnedProcess.stdout.on('data', (data) => {\n      stdout += String(data);\n      onStdout?.(String(data), spawnedProcess);\n    });\n\n    spawnedProcess.stderr.on('data', (data) => {\n      stderr += String(data);\n      onStderr?.(String(data), spawnedProcess);\n    });\n\n    spawnedProcess.on('error', (err) => {\n      stderr += err.toString();\n    });\n\n    spawnedProcess.on('close', (code) => {\n      const timings = { date, duration: calcDuration(start) };\n      if (code === 0 || ignoreExitCode) {\n        onComplete?.();\n        resolve({ code, stdout, stderr, ...timings });\n      } else {\n        const errorMsg = new ProcessError({ code, stdout, stderr, ...timings });\n        onError?.(errorMsg);\n        reject(errorMsg);\n      }\n    });\n  });\n}\n\nexport function calcDuration(start: number, stop?: number): number {\n  return Math.round((stop ?? performance.now()) - start);\n}\n","stats":{"times":{"passes":[{"parse":{"total":3.277958},"rules":{"for-direction":{"total":0.002042},"no-async-promise-executor":{"total":0.000375},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.001792},"no-cond-assign":{"total":0.00125},"no-constant-binary-expression":{"total":0.0061660000000000005},"no-constant-condition":{"total":0.004125},"no-control-regex":{"total":0.002792},"no-debugger":{"total":0.000291},"no-delete-var":{"total":0.000292},"no-dupe-else-if":{"total":0.002249},"no-duplicate-case":{"total":0.00025},"no-empty":{"total":0.0021260000000000007},"no-empty-character-class":{"total":0.00025},"no-empty-pattern":{"total":0.001125},"no-empty-static-block":{"total":0.00025},"no-ex-assign":{"total":0.000334},"no-extra-boolean-cast":{"total":0.005333},"no-fallthrough":{"total":0.01616200000000001},"no-global-assign":{"total":0.019124},"no-invalid-regexp":{"total":0.005915},"no-irregular-whitespace":{"total":0.010667000000000001},"no-loss-of-precision":{"total":0.0027530000000000007},"no-misleading-character-class":{"total":0.009125},"no-nonoctal-decimal-escape":{"total":0.002955},"no-octal":{"total":0.0022910000000000005},"no-prototype-builtins":{"total":0.005833000000000001},"no-regex-spaces":{"total":0.023836000000000003},"no-self-assign":{"total":0.006584000000000001},"no-shadow-restricted-names":{"total":0.007834999999999998},"no-sparse-arrays":{"total":0.0006670000000000001},"no-unsafe-finally":{"total":0.002542},"no-unsafe-optional-chaining":{"total":0.02391600000000001},"no-unused-labels":{"total":0.000417},"no-unused-private-class-members":{"total":0.046042},"no-useless-backreference":{"total":0.0029999999999999996},"no-useless-catch":{"total":0.000208},"no-useless-escape":{"total":0.00554},"require-yield":{"total":0.0023350000000000003},"use-isnan":{"total":0.0023339999999999997},"valid-typeof":{"total":0.001625},"no-var":{"total":0.0015850000000000005},"prefer-const":{"total":0.009875},"prefer-rest-params":{"total":0.002166},"prefer-spread":{"total":0.009749},"@typescript-eslint/ban-ts-comment":{"total":0.019583},"@typescript-eslint/no-array-constructor":{"total":0.00546},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001167},"@typescript-eslint/no-empty-object-type":{"total":0.0037930000000000004},"@typescript-eslint/no-explicit-any":{"total":0.002583},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000917},"@typescript-eslint/no-misused-new":{"total":0.001041},"@typescript-eslint/no-namespace":{"total":0.002041},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000958},"@typescript-eslint/no-this-alias":{"total":0.00225},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.008291},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.018625},"@typescript-eslint/no-unsafe-function-type":{"total":0.0043760000000000005},"@typescript-eslint/no-unused-expressions":{"total":0.019875000000000004},"@typescript-eslint/no-unused-vars":{"total":0.7102919999999999},"@typescript-eslint/no-wrapper-object-types":{"total":0.004416999999999999},"@typescript-eslint/prefer-as-const":{"total":0.011708000000000001},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000792},"@typescript-eslint/triple-slash-reference":{"total":0.010042},"@typescript-eslint/no-non-null-assertion":{"total":0.0115},"@typescript-eslint/adjacent-overload-signatures":{"total":0.064376},"@typescript-eslint/no-empty-function":{"total":0.09308300000000001},"@typescript-eslint/no-inferrable-types":{"total":0.023000000000000003},"@typescript-eslint/no-empty-interface":{"total":0.002042},"@nx/enforce-module-boundaries":{"total":0.03208300000000001}},"fix":{"total":0},"total":6.83925}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/lib/execute-process.unit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":1.91625},"rules":{"for-direction":{"total":0.002042},"no-async-promise-executor":{"total":0.000333},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.001041},"no-cond-assign":{"total":0.000792},"no-constant-binary-expression":{"total":0.000334},"no-constant-condition":{"total":0.000958},"no-control-regex":{"total":0.4017079999999996},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.00025},"no-dupe-else-if":{"total":0.000375},"no-duplicate-case":{"total":0.000291},"no-empty":{"total":0.0019600000000000004},"no-empty-character-class":{"total":0.001001},"no-empty-pattern":{"total":0.000458},"no-empty-static-block":{"total":0.000292},"no-ex-assign":{"total":0.000292},"no-extra-boolean-cast":{"total":0.013336000000000006},"no-fallthrough":{"total":0.010580000000000003},"no-global-assign":{"total":0.018209},"no-invalid-regexp":{"total":0.013454},"no-irregular-whitespace":{"total":0.006417},"no-loss-of-precision":{"total":0.025753000000000005},"no-misleading-character-class":{"total":0.089291},"no-nonoctal-decimal-escape":{"total":0.007336},"no-octal":{"total":0.007958999999999999},"no-prototype-builtins":{"total":0.01870900000000001},"no-regex-spaces":{"total":0.057671000000000035},"no-self-assign":{"total":0.000584},"no-shadow-restricted-names":{"total":0.007417000000000001},"no-sparse-arrays":{"total":0.0014589999999999998},"no-unsafe-finally":{"total":0.000333},"no-unsafe-optional-chaining":{"total":0.026787000000000016},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000375},"no-useless-backreference":{"total":0.064584},"no-useless-catch":{"total":0.000291},"no-useless-escape":{"total":0.17566799999999988},"require-yield":{"total":0.000375},"use-isnan":{"total":0.00125},"valid-typeof":{"total":0.001458},"no-var":{"total":0.001374},"prefer-const":{"total":0.0025830000000000002},"prefer-rest-params":{"total":0.000292},"prefer-spread":{"total":0.02550000000000001},"@typescript-eslint/ban-ts-comment":{"total":0.011375},"@typescript-eslint/no-array-constructor":{"total":0.011996000000000001},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001},"@typescript-eslint/no-empty-object-type":{"total":0.002625},"@typescript-eslint/no-explicit-any":{"total":0.002125},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000875},"@typescript-eslint/no-misused-new":{"total":0.001},"@typescript-eslint/no-namespace":{"total":0.001917},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000833},"@typescript-eslint/no-this-alias":{"total":0.001958},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.004708},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001041},"@typescript-eslint/no-unsafe-function-type":{"total":0.001458},"@typescript-eslint/no-unused-expressions":{"total":0.025962000000000016},"@typescript-eslint/no-unused-vars":{"total":0.536708},"@typescript-eslint/no-wrapper-object-types":{"total":0.001916},"@typescript-eslint/prefer-as-const":{"total":0.002917},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000791},"@typescript-eslint/triple-slash-reference":{"total":0.006500000000000001},"@typescript-eslint/no-non-null-assertion":{"total":0.001125},"@typescript-eslint/adjacent-overload-signatures":{"total":0.017083},"@typescript-eslint/no-empty-function":{"total":0.11512600000000002},"@typescript-eslint/no-inferrable-types":{"total":0.008586},"@typescript-eslint/no-empty-interface":{"total":0.001541},"@nx/enforce-module-boundaries":{"total":4.816625999999999}},"fix":{"total":0},"total":11.127125}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/lib/file-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.723},"rules":{"for-direction":{"total":0.002},"no-async-promise-executor":{"total":0.000333},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.000833},"no-cond-assign":{"total":0.0011259999999999998},"no-constant-binary-expression":{"total":0.000334},"no-constant-condition":{"total":0.004208},"no-control-regex":{"total":0.001166},"no-debugger":{"total":0.000333},"no-delete-var":{"total":0.00045799999999999997},"no-dupe-else-if":{"total":0.0014160000000000002},"no-duplicate-case":{"total":0.000292},"no-empty":{"total":0.0017920000000000002},"no-empty-character-class":{"total":0.000208},"no-empty-pattern":{"total":0.000542},"no-empty-static-block":{"total":0.000375},"no-ex-assign":{"total":0.001375},"no-extra-boolean-cast":{"total":0.0026249999999999997},"no-fallthrough":{"total":0.009332000000000002},"no-global-assign":{"total":0.018916},"no-invalid-regexp":{"total":0.001958},"no-irregular-whitespace":{"total":0.002833},"no-loss-of-precision":{"total":0.001167},"no-misleading-character-class":{"total":0.008667},"no-nonoctal-decimal-escape":{"total":0.001291},"no-octal":{"total":0.000959},"no-prototype-builtins":{"total":0.0024590000000000002},"no-regex-spaces":{"total":0.005083},"no-self-assign":{"total":0.000583},"no-shadow-restricted-names":{"total":0.0028330000000000004},"no-sparse-arrays":{"total":0.000334},"no-unsafe-finally":{"total":0.003958},"no-unsafe-optional-chaining":{"total":0.003375000000000001},"no-unused-labels":{"total":0.000417},"no-unused-private-class-members":{"total":0.000292},"no-useless-backreference":{"total":0.002876},"no-useless-catch":{"total":0.000375},"no-useless-escape":{"total":0.002417},"require-yield":{"total":0.0017079999999999999},"use-isnan":{"total":0.001},"valid-typeof":{"total":0.001708},"no-var":{"total":0.000292},"prefer-const":{"total":0.001166},"prefer-rest-params":{"total":0.003125},"prefer-spread":{"total":0.0017070000000000002},"@typescript-eslint/ban-ts-comment":{"total":0.090167},"@typescript-eslint/no-array-constructor":{"total":0.0024180000000000004},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000958},"@typescript-eslint/no-empty-object-type":{"total":0.003709},"@typescript-eslint/no-explicit-any":{"total":0.001875},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000792},"@typescript-eslint/no-misused-new":{"total":0.000917},"@typescript-eslint/no-namespace":{"total":0.001917},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000875},"@typescript-eslint/no-this-alias":{"total":0.002209},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.004083},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.004333},"@typescript-eslint/no-unsafe-function-type":{"total":0.001375},"@typescript-eslint/no-unused-expressions":{"total":0.012499999999999999},"@typescript-eslint/no-unused-vars":{"total":0.31675000000000003},"@typescript-eslint/no-wrapper-object-types":{"total":0.0017499999999999998},"@typescript-eslint/prefer-as-const":{"total":0.000833},"@typescript-eslint/prefer-namespace-keyword":{"total":0.00075},"@typescript-eslint/triple-slash-reference":{"total":0.0057079999999999995},"@typescript-eslint/no-non-null-assertion":{"total":0.000792},"@typescript-eslint/adjacent-overload-signatures":{"total":0.011376},"@typescript-eslint/no-empty-function":{"total":0.016124},"@typescript-eslint/no-inferrable-types":{"total":0.006166000000000001},"@typescript-eslint/no-empty-interface":{"total":0.0024990000000000004},"@nx/enforce-module-boundaries":{"total":0.031958}},"fix":{"total":0},"total":2.444291}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/lib/merge-cpuprofile-files.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.802209},"rules":{"for-direction":{"total":0.00175},"no-async-promise-executor":{"total":0.00025},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.000792},"no-cond-assign":{"total":0.00075},"no-constant-binary-expression":{"total":0.000333},"no-constant-condition":{"total":0.000834},"no-control-regex":{"total":0.004166000000000001},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.00025},"no-dupe-else-if":{"total":0.000375},"no-duplicate-case":{"total":0.000333},"no-empty":{"total":0.0012100000000000001},"no-empty-character-class":{"total":0.000208},"no-empty-pattern":{"total":0.000417},"no-empty-static-block":{"total":0.00025},"no-ex-assign":{"total":0.000375},"no-extra-boolean-cast":{"total":0.005085},"no-fallthrough":{"total":0.006039999999999998},"no-global-assign":{"total":0.017709000000000003},"no-invalid-regexp":{"total":0.004374000000000001},"no-irregular-whitespace":{"total":0.004791},"no-loss-of-precision":{"total":0.0037070000000000024},"no-misleading-character-class":{"total":0.007459},"no-nonoctal-decimal-escape":{"total":0.004752},"no-octal":{"total":0.003167000000000001},"no-prototype-builtins":{"total":0.004459000000000001},"no-regex-spaces":{"total":0.018373},"no-self-assign":{"total":0.000458},"no-shadow-restricted-names":{"total":0.005751},"no-sparse-arrays":{"total":0.00025},"no-unsafe-finally":{"total":0.00025},"no-unsafe-optional-chaining":{"total":0.007124000000000004},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000292},"no-useless-backreference":{"total":0.002708},"no-useless-catch":{"total":0.000208},"no-useless-escape":{"total":0.006794},"require-yield":{"total":0.000334},"use-isnan":{"total":0.000875},"valid-typeof":{"total":0.001333},"no-var":{"total":0.001251},"prefer-const":{"total":0.0019569999999999995},"prefer-rest-params":{"total":0.000375},"prefer-spread":{"total":0.003749000000000001},"@typescript-eslint/ban-ts-comment":{"total":0.013083000000000001},"@typescript-eslint/no-array-constructor":{"total":0.004541000000000001},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000875},"@typescript-eslint/no-empty-object-type":{"total":0.0025},"@typescript-eslint/no-explicit-any":{"total":0.001958},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000833},"@typescript-eslint/no-misused-new":{"total":0.000875},"@typescript-eslint/no-namespace":{"total":0.001875},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000833},"@typescript-eslint/no-this-alias":{"total":0.001791},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.003625},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001125},"@typescript-eslint/no-unsafe-function-type":{"total":0.000834},"@typescript-eslint/no-unused-expressions":{"total":0.012124000000000001},"@typescript-eslint/no-unused-vars":{"total":0.340624},"@typescript-eslint/no-wrapper-object-types":{"total":0.001},"@typescript-eslint/prefer-as-const":{"total":0.0020000000000000005},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000708},"@typescript-eslint/triple-slash-reference":{"total":0.006038999999999999},"@typescript-eslint/no-non-null-assertion":{"total":0.00075},"@typescript-eslint/adjacent-overload-signatures":{"total":0.00804},"@typescript-eslint/no-empty-function":{"total":0.020749999999999998},"@typescript-eslint/no-inferrable-types":{"total":0.005375},"@typescript-eslint/no-empty-interface":{"total":0.001542},"@nx/enforce-module-boundaries":{"total":0.058875}},"fix":{"total":0},"total":2.623125}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/lib/merge-cpuprofile-files.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.6},"rules":{"for-direction":{"total":0.001583},"no-async-promise-executor":{"total":0.00025},"no-case-declarations":{"total":0.000292},"no-compare-neg-zero":{"total":0.001334},"no-cond-assign":{"total":0.001041},"no-constant-binary-expression":{"total":0.002291},"no-constant-condition":{"total":0.002417},"no-control-regex":{"total":0.0023760000000000005},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.000208},"no-dupe-else-if":{"total":0.0015409999999999998},"no-duplicate-case":{"total":0.00025},"no-empty":{"total":0.000835},"no-empty-character-class":{"total":0.000208},"no-empty-pattern":{"total":0.000459},"no-empty-static-block":{"total":0.000292},"no-ex-assign":{"total":0.000292},"no-extra-boolean-cast":{"total":0.0020840000000000003},"no-fallthrough":{"total":0.005042},"no-global-assign":{"total":0.022292},"no-invalid-regexp":{"total":0.002042},"no-irregular-whitespace":{"total":0.002625},"no-loss-of-precision":{"total":0.0070810000000000005},"no-misleading-character-class":{"total":0.012875},"no-nonoctal-decimal-escape":{"total":0.0026670000000000005},"no-octal":{"total":0.0021639999999999997},"no-prototype-builtins":{"total":0.0021249999999999997},"no-regex-spaces":{"total":0.007333},"no-self-assign":{"total":0.000417},"no-shadow-restricted-names":{"total":0.0036240000000000005},"no-sparse-arrays":{"total":0.00025},"no-unsafe-finally":{"total":0.0020410000000000003},"no-unsafe-optional-chaining":{"total":0.0040420000000000005},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.00025},"no-useless-backreference":{"total":0.0028329999999999996},"no-useless-catch":{"total":0.000208},"no-useless-escape":{"total":0.006126},"require-yield":{"total":0.000874},"use-isnan":{"total":0.00225},"valid-typeof":{"total":0.001375},"no-var":{"total":0.0006670000000000001},"prefer-const":{"total":0.001333},"prefer-rest-params":{"total":0.001083},"prefer-spread":{"total":0.001417},"@typescript-eslint/ban-ts-comment":{"total":0.005582999999999999},"@typescript-eslint/no-array-constructor":{"total":0.002457},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000833},"@typescript-eslint/no-empty-object-type":{"total":0.002417},"@typescript-eslint/no-explicit-any":{"total":0.002083},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000959},"@typescript-eslint/no-misused-new":{"total":0.000917},"@typescript-eslint/no-namespace":{"total":0.001791},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000833},"@typescript-eslint/no-this-alias":{"total":0.001709},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.0035},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001},"@typescript-eslint/no-unsafe-function-type":{"total":0.001582},"@typescript-eslint/no-unused-expressions":{"total":0.008292},"@typescript-eslint/no-unused-vars":{"total":0.324541},"@typescript-eslint/no-wrapper-object-types":{"total":0.0019579999999999997},"@typescript-eslint/prefer-as-const":{"total":0.001459},"@typescript-eslint/prefer-namespace-keyword":{"total":0.00075},"@typescript-eslint/triple-slash-reference":{"total":0.005665999999999999},"@typescript-eslint/no-non-null-assertion":{"total":0.000792},"@typescript-eslint/adjacent-overload-signatures":{"total":0.007249999999999999},"@typescript-eslint/no-empty-function":{"total":0.009417},"@typescript-eslint/no-inferrable-types":{"total":0.006042},"@typescript-eslint/no-empty-interface":{"total":0.001459},"@nx/enforce-module-boundaries":{"total":0.065292}},"fix":{"total":0},"total":2.203417}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/lib/merge-cpuprofile-files.unit.test.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":21,"column":55,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":21,"endColumn":57},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1256,1259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1256,1259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, expect, it, vi, beforeEach } from 'vitest';\nimport { readFile } from 'fs/promises';\nimport { join } from 'path';\nimport { mergeCpuProfileFiles } from './merge-cpuprofile-files';\nimport { vol } from 'memfs';\nimport * as fileUtils from './file-utils';\nimport * as cpuUtils from './cpu/utils';\nimport * as loadCpuProfilesModule from './cpu/load-cpu-profiles';\nimport * as traceUtils from './trace/utils';\n\ndescribe('mergeCpuProfileFiles', () => {\n  const ensureDirectoryExistsSpy = vi.spyOn(fileUtils, 'ensureDirectoryExists');\n  const isCpuProfileFileNameSpy = vi.spyOn(cpuUtils, 'isCpuProfileFileName');\n  const loadCpuProfilesSpy = vi.spyOn(loadCpuProfilesModule, 'loadCpuProfiles');\n  const cpuProfilesToTraceFileSpy = vi.spyOn(\n    traceUtils,\n    'cpuProfilesToTraceFile'\n  );\n\n  beforeEach(() => {\n    ensureDirectoryExistsSpy.mockImplementation(() => {});\n  });\n\n  it('should merge files in a folder', async () => {\n    isCpuProfileFileNameSpy.mockReturnValue(true);\n\n    const profilesDir = 'profiles';\n    const profilePath1 = `${profilesDir}/CPU.20250519.100000.10.0.001.cpuprofile`;\n\n    vol.fromJSON({\n      [profilePath1]: '{\"mock\": \"profile1\"}',\n    });\n\n    cpuProfilesToTraceFileSpy.mockReturnValue({ mock: 'profile1' } as any);\n    const outputFile = join(profilesDir, 'merged-profile.json');\n    await mergeCpuProfileFiles(profilesDir, outputFile);\n\n    const outputFileContent = await readFile(outputFile, 'utf8');\n\n    expect(outputFileContent).toBe(\n      JSON.stringify({ mock: 'profile1' }, null, 2)\n    );\n  });\n\n  it('should skip files when isCpuProfileFileName returns false', async () => {\n    isCpuProfileFileNameSpy.mockImplementation((fileName: string) => {\n      return fileName.includes('CPU.20250519.120000.12.0.001.cpuprofile');\n    });\n\n    const profilesDir = 'profiles';\n    vol.fromJSON({\n      [`${profilesDir}/CPU.20250519.120000.12.0.001.cpuprofile`]: '{}',\n      [`${profilesDir}/invalid.txt`]: 'some text file',\n      [`${profilesDir}/another.json`]: JSON.stringify({ some: 'data' }),\n      [`${profilesDir}/invalid.cpuprofile`]: JSON.stringify({ some: 'data' }),\n    });\n\n    const outputFile = join(profilesDir, 'merged-profile.json');\n    await mergeCpuProfileFiles(profilesDir, outputFile);\n\n    expect(loadCpuProfilesSpy).toHaveBeenCalledWith(profilesDir);\n    expect(loadCpuProfilesSpy).toHaveBeenCalledTimes(1);\n  });\n\n  it('should throw error when no valid CPU profiles are found', async () => {\n    isCpuProfileFileNameSpy.mockReturnValue(false);\n\n    const profilesDir = 'profiles';\n    vol.fromJSON({\n      [`${profilesDir}/invalid.txt`]: 'some text file',\n      [`${profilesDir}/another.json`]: JSON.stringify({ some: 'data' }),\n    });\n\n    const outputFile = join(profilesDir, 'merged-profile.json');\n\n    await expect(mergeCpuProfileFiles(profilesDir, outputFile)).rejects.toThrow(\n      'No valid CPU profiles found in profiles to merge'\n    );\n  });\n});\n","stats":{"times":{"passes":[{"parse":{"total":1.361083},"rules":{"for-direction":{"total":0.001666},"no-async-promise-executor":{"total":0.00025},"no-case-declarations":{"total":0.000334},"no-compare-neg-zero":{"total":0.00075},"no-cond-assign":{"total":0.00075},"no-constant-binary-expression":{"total":0.000334},"no-constant-condition":{"total":0.000791},"no-control-regex":{"total":0.006289},"no-debugger":{"total":0.000208},"no-delete-var":{"total":0.00025},"no-dupe-else-if":{"total":0.000333},"no-duplicate-case":{"total":0.000292},"no-empty":{"total":0.004624},"no-empty-character-class":{"total":0.000292},"no-empty-pattern":{"total":0.000417},"no-empty-static-block":{"total":0.00025},"no-ex-assign":{"total":0.00025},"no-extra-boolean-cast":{"total":0.006042000000000001},"no-fallthrough":{"total":0.009084},"no-global-assign":{"total":0.016291},"no-invalid-regexp":{"total":0.005705000000000003},"no-irregular-whitespace":{"total":0.005792},"no-loss-of-precision":{"total":0.011585000000000002},"no-misleading-character-class":{"total":0.007541},"no-nonoctal-decimal-escape":{"total":0.006874000000000001},"no-octal":{"total":0.004834000000000001},"no-prototype-builtins":{"total":0.007916000000000001},"no-regex-spaces":{"total":0.025753000000000015},"no-self-assign":{"total":0.000458},"no-shadow-restricted-names":{"total":0.007873999999999999},"no-sparse-arrays":{"total":0.00025},"no-unsafe-finally":{"total":0.001291},"no-unsafe-optional-chaining":{"total":0.011247000000000004},"no-unused-labels":{"total":0.000417},"no-unused-private-class-members":{"total":0.000292},"no-useless-backreference":{"total":0.0024590000000000002},"no-useless-catch":{"total":0.00025},"no-useless-escape":{"total":0.015829000000000003},"require-yield":{"total":0.000292},"use-isnan":{"total":0.000917},"valid-typeof":{"total":0.001416},"no-var":{"total":0.0018330000000000004},"prefer-const":{"total":0.0029180000000000005},"prefer-rest-params":{"total":0.000417},"prefer-spread":{"total":0.005669000000000001},"@typescript-eslint/ban-ts-comment":{"total":0.008499},"@typescript-eslint/no-array-constructor":{"total":0.010247000000000001},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001125},"@typescript-eslint/no-empty-object-type":{"total":0.002917},"@typescript-eslint/no-explicit-any":{"total":0.022207},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001083},"@typescript-eslint/no-misused-new":{"total":0.001125},"@typescript-eslint/no-namespace":{"total":0.002209},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001041},"@typescript-eslint/no-this-alias":{"total":0.002208},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.004459},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.000917},"@typescript-eslint/no-unsafe-function-type":{"total":0.00075},"@typescript-eslint/no-unused-expressions":{"total":0.015332000000000002},"@typescript-eslint/no-unused-vars":{"total":1.270417},"@typescript-eslint/no-wrapper-object-types":{"total":0.001},"@typescript-eslint/prefer-as-const":{"total":0.002750000000000001},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000708},"@typescript-eslint/triple-slash-reference":{"total":0.005876},"@typescript-eslint/no-non-null-assertion":{"total":0.000666},"@typescript-eslint/adjacent-overload-signatures":{"total":0.011126},"@typescript-eslint/no-empty-function":{"total":0.04504200000000001},"@typescript-eslint/no-inferrable-types":{"total":0.0065840000000000004},"@typescript-eslint/no-empty-interface":{"total":0.001666},"@nx/enforce-module-boundaries":{"total":0.22871}},"fix":{"total":0},"total":4.561333}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/lib/reduce-trace.integration.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'afterEach' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  describe,\n  expect,\n  it,\n  vi,\n  beforeEach,\n  afterEach,\n  beforeAll,\n  afterAll,\n} from 'vitest';\nimport { mkdir, rm } from 'fs/promises';\nimport { join } from 'path';\nimport { fileURLToPath } from 'url';\n\n// Mock fs module at the top level\nvi.mock('fs', async () => {\n  const actual = await vi.importActual('fs');\n  return {\n    ...actual,\n    readFileSync: vi.fn(),\n    writeFileSync: vi.fn(),\n  };\n});\n\nimport { reduceTraceFile } from './reduce-trace';\nimport * as fs from 'fs';\n\ndescribe('reduceTraceFile (integration)', () => {\n  const __dirname = fileURLToPath(new URL('.', import.meta.url));\n  const tmpDir = join(__dirname, '../../../tmp/reduce-trace-test');\n  const mockInputFile = join(tmpDir, 'input.json');\n  const mockOutputFile = join(tmpDir, 'output.json');\n\n  beforeAll(async () => {\n    await rm(tmpDir, { recursive: true, force: true });\n    await mkdir(tmpDir, { recursive: true });\n  });\n\n  afterAll(async () => {\n    await rm(tmpDir, { recursive: true, force: true });\n  });\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  it('should read input file, process trace data, and write output file', () => {\n    vi.mocked(fs.readFileSync).mockReturnValue(\n      JSON.stringify({\n        traceEvents: [\n          { name: 'Regular' },\n          { name: 'ResourceSendRequest', cat: 'netlog' },\n        ],\n      })\n    );\n\n    const result = reduceTraceFile(mockInputFile, mockOutputFile, {\n      filterNetwork: true,\n    });\n\n    expect(fs.readFileSync).toHaveBeenCalledWith(mockInputFile, 'utf8');\n    expect(fs.writeFileSync).toHaveBeenCalledWith(\n      mockOutputFile,\n      expect.stringContaining('Regular'),\n      'utf8'\n    );\n    expect(result.inputFile).toBe(mockInputFile);\n    expect(result.outputFile).toBe(mockOutputFile);\n    expect(result.originalEventCount).toBe(2);\n    expect(result.filteredEventCount).toBe(1);\n  });\n\n  it('should use default filter options when none provided', () => {\n    vi.mocked(fs.readFileSync).mockReturnValue(\n      JSON.stringify({\n        traceEvents: [{ name: 'Regular' }],\n      })\n    );\n\n    const result = reduceTraceFile(mockInputFile, mockOutputFile);\n\n    expect(result.originalEventCount).toBe(1);\n    expect(result.filteredEventCount).toBe(1);\n  });\n});\n","stats":{"times":{"passes":[{"parse":{"total":1.197709},"rules":{"for-direction":{"total":0.002125},"no-async-promise-executor":{"total":0.00025},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.001042},"no-cond-assign":{"total":0.001417},"no-constant-binary-expression":{"total":0.000375},"no-constant-condition":{"total":0.001167},"no-control-regex":{"total":0.0052510000000000005},"no-debugger":{"total":0.000292},"no-delete-var":{"total":0.00025},"no-dupe-else-if":{"total":0.000375},"no-duplicate-case":{"total":0.000333},"no-empty":{"total":0.001875},"no-empty-character-class":{"total":0.00025},"no-empty-pattern":{"total":0.000542},"no-empty-static-block":{"total":0.000291},"no-ex-assign":{"total":0.00025},"no-extra-boolean-cast":{"total":0.007663000000000002},"no-fallthrough":{"total":0.008627},"no-global-assign":{"total":0.01725},"no-invalid-regexp":{"total":0.007457000000000002},"no-irregular-whitespace":{"total":0.005167},"no-loss-of-precision":{"total":0.014789000000000002},"no-misleading-character-class":{"total":0.009333000000000001},"no-nonoctal-decimal-escape":{"total":0.0061259999999999995},"no-octal":{"total":0.004043000000000001},"no-prototype-builtins":{"total":0.008832999999999999},"no-regex-spaces":{"total":0.034124000000000015},"no-self-assign":{"total":0.000542},"no-shadow-restricted-names":{"total":0.0065439999999999995},"no-sparse-arrays":{"total":0.001083},"no-unsafe-finally":{"total":0.001583},"no-unsafe-optional-chaining":{"total":0.014079000000000008},"no-unused-labels":{"total":0.000417},"no-unused-private-class-members":{"total":0.000333},"no-useless-backreference":{"total":0.002917},"no-useless-catch":{"total":0.000209},"no-useless-escape":{"total":0.009330999999999999},"require-yield":{"total":0.000334},"use-isnan":{"total":0.000917},"valid-typeof":{"total":0.0014160000000000002},"no-var":{"total":0.001376},"prefer-const":{"total":0.0021260000000000003},"prefer-rest-params":{"total":0.000291},"prefer-spread":{"total":0.006792000000000003},"@typescript-eslint/ban-ts-comment":{"total":0.010917000000000001},"@typescript-eslint/no-array-constructor":{"total":0.0075029999999999975},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001},"@typescript-eslint/no-empty-object-type":{"total":0.003041},"@typescript-eslint/no-explicit-any":{"total":0.002167},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000917},"@typescript-eslint/no-misused-new":{"total":0.000958},"@typescript-eslint/no-namespace":{"total":0.001875},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001125},"@typescript-eslint/no-this-alias":{"total":0.002292},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.0045},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001125},"@typescript-eslint/no-unsafe-function-type":{"total":0.000875},"@typescript-eslint/no-unused-expressions":{"total":0.018042000000000006},"@typescript-eslint/no-unused-vars":{"total":0.42858399999999996},"@typescript-eslint/no-wrapper-object-types":{"total":0.001583},"@typescript-eslint/prefer-as-const":{"total":0.001833},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000792},"@typescript-eslint/triple-slash-reference":{"total":0.006791},"@typescript-eslint/no-non-null-assertion":{"total":0.000791},"@typescript-eslint/adjacent-overload-signatures":{"total":0.011208000000000001},"@typescript-eslint/no-empty-function":{"total":0.029082000000000004},"@typescript-eslint/no-inferrable-types":{"total":0.006291000000000001},"@typescript-eslint/no-empty-interface":{"total":0.001542},"@nx/enforce-module-boundaries":{"total":0.066623}},"fix":{"total":0},"total":4.104708}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/lib/reduce-trace.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":5.775125},"rules":{"for-direction":{"total":0.002333},"no-async-promise-executor":{"total":0.000375},"no-case-declarations":{"total":0.000291},"no-compare-neg-zero":{"total":0.010584000000000001},"no-cond-assign":{"total":0.008827999999999996},"no-constant-binary-expression":{"total":0.11624400000000007},"no-constant-condition":{"total":0.05870700000000002},"no-control-regex":{"total":0.021254000000000012},"no-debugger":{"total":0.000292},"no-delete-var":{"total":0.0015420000000000002},"no-dupe-else-if":{"total":0.11937400000000001},"no-duplicate-case":{"total":0.000291},"no-empty":{"total":0.006251000000000002},"no-empty-character-class":{"total":0.000208},"no-empty-pattern":{"total":0.001083},"no-empty-static-block":{"total":0.000333},"no-ex-assign":{"total":0.000333},"no-extra-boolean-cast":{"total":0.06687500000000002},"no-fallthrough":{"total":0.09995400000000007},"no-global-assign":{"total":0.01925},"no-invalid-regexp":{"total":0.01608300000000001},"no-irregular-whitespace":{"total":0.016542},"no-loss-of-precision":{"total":0.032541000000000014},"no-misleading-character-class":{"total":0.012709},"no-nonoctal-decimal-escape":{"total":0.02309000000000001},"no-octal":{"total":0.015623000000000007},"no-prototype-builtins":{"total":0.022577000000000007},"no-regex-spaces":{"total":0.11129400000000006},"no-self-assign":{"total":0.0054989999999999995},"no-shadow-restricted-names":{"total":0.015213000000000006},"no-sparse-arrays":{"total":0.001},"no-unsafe-finally":{"total":0.029167000000000012},"no-unsafe-optional-chaining":{"total":0.06974100000000004},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.0005},"no-useless-backreference":{"total":0.00225},"no-useless-catch":{"total":0.000208},"no-useless-escape":{"total":0.03679100000000002},"require-yield":{"total":0.005666000000000001},"use-isnan":{"total":0.022585000000000004},"valid-typeof":{"total":0.004001},"no-var":{"total":0.003708000000000002},"prefer-const":{"total":0.015124000000000002},"prefer-rest-params":{"total":0.007667},"prefer-spread":{"total":0.02108000000000001},"@typescript-eslint/ban-ts-comment":{"total":0.026708999999999997},"@typescript-eslint/no-array-constructor":{"total":0.015168000000000006},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000875},"@typescript-eslint/no-empty-object-type":{"total":0.00425},"@typescript-eslint/no-explicit-any":{"total":0.00225},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000834},"@typescript-eslint/no-misused-new":{"total":0.000916},"@typescript-eslint/no-namespace":{"total":0.001875},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001},"@typescript-eslint/no-this-alias":{"total":0.002125},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.004792},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.006292},"@typescript-eslint/no-unsafe-function-type":{"total":0.006294},"@typescript-eslint/no-unused-expressions":{"total":0.017918000000000003},"@typescript-eslint/no-unused-vars":{"total":1.0675839999999999},"@typescript-eslint/no-wrapper-object-types":{"total":0.0075819999999999985},"@typescript-eslint/prefer-as-const":{"total":0.005167000000000001},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000708},"@typescript-eslint/triple-slash-reference":{"total":0.007584},"@typescript-eslint/no-non-null-assertion":{"total":0.000792},"@typescript-eslint/adjacent-overload-signatures":{"total":0.04845900000000003},"@typescript-eslint/no-empty-function":{"total":0.146666},"@typescript-eslint/no-inferrable-types":{"total":0.024167},"@typescript-eslint/no-empty-interface":{"total":0.0021249999999999997},"@nx/enforce-module-boundaries":{"total":0.052210000000000006}},"fix":{"total":0},"total":14.941459}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/lib/reduce-trace.unit.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'beforeEach' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'afterEach' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'beforeAll' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'afterAll' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mkdir' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'rm' is defined but never used.","line":11,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'join' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fileURLToPath' is defined but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FilterOptions' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TraceReductionStats' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'reduceTraceFile' is defined but never used.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fs' is defined but never used.","line":48,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  describe,\n  expect,\n  it,\n  vi,\n  beforeEach,\n  afterEach,\n  beforeAll,\n  afterAll,\n} from 'vitest';\nimport { mkdir, rm } from 'fs/promises';\nimport { join } from 'path';\nimport { fileURLToPath } from 'url';\n\n// Mock fs module at the top level\nvi.mock('fs', async () => {\n  const actual = await vi.importActual('fs');\n  return {\n    ...actual,\n    readFileSync: vi.fn(),\n    writeFileSync: vi.fn(),\n  };\n});\n\nimport {\n  DEFAULT_FILTER_OPTIONS,\n  FilterOptions,\n  TraceReductionStats,\n  isNetworkEvent,\n  isAnimationEvent,\n  isGPUEvent,\n  isStreamingCompileEvent,\n  extractThreadPoolThreads,\n  isEventFromThreadPoolThread,\n  createThreadPoolEventFilter,\n  isThreadPoolEvent,\n  shouldFilterByDuration,\n  shouldFilterByTimestamp,\n  filterTraceEvents,\n  reduceTrace,\n  reduceTraceFile,\n} from './reduce-trace';\nimport {\n  TraceEvent,\n  CompleteEvent,\n  ThreadNameEvent,\n} from './traceprofile.types';\nimport * as fs from 'fs';\n\ndescribe('reduce-trace', () => {\n  describe('DEFAULT_FILTER_OPTIONS', () => {\n    it('should have expected default filter settings', () => {\n      expect(DEFAULT_FILTER_OPTIONS).toEqual({\n        filterNetwork: true,\n        filterAnimation: true,\n        filterGPU: true,\n        filterThreadPool: true,\n        filterStreamingCompile: true,\n        excludeNames: [\n          'ResourceReceivedData',\n          'UpdateCounters',\n          'v8.evaluateModule',\n        ],\n        excludeCats: ['v8.compile'],\n        durMin: 10000,\n      });\n    });\n  });\n\n  describe('isNetworkEvent', () => {\n    it.each([['netlog'], ['loading']])(\n      'should return true for %s category events',\n      (cat) => {\n        const event = { cat } as CompleteEvent;\n        expect(isNetworkEvent(event)).toBe(true);\n      }\n    );\n\n    it.each([['ResourceSendRequest'], ['fetch']])(\n      'should return true for %s name events',\n      (name) => {\n        const event = { name } as CompleteEvent;\n        expect(isNetworkEvent(event)).toBe(true);\n      }\n    );\n\n    it('should return false for non-network events', () => {\n      const event = {\n        name: 'Layout',\n        cat: 'devtools.timeline',\n      } as CompleteEvent;\n      expect(isNetworkEvent(event)).toBe(false);\n    });\n\n    it('should return false for events with no category or name', () => {\n      const event = {} as CompleteEvent;\n      expect(isNetworkEvent(event)).toBe(false);\n    });\n  });\n\n  describe('isAnimationEvent', () => {\n    it.each([['animation'], ['blink.animations']])(\n      'should return true for %s category events',\n      (cat) => {\n        const event = { cat } as CompleteEvent;\n        expect(isAnimationEvent(event)).toBe(true);\n      }\n    );\n\n    it.each([['Animation'], ['RequestAnimationFrame']])(\n      'should return true for %s name events',\n      (name) => {\n        const event = { name } as CompleteEvent;\n        expect(isAnimationEvent(event)).toBe(true);\n      }\n    );\n\n    it('should return false for non-animation events', () => {\n      const event = {\n        name: 'Layout',\n        cat: 'devtools.timeline',\n      } as CompleteEvent;\n      expect(isAnimationEvent(event)).toBe(false);\n    });\n  });\n\n  describe('isGPUEvent', () => {\n    it.each([['gpu'], ['cc']])(\n      'should return true for %s category events',\n      (cat) => {\n        const event = { cat } as CompleteEvent;\n        expect(isGPUEvent(event)).toBe(true);\n      }\n    );\n\n    it.each([['GPUTask'], ['Compositor']])(\n      'should return true for %s name events',\n      (name) => {\n        const event = { name } as CompleteEvent;\n        expect(isGPUEvent(event)).toBe(true);\n      }\n    );\n\n    it('should return false for non-GPU events', () => {\n      const event = {\n        name: 'Layout',\n        cat: 'devtools.timeline',\n      } as CompleteEvent;\n      expect(isGPUEvent(event)).toBe(false);\n    });\n  });\n\n  describe('isStreamingCompileEvent', () => {\n    it.each([['StreamCompileTask'], ['CompileTask']])(\n      'should return true for %s name events',\n      (name) => {\n        const event = { name } as CompleteEvent;\n        expect(isStreamingCompileEvent(event)).toBe(true);\n      }\n    );\n\n    it('should return true for v8.wasm category with Streaming name', () => {\n      const event = { cat: 'v8.wasm', name: 'Streaming' } as CompleteEvent;\n      expect(isStreamingCompileEvent(event)).toBe(true);\n    });\n\n    it('should return false for non-streaming compile events', () => {\n      const event = {\n        name: 'Layout',\n        cat: 'devtools.timeline',\n      } as CompleteEvent;\n      expect(isStreamingCompileEvent(event)).toBe(false);\n    });\n  });\n\n  describe('extractThreadPoolThreads', () => {\n    it('should extract thread pool threads from metadata events', () => {\n      const events: TraceEvent[] = [\n        {\n          ph: 'M',\n          name: 'thread_name',\n          args: { name: 'ThreadPoolBackgroundWorker' },\n          pid: 1,\n          tid: 100,\n        } as unknown as ThreadNameEvent,\n        {\n          ph: 'M',\n          name: 'thread_name',\n          args: { name: 'CrRendererMain' },\n          pid: 1,\n          tid: 200,\n        } as unknown as ThreadNameEvent,\n        {\n          ph: 'M',\n          name: 'thread_name',\n          args: { name: 'WorkerThread' },\n          pid: 2,\n          tid: 300,\n        } as unknown as ThreadNameEvent,\n      ];\n\n      const result = extractThreadPoolThreads(events);\n\n      expect(result).toBeInstanceOf(Set);\n      expect(result.has('1-100')).toBe(true);\n      expect(result.has('2-300')).toBe(true);\n      expect(result.has('1-200')).toBe(false);\n    });\n\n    it('should return empty set when no thread pool threads found', () => {\n      const events: TraceEvent[] = [\n        {\n          ph: 'M',\n          name: 'thread_name',\n          args: { name: 'CrRendererMain' },\n          pid: 1,\n          tid: 1,\n        } as unknown as ThreadNameEvent,\n      ];\n\n      const result = extractThreadPoolThreads(events);\n\n      expect(result.size).toBe(0);\n    });\n\n    it('should handle events without required fields gracefully', () => {\n      const events: TraceEvent[] = [\n        {\n          ph: 'M',\n          name: 'thread_name',\n          pid: 1,\n          tid: 1,\n        } as unknown as ThreadNameEvent, // Missing args\n        {\n          ph: 'X',\n          name: 'RegularEvent',\n          pid: 1,\n          tid: 1,\n        } as unknown as CompleteEvent, // Wrong event type\n      ];\n\n      const result = extractThreadPoolThreads(events);\n\n      expect(result.size).toBe(0);\n    });\n  });\n\n  describe('isEventFromThreadPoolThread', () => {\n    it('should return true for events from thread pool threads', () => {\n      const threadPoolThreads = new Set(['1-100', '2-200']);\n      const event = { pid: 1, tid: 100 } as CompleteEvent;\n\n      expect(isEventFromThreadPoolThread(event, threadPoolThreads)).toBe(true);\n    });\n\n    it('should return false for events not from thread pool threads', () => {\n      const threadPoolThreads = new Set(['1-100', '2-200']);\n      const event = { pid: 1, tid: 300 } as CompleteEvent;\n\n      expect(isEventFromThreadPoolThread(event, threadPoolThreads)).toBe(false);\n    });\n\n    it('should return false for events without pid or tid', () => {\n      const threadPoolThreads = new Set(['1-100']);\n      const event = {} as CompleteEvent;\n\n      expect(isEventFromThreadPoolThread(event, threadPoolThreads)).toBe(false);\n    });\n  });\n\n  describe('createThreadPoolEventFilter', () => {\n    it('should create a filter function that identifies thread pool events', () => {\n      const events: TraceEvent[] = [\n        {\n          ph: 'M',\n          name: 'thread_name',\n          args: { name: 'ThreadPoolBackgroundWorker' },\n          pid: 1,\n          tid: 100,\n        } as unknown as ThreadNameEvent,\n      ];\n\n      const filter = createThreadPoolEventFilter(events);\n      const threadPoolEvent = { pid: 1, tid: 100 } as CompleteEvent;\n      const regularEvent = { pid: 1, tid: 200 } as CompleteEvent;\n\n      expect(filter(threadPoolEvent)).toBe(true);\n      expect(filter(regularEvent)).toBe(false);\n    });\n  });\n\n  describe('isThreadPoolEvent (deprecated)', () => {\n    it.each([['ThreadPoolForegroundWorker'], ['BackgroundProcessor::DoWork']])(\n      'should return true for %s name events',\n      (name) => {\n        const event = { name } as CompleteEvent;\n        expect(isThreadPoolEvent(event)).toBe(true);\n      }\n    );\n\n    it('should return true for thread pool category events', () => {\n      const event = { cat: 'thread pool' } as CompleteEvent;\n      expect(isThreadPoolEvent(event)).toBe(true);\n    });\n\n    it('should return true for threadpool in args', () => {\n      const event = {\n        args: { type: 'threadpool' },\n      } as unknown as CompleteEvent;\n      expect(isThreadPoolEvent(event)).toBe(true);\n    });\n\n    it('should return false for non-thread pool events', () => {\n      const event = {\n        name: 'Layout',\n        cat: 'devtools.timeline',\n      } as CompleteEvent;\n      expect(isThreadPoolEvent(event)).toBe(false);\n    });\n  });\n\n  describe('shouldFilterByDuration', () => {\n    it('should return false for events without duration', () => {\n      const event = { ph: 'M', name: 'thread_name' } as ThreadNameEvent; // Metadata events don't have duration\n      expect(shouldFilterByDuration(event, 1000, 5000)).toBe(false);\n    });\n\n    it('should return true for events shorter than minimum duration', () => {\n      const event = { dur: 500 } as CompleteEvent;\n      expect(shouldFilterByDuration(event, 1000)).toBe(true);\n    });\n\n    it('should return true for events longer than maximum duration', () => {\n      const event = { dur: 6000 } as CompleteEvent;\n      expect(shouldFilterByDuration(event, undefined, 5000)).toBe(true);\n    });\n\n    it('should return false for events within duration range', () => {\n      const event = { dur: 3000 } as CompleteEvent;\n      expect(shouldFilterByDuration(event, 1000, 5000)).toBe(false);\n    });\n\n    it('should return false when no duration limits provided', () => {\n      const event = { dur: 3000 } as CompleteEvent;\n      expect(shouldFilterByDuration(event)).toBe(false);\n    });\n  });\n\n  describe('shouldFilterByTimestamp', () => {\n    it('should return false for metadata events regardless of timestamp', () => {\n      const event = { ph: 'M', ts: 500 } as ThreadNameEvent;\n      expect(shouldFilterByTimestamp(event, 1000, 5000)).toBe(false);\n    });\n\n    it('should return false for events without timestamp', () => {\n      const event = {} as CompleteEvent;\n      expect(shouldFilterByTimestamp(event, 1000, 5000)).toBe(false);\n    });\n\n    it('should return true for events earlier than minimum timestamp', () => {\n      const event = { ts: 500 } as CompleteEvent;\n      expect(shouldFilterByTimestamp(event, 1000)).toBe(true);\n    });\n\n    it('should return true for events later than maximum timestamp', () => {\n      const event = { ts: 6000 } as CompleteEvent;\n      expect(shouldFilterByTimestamp(event, undefined, 5000)).toBe(true);\n    });\n\n    it('should return false for events within timestamp range', () => {\n      const event = { ts: 3000 } as CompleteEvent;\n      expect(shouldFilterByTimestamp(event, 1000, 5000)).toBe(false);\n    });\n  });\n\n  describe('filterTraceEvents', () => {\n    it('should filter network events when filterNetwork is true', () => {\n      expect(\n        filterTraceEvents(\n          [\n            {\n              name: 'ResourceSendRequest',\n              cat: 'netlog',\n            } as unknown as CompleteEvent,\n            {\n              name: 'Regular',\n            } as unknown as CompleteEvent,\n          ],\n          { filterNetwork: true }\n        )\n      ).toStrictEqual([expect.objectContaining({ name: 'Regular' })]);\n    });\n\n    it('should filter animation events when filterAnimation is true', () => {\n      expect(\n        filterTraceEvents(\n          [\n            {\n              name: 'Animation',\n              cat: 'blink.animations',\n            } as unknown as CompleteEvent,\n            {\n              name: 'Regular',\n            } as unknown as CompleteEvent,\n          ],\n          { filterAnimation: true }\n        )\n      ).toStrictEqual([expect.objectContaining({ name: 'Regular' })]);\n    });\n\n    it('should filter GPU events when filterGPU is true', () => {\n      expect(\n        filterTraceEvents(\n          [\n            {\n              name: 'GPUTask',\n              cat: 'gpu',\n            } as unknown as CompleteEvent,\n            {\n              name: 'Regular',\n            } as unknown as CompleteEvent,\n          ],\n          { filterGPU: true }\n        )\n      ).toStrictEqual([expect.objectContaining({ name: 'Regular' })]);\n    });\n\n    it('should filter thread pool events when filterThreadPool is true', () => {\n      expect(\n        filterTraceEvents(\n          [\n            {\n              ph: 'M',\n              name: 'thread_name',\n              args: { name: 'worker' },\n              pid: 1,\n              tid: 100,\n            } as unknown as CompleteEvent,\n            {\n              pid: 1,\n              tid: 100,\n            } as unknown as CompleteEvent,\n            {\n              pid: 1,\n              tid: 1,\n            } as unknown as CompleteEvent,\n          ],\n          { filterThreadPool: true }\n        )\n      ).toStrictEqual([\n        expect.objectContaining({ ph: 'M' }),\n        expect.objectContaining({ pid: 1, tid: 1 }),\n      ]);\n    });\n\n    it('should filter streaming compile events when filterStreamingCompile is true', () => {\n      expect(\n        filterTraceEvents(\n          [\n            {\n              name: 'StreamCompileTask',\n            } as unknown as CompleteEvent,\n            {\n              name: 'Regular',\n            } as unknown as CompleteEvent,\n          ],\n          { filterStreamingCompile: true }\n        )\n      ).toStrictEqual([expect.objectContaining({ name: 'Regular' })]);\n    });\n\n    it('should filter by duration when durMin is provided', () => {\n      expect(\n        filterTraceEvents(\n          [\n            {\n              name: 'ShortDuration',\n              dur: 5000,\n            } as unknown as CompleteEvent,\n            {\n              name: 'LongDuration',\n              dur: 15000,\n            } as unknown as CompleteEvent,\n          ],\n          { durMin: 10000 }\n        )\n      ).toStrictEqual([expect.objectContaining({ name: 'LongDuration' })]);\n    });\n\n    it('should return all events when no filters are applied', () => {\n      expect(\n        filterTraceEvents(\n          [\n            { name: 'Event1' } as unknown as CompleteEvent,\n            { name: 'Event2' } as unknown as CompleteEvent,\n          ],\n          {}\n        )\n      ).toStrictEqual([\n        expect.objectContaining({ name: 'Event1' }),\n        expect.objectContaining({ name: 'Event2' }),\n      ]);\n    });\n  });\n\n  describe('reduceTrace', () => {\n    it('should reduce trace data and return filtered data with stats', () => {\n      const result = reduceTrace(\n        JSON.stringify({\n          traceEvents: [\n            { name: 'Regular' },\n            { name: 'ResourceSendRequest', cat: 'netlog' },\n            { name: 'Animation', cat: 'blink.animations' },\n          ],\n          displayTimeUnit: 'ms',\n        }),\n        {\n          filterNetwork: true,\n          filterAnimation: true,\n        }\n      );\n\n      expect(result.stats.originalEventCount).toBe(3);\n      expect(result.stats.filteredEventCount).toBe(1);\n      expect(result.stats.removedEventCount).toBe(2);\n      expect(result.stats.originalSize).toBeGreaterThan(0);\n      expect(result.stats.cleanedSize).toBeGreaterThan(0);\n      expect(result.filteredTraceData).toContain('Regular');\n      expect(result.filteredTraceData).not.toContain('ResourceSendRequest');\n    });\n\n    it('should handle array format trace data', () => {\n      const result = reduceTrace(JSON.stringify([{ name: 'Regular' }]), {}); // Use empty options to avoid default filters\n\n      expect(result.stats.originalEventCount).toBe(1);\n      expect(result.stats.filteredEventCount).toBe(1);\n    });\n\n    it('should throw error for invalid trace data structure', () => {\n      expect(() => reduceTrace(JSON.stringify({ invalidField: [] }))).toThrow(\n        'traceEvents array not found in the trace file'\n      );\n    });\n\n    it('should apply default filter options when none provided', () => {\n      const result = reduceTrace(\n        JSON.stringify({\n          traceEvents: [{ name: 'ResourceSendRequest', cat: 'netlog' }],\n        })\n      );\n\n      expect(result.stats.filteredEventCount).toBe(0); // Network event filtered by default\n    });\n  });\n});\n","stats":{"times":{"passes":[{"parse":{"total":6.3685},"rules":{"for-direction":{"total":0.003333},"no-async-promise-executor":{"total":0.000417},"no-case-declarations":{"total":0.000417},"no-compare-neg-zero":{"total":0.001375},"no-cond-assign":{"total":0.001},"no-constant-binary-expression":{"total":0.000458},"no-constant-condition":{"total":0.001125},"no-control-regex":{"total":0.05433100000000003},"no-debugger":{"total":0.000417},"no-delete-var":{"total":0.000333},"no-dupe-else-if":{"total":0.000375},"no-duplicate-case":{"total":0.000333},"no-empty":{"total":0.012125000000000004},"no-empty-character-class":{"total":0.00025},"no-empty-pattern":{"total":0.000542},"no-empty-static-block":{"total":0.000291},"no-ex-assign":{"total":0.0005},"no-extra-boolean-cast":{"total":0.03704100000000002},"no-fallthrough":{"total":0.04900200000000004},"no-global-assign":{"total":0.018583},"no-invalid-regexp":{"total":0.03753800000000003},"no-irregular-whitespace":{"total":0.026792},"no-loss-of-precision":{"total":0.14341399999999976},"no-misleading-character-class":{"total":0.010292},"no-nonoctal-decimal-escape":{"total":0.045000000000000026},"no-octal":{"total":0.03279900000000002},"no-prototype-builtins":{"total":0.04337200000000003},"no-regex-spaces":{"total":0.1844479999999992},"no-self-assign":{"total":0.000458},"no-shadow-restricted-names":{"total":0.031376000000000015},"no-sparse-arrays":{"total":0.012246999999999996},"no-unsafe-finally":{"total":0.001583},"no-unsafe-optional-chaining":{"total":0.056799000000000044},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000458},"no-useless-backreference":{"total":0.002334},"no-useless-catch":{"total":0.000292},"no-useless-escape":{"total":0.05671700000000005},"require-yield":{"total":0.000458},"use-isnan":{"total":0.001},"valid-typeof":{"total":0.001667},"no-var":{"total":0.006584000000000002},"prefer-const":{"total":0.007543000000000002},"prefer-rest-params":{"total":0.000417},"prefer-spread":{"total":0.037879000000000024},"@typescript-eslint/ban-ts-comment":{"total":0.0195},"@typescript-eslint/no-array-constructor":{"total":0.04474400000000002},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001042},"@typescript-eslint/no-empty-object-type":{"total":0.003791},"@typescript-eslint/no-explicit-any":{"total":0.0025},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001125},"@typescript-eslint/no-misused-new":{"total":0.001333},"@typescript-eslint/no-namespace":{"total":0.002416},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000917},"@typescript-eslint/no-this-alias":{"total":0.002833},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.005792},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001083},"@typescript-eslint/no-unsafe-function-type":{"total":0.011745000000000005},"@typescript-eslint/no-unused-expressions":{"total":0.06537200000000004},"@typescript-eslint/no-unused-vars":{"total":1.161834},"@typescript-eslint/no-wrapper-object-types":{"total":0.012999000000000002},"@typescript-eslint/prefer-as-const":{"total":0.021250000000000015},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000834},"@typescript-eslint/triple-slash-reference":{"total":0.009167000000000003},"@typescript-eslint/no-non-null-assertion":{"total":0.000833},"@typescript-eslint/adjacent-overload-signatures":{"total":0.05291800000000003},"@typescript-eslint/no-empty-function":{"total":0.2076679999999999},"@typescript-eslint/no-inferrable-types":{"total":0.024782000000000002},"@typescript-eslint/no-empty-interface":{"total":0.001709},"@nx/enforce-module-boundaries":{"total":0.08870700000000001}},"fix":{"total":0},"total":14.432208}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/lib/trace/trace-event-creators.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":2.563083},"rules":{"for-direction":{"total":0.002125},"no-async-promise-executor":{"total":0.000292},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.000917},"no-cond-assign":{"total":0.001333},"no-constant-binary-expression":{"total":0.003291},"no-constant-condition":{"total":0.007207},"no-control-regex":{"total":0.009246000000000004},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.000292},"no-dupe-else-if":{"total":0.000375},"no-duplicate-case":{"total":0.000375},"no-empty":{"total":0.0026230000000000003},"no-empty-character-class":{"total":0.000209},"no-empty-pattern":{"total":0.001708},"no-empty-static-block":{"total":0.00025},"no-ex-assign":{"total":0.000375},"no-extra-boolean-cast":{"total":0.00275},"no-fallthrough":{"total":0.020455000000000004},"no-global-assign":{"total":0.022332},"no-invalid-regexp":{"total":0.0022080000000000003},"no-irregular-whitespace":{"total":0.0095},"no-loss-of-precision":{"total":0.013460000000000001},"no-misleading-character-class":{"total":0.007458},"no-nonoctal-decimal-escape":{"total":0.017375000000000005},"no-octal":{"total":0.006209},"no-prototype-builtins":{"total":0.002666},"no-regex-spaces":{"total":0.012331000000000003},"no-self-assign":{"total":0.000583},"no-shadow-restricted-names":{"total":0.010206999999999997},"no-sparse-arrays":{"total":0.0007080000000000001},"no-unsafe-finally":{"total":0.0063360000000000005},"no-unsafe-optional-chaining":{"total":0.006542999999999999},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000375},"no-useless-backreference":{"total":0.002292},"no-useless-catch":{"total":0.000209},"no-useless-escape":{"total":0.01845900000000001},"require-yield":{"total":0.004333000000000002},"use-isnan":{"total":0.001},"valid-typeof":{"total":0.0014579999999999999},"no-var":{"total":0.0015},"prefer-const":{"total":0.0023330000000000004},"prefer-rest-params":{"total":0.006791999999999999},"prefer-spread":{"total":0.0019600000000000004},"@typescript-eslint/ban-ts-comment":{"total":0.009125000000000001},"@typescript-eslint/no-array-constructor":{"total":0.003166},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000917},"@typescript-eslint/no-empty-object-type":{"total":0.0034149999999999996},"@typescript-eslint/no-explicit-any":{"total":0.002083},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000959},"@typescript-eslint/no-misused-new":{"total":0.001166},"@typescript-eslint/no-namespace":{"total":0.002084},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000917},"@typescript-eslint/no-this-alias":{"total":0.002458},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.007834},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001417},"@typescript-eslint/no-unsafe-function-type":{"total":0.0037939999999999996},"@typescript-eslint/no-unused-expressions":{"total":0.007333},"@typescript-eslint/no-unused-vars":{"total":0.569917},"@typescript-eslint/no-wrapper-object-types":{"total":0.004456999999999999},"@typescript-eslint/prefer-as-const":{"total":0.0018750000000000004},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000792},"@typescript-eslint/triple-slash-reference":{"total":0.0066240000000000005},"@typescript-eslint/no-non-null-assertion":{"total":0.000792},"@typescript-eslint/adjacent-overload-signatures":{"total":0.017164000000000006},"@typescript-eslint/no-empty-function":{"total":0.04758200000000001},"@typescript-eslint/no-inferrable-types":{"total":0.010377000000000003},"@typescript-eslint/no-empty-interface":{"total":0.0015},"@nx/enforce-module-boundaries":{"total":0.062292}},"fix":{"total":0},"total":5.111}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/lib/trace/trace-event-creators.unit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":2.812875},"rules":{"for-direction":{"total":0.002125},"no-async-promise-executor":{"total":0.00025},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.000834},"no-cond-assign":{"total":0.000833},"no-constant-binary-expression":{"total":0.000292},"no-constant-condition":{"total":0.000875},"no-control-regex":{"total":0.029335000000000017},"no-debugger":{"total":0.000334},"no-delete-var":{"total":0.000209},"no-dupe-else-if":{"total":0.000375},"no-duplicate-case":{"total":0.000292},"no-empty":{"total":0.004334000000000002},"no-empty-character-class":{"total":0.000209},"no-empty-pattern":{"total":0.000375},"no-empty-static-block":{"total":0.00025},"no-ex-assign":{"total":0.000875},"no-extra-boolean-cast":{"total":0.014586000000000007},"no-fallthrough":{"total":0.023882000000000014},"no-global-assign":{"total":0.02175},"no-invalid-regexp":{"total":0.018790000000000008},"no-irregular-whitespace":{"total":0.012875000000000001},"no-loss-of-precision":{"total":0.10470900000000008},"no-misleading-character-class":{"total":0.013916999999999999},"no-nonoctal-decimal-escape":{"total":0.023672000000000016},"no-octal":{"total":0.018661000000000007},"no-prototype-builtins":{"total":0.018332000000000008},"no-regex-spaces":{"total":0.06882600000000004},"no-self-assign":{"total":0.000417},"no-shadow-restricted-names":{"total":0.012667000000000006},"no-sparse-arrays":{"total":0.003832},"no-unsafe-finally":{"total":0.000291},"no-unsafe-optional-chaining":{"total":0.022711000000000012},"no-unused-labels":{"total":0.0005},"no-unused-private-class-members":{"total":0.000333},"no-useless-backreference":{"total":0.004083},"no-useless-catch":{"total":0.000292},"no-useless-escape":{"total":0.032586000000000025},"require-yield":{"total":0.000459},"use-isnan":{"total":0.001333},"valid-typeof":{"total":0.001833},"no-var":{"total":0.0019590000000000007},"prefer-const":{"total":0.003042000000000001},"prefer-rest-params":{"total":0.000375},"prefer-spread":{"total":0.012080999999999998},"@typescript-eslint/ban-ts-comment":{"total":0.00725},"@typescript-eslint/no-array-constructor":{"total":0.011916000000000005},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000959},"@typescript-eslint/no-empty-object-type":{"total":0.002375},"@typescript-eslint/no-explicit-any":{"total":0.001833},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000792},"@typescript-eslint/no-misused-new":{"total":0.000833},"@typescript-eslint/no-namespace":{"total":0.001792},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000875},"@typescript-eslint/no-this-alias":{"total":0.00225},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.003792},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.000917},"@typescript-eslint/no-unsafe-function-type":{"total":0.003126},"@typescript-eslint/no-unused-expressions":{"total":0.03304300000000002},"@typescript-eslint/no-unused-vars":{"total":1.636375},"@typescript-eslint/no-wrapper-object-types":{"total":0.0035389999999999996},"@typescript-eslint/prefer-as-const":{"total":0.0036679999999999994},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000709},"@typescript-eslint/triple-slash-reference":{"total":0.006501},"@typescript-eslint/no-non-null-assertion":{"total":0.00075},"@typescript-eslint/adjacent-overload-signatures":{"total":0.023166000000000006},"@typescript-eslint/no-empty-function":{"total":0.07512800000000001},"@typescript-eslint/no-inferrable-types":{"total":0.01262},"@typescript-eslint/no-empty-interface":{"total":0.001583},"@nx/enforce-module-boundaries":{"total":0.26891600000000004}},"fix":{"total":0},"total":7.506875}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/lib/trace/traceprofile.types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[920,923],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[920,923],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1288,1291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1288,1291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1352,1355],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1352,1355],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1541,1544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1541,1544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":147,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3805,3808],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3805,3808],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":303,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":303,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6761,6764],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6761,6764],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":313,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":313,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7038,7041],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7038,7041],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":328,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":328,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7288,7291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7288,7291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":357,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":357,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7865,7868],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7865,7868],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":364,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":364,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8003,8006],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8003,8006],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// TypeScript definitions for Chrome DevTools Trace Event format\n\nimport { CPUProfile } from './cpu/cpuprofile.types';\n\nexport type TraceFile = TraceEvent[] | TraceEventContainer;\n\nexport interface TraceEventContainer {\n  traceEvents: TraceEvent[];\n  displayTimeUnit?: 'ms' | 'ns';\n  systemTraceEvents?: string;\n  metadata?: TraceMetadata;\n  stackFrames?: Record<string, StackFrame>;\n  samples?: Sample[];\n  controllerTraceDataKey?: string;\n  powerTraceAsString?: string;\n}\n\n/**\n * Top-level metadata for a trace, as found in `.cpuprofile` and DevTools exports.\n */\nexport interface TraceMetadata {\n  source: string; // e.g. \"DevTools\"\n  startTime: string; // ISO timestamp when trace recorded\n  hardwareConcurrency?: number; // Number of logical processors\n  dataOrigin?: string; // Origin of trace events, e.g. \"TraceEvents\"\n  modifications?: Modifications; // Details of any UI or data modifications\n  [key: string]: any; // Allow additional custom metadata\n}\n\n/**\n * Modifications made to trace data or UI in DevTools export\n */\nexport interface Modifications {\n  entriesModifications: EntriesModifications;\n  initialBreadcrumb: InitialBreadcrumb;\n  annotations: Annotations;\n}\n\n/** Hidden or expandable entries information */\nexport interface EntriesModifications {\n  hiddenEntries: any[]; // IDs or indexes of hidden entries\n  expandableEntries: any[]; // IDs or indexes of expandable entries\n}\n\n/** Initial breadcrumb information for time ranges and window */\nexport interface InitialBreadcrumb {\n  window: BreadcrumbWindow;\n  child: any | null;\n}\n\n/** Time window bounds (min, max) in trace time units (e.g. microseconds) */\nexport interface BreadcrumbWindow {\n  min: number;\n  max: number;\n  range: number;\n}\n\n/**\n * Custom label for a specific trace entry\n */\nexport interface EntryLabel {\n  entryId: number | string; // ID or index of the trace entry\n  label: string; // Label text for the entry\n  color?: string; // Optional display color for the label\n}\n\n/**\n * A time range annotated with a label\n */\nexport interface LabelledTimeRange {\n  startTime: number; // Start timestamp of the range (microseconds)\n  endTime: number; // End timestamp of the range (microseconds)\n  label: string; // Annotation label for the time range\n  color?: string; // Optional display color for the range\n}\n\n/**\n * Link or relation between two trace entries\n */\nexport interface EntryLink {\n  fromEntryId: number | string; // Source entry ID for the link\n  toEntryId: number | string; // Target entry ID for the link\n  linkType?: string; // Optional type or description of the link\n}\n\n/** Annotations such as labels and links between entries */\nexport interface Annotations {\n  entryLabels: EntryLabel[]; // Custom labels for entries\n  labelledTimeRanges: LabelledTimeRange[]; // Time ranges annotated with labels\n  linksBetweenEntries: EntryLink[]; // Links or relations between entries\n}\n\nexport type Phase =\n  // Duration events (begin/end) and complete events:\n  | 'B'\n  | 'E'\n  | 'X'\n  // Instant events:\n  | 'I'\n  // Counter events:\n  | 'C'\n  // Async events (nestable):\n  | 'b'\n  | 'n'\n  | 'e'\n  // Flow events:\n  | 's'\n  | 't'\n  | 'f'\n  // Sample events:\n  | 'P'\n  // Object events:\n  | 'N'\n  | 'O'\n  | 'D'\n  // Metadata events:\n  | 'M'\n  // Memory dump events:\n  | 'V'\n  | 'v'\n  // Mark events:\n  | 'R'\n  // Clock sync events:\n  | 'c'\n  // Context events:\n  | '('\n  | ')'\n  // ID linking events:\n  | '=';\n\n/** Scope values for instant events (ph='i') */\nexport type InstantScope = 't' | 'p' | 'g';\n\n/** Category string for trace events */\nexport type Category<T extends string = string> = `${\n  | 'disabled-by-default-'\n  | ''}${T}`;\n\nexport interface TraceEventBase {\n  ph: Phase;\n  name?: string;\n  cat?: Category;\n  pid?: number;\n  tid?: number;\n  ts: number;\n  tts?: number;\n  args?: Record<string, any>;\n  dur?: number;\n  tdur?: number;\n  sf?: string | number;\n  stack?: Array<string | number>;\n  cname?: string;\n}\n\n/** Event identifier (for async, object, flow events, etc.) */\nexport type EventID = string | number;\n\nexport interface EventID2 {\n  local?: string;\n  global?: string;\n}\n\nexport interface DurationBeginEvent extends TraceEventBase {\n  ph: 'B';\n  pid: number;\n  tid: number;\n}\n\nexport interface DurationEndEvent extends TraceEventBase {\n  ph: 'E';\n  pid: number;\n  tid: number;\n}\n\nexport interface CompleteEvent extends TraceEventBase {\n  ph: 'X';\n  pid: number;\n  tid: number;\n  name: string;\n  dur: number;\n  tdur?: number;\n}\n\nexport interface InstantEvent extends TraceEventBase {\n  ph: 'I';\n  dur: 0;\n  pid: number;\n  tid: number;\n  name: string;\n  s?: InstantScope;\n}\n\nexport interface CounterEvent extends TraceEventBase {\n  ph: 'C';\n  name: string;\n  id?: EventID;\n  args: Record<string, number>;\n}\n\nexport interface AsyncBeginEvent extends TraceEventBase {\n  ph: 'b';\n  name: string;\n  id?: EventID;\n  id2?: EventID2;\n  scope?: string;\n}\n\nexport interface AsyncInstantEvent extends TraceEventBase {\n  ph: 'n';\n  name: string;\n  id?: EventID;\n  id2?: EventID2;\n  scope?: string;\n}\n\nexport interface AsyncEndEvent extends TraceEventBase {\n  ph: 'e';\n  name?: string;\n  id?: EventID;\n  id2?: EventID2;\n  scope?: string;\n}\n\nexport interface FlowStartEvent extends TraceEventBase {\n  ph: 's';\n  name: string;\n  id?: EventID;\n  id2?: EventID2;\n}\n\nexport interface FlowStepEvent extends TraceEventBase {\n  ph: 't';\n  name: string;\n  id?: EventID;\n  id2?: EventID2;\n}\n\nexport interface FlowEndEvent extends TraceEventBase {\n  ph: 'f';\n  name: string;\n  id?: EventID;\n}\n\nexport interface SampleEvent extends TraceEventBase {\n  ph: 'P';\n  name: string;\n  id?: EventID;\n}\n\n/**\n * Frame information for TracingStartedInBrowserEvent\n */\nexport interface Frame {\n  frame: string;\n  isInPrimaryMainFrame: boolean;\n  isOutermostMainFrame: boolean;\n  name: string;\n  processId: number;\n  url: string;\n}\n\n/**\n * Event marking that tracing has started in the browser.\n */\nexport interface TracingStartedInBrowserEvent extends TraceEventBase {\n  ph: 'I';\n  cat: Category<'devtools.timeline'>;\n  name: 'TracingStartedInBrowser';\n  pid: number;\n  tid: number;\n  ts: number;\n  s: InstantScope;\n  args: {\n    data: {\n      frameTreeNodeId: number;\n      frames: Frame[];\n      persistentIds: true;\n    };\n  };\n}\n\nexport interface CpuProfilerStartProfilingEvent extends TraceEventBase {\n  cat: Category<'v8'>;\n  ph: 'X';\n  pid: number;\n  tid: number;\n  name: 'CpuProfiler::StartProfiling';\n  ts: number;\n}\n\nexport interface CpuProfilerStopProfilingEvent extends TraceEventBase {\n  cat: Category<'v8'>;\n  ph: 'X';\n  pid: number;\n  tid: number;\n  name: 'CpuProfiler::StopProfiling';\n  ts: number;\n}\n\nexport interface ProfileEvent extends SampleEvent {\n  cat: Category<'v8.cpu_profiler'>;\n  name: 'Profile';\n  args: { data: { startTime: number; [key: string]: any } };\n}\n\nexport interface ProfileChunkEvent extends SampleEvent {\n  cat: Category<'v8.cpu_profiler'>;\n  name: 'ProfileChunk';\n  args: {\n    data: {\n      cpuProfile: Omit<CPUProfile, 'timeDeltas' | 'startTime' | 'endTime'>;\n      timeDeltas?: number[];\n      [key: string]: any;\n    };\n  };\n}\n\nexport interface ObjectCreatedEvent extends TraceEventBase {\n  ph: 'N';\n  name: string;\n  id: EventID;\n}\n\nexport interface ObjectSnapshotEvent extends TraceEventBase {\n  ph: 'O';\n  name: string;\n  id: EventID;\n  args: { snapshot: any };\n}\n\nexport interface ObjectDestroyedEvent extends TraceEventBase {\n  ph: 'D';\n  name: string;\n  id: EventID;\n}\n\ninterface MetadataEventBase extends TraceEventBase {\n  ph: 'M';\n  cat: '__metadata';\n  pid: number;\n  tid: number;\n}\n\nexport interface ProcessNameEvent extends MetadataEventBase {\n  name: 'process_name';\n  args: { name: string };\n}\n\nexport interface ThreadNameEvent extends MetadataEventBase {\n  name: 'thread_name';\n  args: { name: string };\n}\n\nexport interface GlobalMemoryDumpEvent extends TraceEventBase {\n  ph: 'V';\n  id: EventID;\n  args: Record<string, any>;\n}\n\nexport interface ProcessMemoryDumpEvent extends TraceEventBase {\n  ph: 'v';\n  pid: number;\n  id: EventID;\n  args: Record<string, any>;\n}\n\nexport interface MarkEvent extends TraceEventBase {\n  ph: 'R';\n  name: string;\n}\n\nexport interface ClockSyncEvent extends TraceEventBase {\n  ph: 'c';\n  name: 'clock_sync';\n  args: { sync_id: string; issue_ts?: number };\n}\n\nexport interface ContextEnterEvent extends TraceEventBase {\n  ph: '(';\n  name: string;\n  id: EventID;\n}\n\nexport interface ContextLeaveEvent extends TraceEventBase {\n  ph: ')';\n  name: string;\n  id: EventID;\n}\n\nexport interface IDLinkEvent extends TraceEventBase {\n  ph: '=';\n  name?: string;\n  id: EventID;\n  args: { linked_id: EventID };\n}\n\nexport interface ProcessLabelsEvent extends MetadataEventBase {\n  name: 'process_labels';\n  args: { labels: string };\n}\n\nexport interface ProcessSortIndexEvent extends MetadataEventBase {\n  name: 'process_sort_index';\n  args: { sort_index: number };\n}\n\nexport interface ThreadSortIndexEvent extends MetadataEventBase {\n  name: 'thread_sort_index';\n  args: { sort_index: number };\n}\n\nexport type TraceEvent =\n  | DurationBeginEvent\n  | DurationEndEvent\n  | CompleteEvent\n  | InstantEvent\n  | CounterEvent\n  | AsyncBeginEvent\n  | AsyncInstantEvent\n  | AsyncEndEvent\n  | FlowStartEvent\n  | FlowStepEvent\n  | FlowEndEvent\n  | SampleEvent\n  | TracingStartedInBrowserEvent\n  | CpuProfilerStartProfilingEvent\n  | CpuProfilerStopProfilingEvent\n  | ProfileEvent\n  | ProfileChunkEvent\n  | ObjectCreatedEvent\n  | ObjectSnapshotEvent\n  | ObjectDestroyedEvent\n  | ProcessNameEvent\n  | ProcessLabelsEvent\n  | ProcessSortIndexEvent\n  | ThreadNameEvent\n  | ThreadSortIndexEvent\n  | GlobalMemoryDumpEvent\n  | ProcessMemoryDumpEvent\n  | MarkEvent\n  | ClockSyncEvent\n  | ContextEnterEvent\n  | ContextLeaveEvent\n  | IDLinkEvent;\n\nexport interface StackFrame {\n  name?: string;\n  category?: string;\n  file?: string;\n  line?: number;\n  column?: number;\n  parent?: string;\n}\n\nexport interface Sample {\n  cpu?: number;\n  name: string;\n  ts: number;\n  pid: number;\n  tid: number;\n  weight?: number;\n  sf?: string;\n  stack?: string[];\n}\n","stats":{"times":{"passes":[{"parse":{"total":5.255709},"rules":{"for-direction":{"total":0.002334},"no-async-promise-executor":{"total":0.000291},"no-case-declarations":{"total":0.000375},"no-compare-neg-zero":{"total":0.001167},"no-cond-assign":{"total":0.000958},"no-constant-binary-expression":{"total":0.000333},"no-constant-condition":{"total":0.001125},"no-control-regex":{"total":0.013581000000000006},"no-debugger":{"total":0.000292},"no-delete-var":{"total":0.000291},"no-dupe-else-if":{"total":0.000417},"no-duplicate-case":{"total":0.000333},"no-empty":{"total":0.000541},"no-empty-character-class":{"total":0.000209},"no-empty-pattern":{"total":0.000458},"no-empty-static-block":{"total":0.000334},"no-ex-assign":{"total":0.000417},"no-extra-boolean-cast":{"total":0.001459},"no-fallthrough":{"total":0.003416},"no-global-assign":{"total":0.018833},"no-invalid-regexp":{"total":0.00075},"no-irregular-whitespace":{"total":0.015958},"no-loss-of-precision":{"total":0.009077000000000002},"no-misleading-character-class":{"total":0.008958},"no-nonoctal-decimal-escape":{"total":0.012709000000000007},"no-octal":{"total":0.009001},"no-prototype-builtins":{"total":0.000542},"no-regex-spaces":{"total":0.008506999999999999},"no-self-assign":{"total":0.0005},"no-shadow-restricted-names":{"total":0.0016250000000000001},"no-sparse-arrays":{"total":0.000292},"no-unsafe-finally":{"total":0.000375},"no-unsafe-optional-chaining":{"total":0.000875},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.00075},"no-useless-backreference":{"total":0.002375},"no-useless-catch":{"total":0.000209},"no-useless-escape":{"total":0.01966200000000001},"require-yield":{"total":0.000417},"use-isnan":{"total":0.001084},"valid-typeof":{"total":0.001458},"no-var":{"total":0.000333},"prefer-const":{"total":0.001667},"prefer-rest-params":{"total":0.000375},"prefer-spread":{"total":0.000292},"@typescript-eslint/ban-ts-comment":{"total":0.025458},"@typescript-eslint/no-array-constructor":{"total":0.001584},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001167},"@typescript-eslint/no-empty-object-type":{"total":0.01716600000000001},"@typescript-eslint/no-explicit-any":{"total":0.052293},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001},"@typescript-eslint/no-misused-new":{"total":0.001042},"@typescript-eslint/no-namespace":{"total":0.002208},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001125},"@typescript-eslint/no-this-alias":{"total":0.002541},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.005626},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.032458000000000015},"@typescript-eslint/no-unsafe-function-type":{"total":0.039625000000000014},"@typescript-eslint/no-unused-expressions":{"total":0.008125},"@typescript-eslint/no-unused-vars":{"total":0.6909989999999999},"@typescript-eslint/no-wrapper-object-types":{"total":0.047869000000000016},"@typescript-eslint/prefer-as-const":{"total":0.000875},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000958},"@typescript-eslint/triple-slash-reference":{"total":0.055458},"@typescript-eslint/no-non-null-assertion":{"total":0.000958},"@typescript-eslint/adjacent-overload-signatures":{"total":0.11116800000000004},"@typescript-eslint/no-empty-function":{"total":0.005208},"@typescript-eslint/no-inferrable-types":{"total":0.00425},"@typescript-eslint/no-empty-interface":{"total":0.009957000000000002},"@nx/enforce-module-boundaries":{"total":0.04212600000000001}},"fix":{"total":0},"total":8.511125}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/lib/trace/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":2.4635},"rules":{"for-direction":{"total":0.00225},"no-async-promise-executor":{"total":0.000333},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.006375999999999999},"no-cond-assign":{"total":0.0019979999999999998},"no-constant-binary-expression":{"total":0.021288},"no-constant-condition":{"total":0.00696},"no-control-regex":{"total":0.013457000000000004},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.00025},"no-dupe-else-if":{"total":0.002958},"no-duplicate-case":{"total":0.000333},"no-empty":{"total":0.002123},"no-empty-character-class":{"total":0.000292},"no-empty-pattern":{"total":0.002166},"no-empty-static-block":{"total":0.000375},"no-ex-assign":{"total":0.000333},"no-extra-boolean-cast":{"total":0.005373},"no-fallthrough":{"total":0.027329000000000013},"no-global-assign":{"total":0.018167000000000003},"no-invalid-regexp":{"total":0.004751000000000002},"no-irregular-whitespace":{"total":0.010374},"no-loss-of-precision":{"total":0.01308},"no-misleading-character-class":{"total":0.0085},"no-nonoctal-decimal-escape":{"total":0.004959999999999999},"no-octal":{"total":0.0035830000000000007},"no-prototype-builtins":{"total":0.008875999999999998},"no-regex-spaces":{"total":0.019499000000000002},"no-self-assign":{"total":0.003292},"no-shadow-restricted-names":{"total":0.013877000000000006},"no-sparse-arrays":{"total":0.0024159999999999997},"no-unsafe-finally":{"total":0.005955999999999999},"no-unsafe-optional-chaining":{"total":0.018417000000000006},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000334},"no-useless-backreference":{"total":0.002291},"no-useless-catch":{"total":0.000208},"no-useless-escape":{"total":0.011916000000000001},"require-yield":{"total":0.003207},"use-isnan":{"total":0.018498},"valid-typeof":{"total":0.001458},"no-var":{"total":0.0031240000000000013},"prefer-const":{"total":0.009999000000000003},"prefer-rest-params":{"total":0.0028339999999999997},"prefer-spread":{"total":0.004498},"@typescript-eslint/ban-ts-comment":{"total":0.014124999999999999},"@typescript-eslint/no-array-constructor":{"total":0.005666000000000001},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000959},"@typescript-eslint/no-empty-object-type":{"total":0.003376},"@typescript-eslint/no-explicit-any":{"total":0.002041},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000917},"@typescript-eslint/no-misused-new":{"total":0.000958},"@typescript-eslint/no-namespace":{"total":0.00175},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001},"@typescript-eslint/no-this-alias":{"total":0.002167},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.004417},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001042},"@typescript-eslint/no-unsafe-function-type":{"total":0.004206},"@typescript-eslint/no-unused-expressions":{"total":0.012626000000000002},"@typescript-eslint/no-unused-vars":{"total":0.913042},"@typescript-eslint/no-wrapper-object-types":{"total":0.004582},"@typescript-eslint/prefer-as-const":{"total":0.004626000000000002},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000709},"@typescript-eslint/triple-slash-reference":{"total":0.007251},"@typescript-eslint/no-non-null-assertion":{"total":0.001},"@typescript-eslint/adjacent-overload-signatures":{"total":0.018793000000000004},"@typescript-eslint/no-empty-function":{"total":0.04258500000000001},"@typescript-eslint/no-inferrable-types":{"total":0.011294000000000002},"@typescript-eslint/no-empty-interface":{"total":0.001625},"@nx/enforce-module-boundaries":{"total":0.061417}},"fix":{"total":0},"total":6.863125}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/lib/trace/utils.unit.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":456,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":456,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13799,13802],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13799,13802],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":457,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":457,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13828,13831],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13828,13831],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":810,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":810,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23749,23752],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23749,23752],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, expect, it } from 'vitest';\nimport {\n  cpuProfileToTraceProfileEvents,\n  sortTraceEvents,\n  cpuProfilesToTraceFile,\n  smoshCpuProfiles,\n} from './utils';\nimport { CPUProfile, CpuProfileInfo } from '../cpu/cpuprofile.types';\nimport { TraceEvent, TraceEventContainer } from './traceprofile.types';\nimport * as pyramideProfile from '../../../mocks/fixtures/minimal/pyramide.cpuprofile.json';\nimport * as stairUpProfile from '../../../mocks/fixtures/minimal/stair-up.cpuprofile.json';\n\ndescribe('sortTraceEvents', () => {\n  it('should sort meta events before other events, then by timestamp (comprehensive)', () => {\n    const events: TraceEvent[] = [\n      { ph: 'X', ts: 100 } as unknown as TraceEvent,\n      { ph: 'M', ts: 50 } as unknown as TraceEvent,\n      { ph: 'I', ts: 20 } as unknown as TraceEvent,\n      { ph: 'M', ts: 10 } as unknown as TraceEvent,\n    ];\n\n    expect(sortTraceEvents(events)).toStrictEqual([\n      expect.objectContaining({ ph: 'M', ts: 10 }),\n      expect.objectContaining({ ph: 'M', ts: 50 }),\n      expect.objectContaining({ ph: 'I', ts: 20 }),\n      expect.objectContaining({ ph: 'X', ts: 100 }),\n    ]);\n  });\n\n  it('should prioritize metadata events (ph: M) over non-metadata events regardless of timestamp', () => {\n    const events: TraceEvent[] = [\n      { ph: 'X', ts: 5 } as unknown as TraceEvent,\n      { ph: 'M', ts: 200 } as unknown as TraceEvent,\n      { ph: 'I', ts: 1 } as unknown as TraceEvent,\n      { ph: 'M', ts: 100 } as unknown as TraceEvent,\n    ];\n\n    expect(sortTraceEvents(events)).toStrictEqual([\n      expect.objectContaining({ ph: 'M', ts: 100 }),\n      expect.objectContaining({ ph: 'M', ts: 200 }),\n      expect.objectContaining({ ph: 'I', ts: 1 }),\n      expect.objectContaining({ ph: 'X', ts: 5 }),\n    ]);\n  });\n\n  it('should sort metadata events (ph: M) by timestamp', () => {\n    const events: TraceEvent[] = [\n      { ph: 'M', ts: 50 } as unknown as TraceEvent,\n      { ph: 'M', ts: 10 } as unknown as TraceEvent,\n      { ph: 'M', ts: 100 } as unknown as TraceEvent,\n    ];\n\n    expect(sortTraceEvents(events)).toStrictEqual([\n      expect.objectContaining({ ph: 'M', ts: 10 }),\n      expect.objectContaining({ ph: 'M', ts: 50 }),\n      expect.objectContaining({ ph: 'M', ts: 100 }),\n    ]);\n  });\n\n  it('should sort non-metadata events by timestamp', () => {\n    const events: TraceEvent[] = [\n      { ph: 'X', ts: 50 } as unknown as TraceEvent,\n      { ph: 'I', ts: 10 } as unknown as TraceEvent,\n      { ph: 'B', ts: 100 } as unknown as TraceEvent,\n      { ph: 'E', ts: 5 } as unknown as TraceEvent,\n    ];\n\n    expect(sortTraceEvents(events)).toStrictEqual([\n      expect.objectContaining({ ph: 'E', ts: 5 }),\n      expect.objectContaining({ ph: 'I', ts: 10 }),\n      expect.objectContaining({ ph: 'X', ts: 50 }),\n      expect.objectContaining({ ph: 'B', ts: 100 }),\n    ]);\n  });\n});\n\ndescribe('cpuProfileToTraceProfileEvents', () => {\n  it('should convert CPUProfile to TraceEvent array', () => {\n    const cpuProfile: CPUProfile = {\n      nodes: [\n        {\n          id: 1,\n          callFrame: {\n            functionName: 'fn',\n            scriptId: '0',\n            url: '',\n            lineNumber: -1,\n            columnNumber: -1,\n          },\n          children: [],\n        },\n      ],\n      samples: [1],\n      timeDeltas: [10],\n      startTime: 100,\n      endTime: 200,\n    };\n\n    expect(\n      cpuProfileToTraceProfileEvents(cpuProfile, { pid: 1, tid: 2 })\n    ).toStrictEqual(\n      expect.arrayContaining([\n        expect.objectContaining({\n          name: 'CpuProfiler::StartProfiling',\n        }),\n        expect.objectContaining({\n          name: 'Profile',\n        }),\n        expect.objectContaining({\n          name: 'ProfileChunk',\n          args: {\n            data: {\n              cpuProfile: {\n                nodes: cpuProfile.nodes,\n                samples: cpuProfile.samples,\n              },\n              timeDeltas: cpuProfile.timeDeltas,\n            },\n          },\n        }),\n        expect.objectContaining({\n          name: 'CpuProfiler::StopProfiling',\n        }),\n      ])\n    );\n  });\n\n  it('should use sequence if provided', () => {\n    const cpuProfile: CPUProfile = {\n      nodes: [],\n      startTime: 0,\n      endTime: 1,\n      samples: [],\n      timeDeltas: [],\n    };\n\n    const events = cpuProfileToTraceProfileEvents(cpuProfile, {\n      pid: 1,\n      tid: 2,\n      sequence: 3,\n    });\n    const expectedId = `0x123`;\n\n    expect(events).toStrictEqual(\n      expect.arrayContaining([\n        expect.objectContaining({ id: expectedId, name: 'Profile' }),\n        expect.objectContaining({ id: expectedId, name: 'ProfileChunk' }),\n      ])\n    );\n  });\n\n  it('should use startTime = 1 if startTime is undefined', () => {\n    const cpuProfileUndefinedStartTime: CPUProfile = {\n      nodes: [],\n      // @ts-expect-error Testing with undefined startTime, which the function should default to 1\n      startTime: undefined,\n      endTime: 1,\n      samples: [],\n      timeDeltas: [],\n    };\n\n    const eventsUndefinedStartTime = cpuProfileToTraceProfileEvents(\n      cpuProfileUndefinedStartTime,\n      { pid: 1, tid: 2 }\n    );\n\n    expect(eventsUndefinedStartTime).toStrictEqual(\n      expect.arrayContaining([\n        expect.objectContaining({ ts: 1, name: 'CpuProfiler::StartProfiling' }),\n        expect.objectContaining({ ts: 1, name: 'Profile' }),\n        expect.objectContaining({ ts: 1, name: 'ProfileChunk' }),\n      ])\n    );\n  });\n\n  it('should use actual startTime value when it is 0', () => {\n    const cpuProfileZeroStartTime: CPUProfile = {\n      nodes: [],\n      startTime: 0,\n      endTime: 1,\n      samples: [],\n      timeDeltas: [],\n    };\n\n    const eventsZeroStartTime = cpuProfileToTraceProfileEvents(\n      cpuProfileZeroStartTime,\n      { pid: 1, tid: 2 }\n    );\n\n    expect(eventsZeroStartTime).toStrictEqual(\n      expect.arrayContaining([\n        expect.objectContaining({ ts: 0, name: 'CpuProfiler::StartProfiling' }),\n        expect.objectContaining({ ts: 0, name: 'Profile' }),\n        expect.objectContaining({ ts: 0, name: 'ProfileChunk' }),\n      ])\n    );\n  });\n});\n\ndescribe('cpuProfilesToTraceFile', () => {\n  const createMockCpuProfileInfo = (\n    overrides: Omit<Partial<CpuProfileInfo>, 'cpuProfile'> &\n      Pick<CpuProfileInfo, 'cpuProfile'>\n  ): CpuProfileInfo => ({\n    pid: 1,\n    tid: 0,\n    startDate: new Date('2023-01-01T00:00:00Z'),\n    file: '/test/profile.cpuprofile',\n    ...overrides,\n  });\n\n  it('should convert single CPU profile to trace file', () => {\n    const result = cpuProfilesToTraceFile([\n      createMockCpuProfileInfo({\n        cpuProfile: pyramideProfile as CPUProfile,\n      }),\n    ]) as TraceEventContainer;\n\n    expect(result).toMatchObject({\n      traceEvents: expect.arrayContaining([\n        expect.objectContaining({\n          name: 'CpuProfiler::StartProfiling',\n          pid: 1,\n          tid: 0,\n        }),\n        expect.objectContaining({\n          name: 'Profile',\n          pid: 1,\n          tid: 0,\n        }),\n        expect.objectContaining({\n          name: 'ProfileChunk',\n          pid: 1,\n          tid: 0,\n        }),\n        expect.objectContaining({\n          name: 'CpuProfiler::StopProfiling',\n          pid: 1,\n          tid: 0,\n        }),\n      ]),\n      metadata: expect.objectContaining({\n        source: 'DevTools',\n        startTime: expect.any(String),\n        hardwareConcurrency: 1,\n        dataOrigin: 'TraceEvents',\n      }),\n    });\n  });\n\n  it('should convert multiple CPU profiles to trace file', () => {\n    const pyramideProfileInfo = createMockCpuProfileInfo({\n      cpuProfile: pyramideProfile as CPUProfile,\n    });\n    const stairUpProfileInfo = createMockCpuProfileInfo({\n      cpuProfile: stairUpProfile as CPUProfile,\n      pid: 2,\n      tid: 1,\n    });\n    let result = cpuProfilesToTraceFile([\n      pyramideProfileInfo,\n      stairUpProfileInfo,\n    ]) as TraceEventContainer;\n\n    expect(result.traceEvents).toHaveLength(10);\n    expect(result.traceEvents).toEqual(\n      expect.arrayContaining([\n        // pyramideProfileInfo events\n        expect.objectContaining({\n          name: 'process_name',\n          pid: 1,\n          tid: 0,\n          args: { name: 'P:1, T:0' },\n        }),\n        expect.objectContaining({\n          name: 'CpuProfiler::StartProfiling',\n          pid: 1,\n          tid: 0,\n        }),\n        expect.objectContaining({ name: 'Profile', pid: 1, tid: 0 }),\n        expect.objectContaining({ name: 'ProfileChunk', pid: 1, tid: 0 }),\n        expect.objectContaining({\n          name: 'CpuProfiler::StopProfiling',\n          pid: 1,\n          tid: 0,\n        }),\n        // stairUpProfileInfo events\n        expect.objectContaining({\n          name: 'process_name',\n          pid: 2,\n          tid: 1,\n          args: { name: 'P:2, T:1' },\n        }),\n        expect.objectContaining({\n          name: 'CpuProfiler::StartProfiling',\n          pid: 2,\n          tid: 1,\n        }),\n        expect.objectContaining({ name: 'Profile', pid: 2, tid: 1 }),\n        expect.objectContaining({ name: 'ProfileChunk', pid: 2, tid: 1 }),\n        expect.objectContaining({\n          name: 'CpuProfiler::StopProfiling',\n          pid: 2,\n          tid: 1,\n        }),\n      ])\n    );\n\n    result = cpuProfilesToTraceFile([pyramideProfileInfo, stairUpProfileInfo], {\n      smosh: 'all',\n    }) as TraceEventContainer;\n\n    expect(result.traceEvents).toHaveLength(10);\n    expect(result.traceEvents).toEqual(\n      expect.arrayContaining([\n        // All events should have pid: 1, tid: 0 (from mainProfileInfo)\n        expect.objectContaining({\n          name: 'process_name',\n          pid: 1,\n          tid: 0,\n          args: { name: 'P:1, T:0' },\n        }),\n        expect.objectContaining({\n          name: 'CpuProfiler::StartProfiling',\n          pid: 1,\n          tid: 0,\n        }),\n        expect.objectContaining({ name: 'Profile', pid: 1, tid: 0 }),\n        expect.objectContaining({ name: 'ProfileChunk', pid: 1, tid: 0 }),\n        expect.objectContaining({\n          name: 'CpuProfiler::StopProfiling',\n          pid: 1,\n          tid: 0,\n        }),\n        expect.objectContaining({\n          name: 'process_name',\n          pid: 1,\n          tid: 0,\n          args: { name: 'P:1, T:0' },\n        }),\n        expect.objectContaining({\n          name: 'CpuProfiler::StartProfiling',\n          pid: 1,\n          tid: 0,\n        }),\n        expect.objectContaining({ name: 'Profile', pid: 1, tid: 0 }),\n        expect.objectContaining({ name: 'ProfileChunk', pid: 1, tid: 0 }),\n        expect.objectContaining({\n          name: 'CpuProfiler::StopProfiling',\n          pid: 1,\n          tid: 0,\n        }),\n      ])\n    );\n\n    result = cpuProfilesToTraceFile([pyramideProfileInfo, stairUpProfileInfo], {\n      smosh: 'pid',\n    }) as TraceEventContainer;\n\n    expect(result.traceEvents).toHaveLength(10);\n    expect(result.traceEvents).toEqual(\n      expect.arrayContaining([\n        expect.objectContaining({\n          name: 'process_name',\n          pid: 1,\n          tid: 0,\n          args: { name: 'P:1, T:0' },\n        }),\n        expect.objectContaining({\n          name: 'CpuProfiler::StartProfiling',\n          pid: 1,\n          tid: 0,\n        }),\n        expect.objectContaining({ name: 'Profile', pid: 1, tid: 0 }),\n        expect.objectContaining({ name: 'ProfileChunk', pid: 1, tid: 0 }),\n        expect.objectContaining({\n          name: 'CpuProfiler::StopProfiling',\n          pid: 1,\n          tid: 0,\n        }),\n        expect.objectContaining({\n          name: 'process_name',\n          pid: 1,\n          tid: 1,\n          args: { name: 'P:1, T:1' },\n        }),\n        expect.objectContaining({\n          name: 'CpuProfiler::StartProfiling',\n          pid: 1,\n          tid: 1,\n        }),\n        expect.objectContaining({ name: 'Profile', pid: 1, tid: 1 }),\n        expect.objectContaining({ name: 'ProfileChunk', pid: 1, tid: 1 }),\n        expect.objectContaining({\n          name: 'CpuProfiler::StopProfiling',\n          pid: 1,\n          tid: 1,\n        }),\n      ])\n    );\n\n    result = cpuProfilesToTraceFile([pyramideProfileInfo, stairUpProfileInfo], {\n      smosh: 'tid',\n    }) as TraceEventContainer;\n\n    expect(result.traceEvents).toHaveLength(10);\n    expect(result.traceEvents).toEqual(\n      expect.arrayContaining([\n        expect.objectContaining({\n          name: 'process_name',\n          pid: 1,\n          tid: 0,\n          args: { name: 'P:1, T:0' },\n        }),\n        expect.objectContaining({\n          name: 'CpuProfiler::StartProfiling',\n          pid: 1,\n          tid: 0,\n        }),\n        expect.objectContaining({ name: 'Profile', pid: 1, tid: 0 }),\n        expect.objectContaining({ name: 'ProfileChunk', pid: 1, tid: 0 }),\n        expect.objectContaining({\n          name: 'CpuProfiler::StopProfiling',\n          pid: 1,\n          tid: 0,\n        }),\n        expect.objectContaining({\n          name: 'process_name',\n          pid: 2,\n          tid: 0,\n          args: { name: 'P:2, T:0' },\n        }),\n        expect.objectContaining({\n          name: 'CpuProfiler::StartProfiling',\n          pid: 2,\n          tid: 0,\n        }),\n        expect.objectContaining({ name: 'Profile', pid: 2, tid: 0 }),\n        expect.objectContaining({ name: 'ProfileChunk', pid: 2, tid: 0 }),\n        expect.objectContaining({\n          name: 'CpuProfiler::StopProfiling',\n          pid: 2,\n          tid: 0,\n        }),\n      ])\n    );\n  });\n\n  it('should handle profiles without explicit pid/tid by using main profile info and incrementing tid', () => {\n    const profileInfoWithPidTid = createMockCpuProfileInfo({\n      pid: 10,\n      tid: 5,\n      cpuProfile: pyramideProfile,\n    });\n    const profileInfoUndefinedPidTid = createMockCpuProfileInfo({\n      pid: undefined as any,\n      tid: undefined as any,\n      cpuProfile: stairUpProfile,\n    });\n\n    let result = cpuProfilesToTraceFile([\n      profileInfoWithPidTid,\n      profileInfoUndefinedPidTid,\n    ]) as TraceEventContainer;\n\n    expect(result.traceEvents).toEqual(\n      expect.arrayContaining([\n        // profileInfoWithPidTid events (pid: 10, tid: 5)\n        expect.objectContaining({\n          name: 'CpuProfiler::StartProfiling',\n          pid: 10,\n          tid: 5,\n        }),\n        expect.objectContaining({\n          name: 'Profile',\n          pid: 10,\n          tid: 5,\n          id: '0x1050',\n        }),\n        expect.objectContaining({\n          name: 'ProfileChunk',\n          pid: 10,\n          tid: 5,\n          id: '0x1050',\n        }),\n        expect.objectContaining({\n          name: 'CpuProfiler::StopProfiling',\n          pid: 10,\n          tid: 5,\n        }),\n        // profileInfoUndefinedPidTid events (pid: undefined, tid: undefined)\n        expect.objectContaining({\n          name: 'CpuProfiler::StartProfiling',\n          pid: undefined,\n          tid: undefined,\n        }),\n        expect.objectContaining({\n          name: 'Profile',\n          pid: undefined,\n          tid: undefined,\n          id: '0xundefinedundefined1',\n        }),\n        expect.objectContaining({\n          name: 'ProfileChunk',\n          pid: undefined,\n          tid: undefined,\n          id: '0xundefinedundefined1',\n        }),\n        expect.objectContaining({\n          name: 'CpuProfiler::StopProfiling',\n          pid: undefined,\n          tid: undefined,\n        }),\n      ])\n    );\n\n    result = cpuProfilesToTraceFile(\n      [profileInfoWithPidTid, profileInfoUndefinedPidTid],\n      { smosh: 'all' }\n    ) as TraceEventContainer;\n    expect(result.traceEvents).toEqual(\n      expect.arrayContaining([\n        expect.objectContaining({\n          name: 'CpuProfiler::StartProfiling',\n          pid: 10,\n          tid: 5,\n        }),\n        expect.objectContaining({\n          name: 'CpuProfiler::StartProfiling',\n          pid: 10,\n          tid: 5,\n        }),\n      ])\n    );\n\n    result = cpuProfilesToTraceFile(\n      [profileInfoWithPidTid, profileInfoUndefinedPidTid],\n      { smosh: 'pid' }\n    ) as TraceEventContainer;\n    expect(result.traceEvents).toEqual(\n      expect.arrayContaining([\n        expect.objectContaining({\n          name: 'CpuProfiler::StartProfiling',\n          pid: 10,\n          tid: 0,\n        }),\n        expect.objectContaining({\n          name: 'Profile',\n          pid: 10,\n          tid: 0,\n          id: '0x1000',\n        }),\n        expect.objectContaining({\n          name: 'ProfileChunk',\n          pid: 10,\n          tid: 0,\n          id: '0x1000',\n        }),\n        expect.objectContaining({\n          name: 'CpuProfiler::StopProfiling',\n          pid: 10,\n          tid: 0,\n        }),\n        expect.objectContaining({\n          name: 'CpuProfiler::StartProfiling',\n          pid: 10,\n          tid: 1,\n        }),\n        expect.objectContaining({\n          name: 'Profile',\n          pid: 10,\n          tid: 1,\n          id: '0x1011',\n        }),\n        expect.objectContaining({\n          name: 'ProfileChunk',\n          pid: 10,\n          tid: 1,\n          id: '0x1011',\n        }),\n        expect.objectContaining({\n          name: 'CpuProfiler::StopProfiling',\n          pid: 10,\n          tid: 1,\n        }),\n      ])\n    );\n\n    result = cpuProfilesToTraceFile(\n      [profileInfoWithPidTid, profileInfoUndefinedPidTid],\n      { smosh: 'tid' }\n    ) as TraceEventContainer;\n    expect(result.traceEvents).toEqual(\n      expect.arrayContaining([\n        expect.objectContaining({\n          name: 'CpuProfiler::StartProfiling',\n          pid: 10,\n          tid: 5,\n        }),\n        expect.objectContaining({\n          name: 'CpuProfiler::StartProfiling',\n          pid: 10,\n          tid: 5,\n        }),\n      ])\n    );\n  });\n\n  describe('startTracingInBrowser option', () => {\n    it('should add TracingStartedInBrowser events when startTracingInBrowser is true', () => {\n      const profileInfo = createMockCpuProfileInfo({\n        cpuProfile: pyramideProfile,\n      });\n      const result = cpuProfilesToTraceFile([profileInfo], {\n        startTracingInBrowser: true,\n      }) as TraceEventContainer;\n\n      expect(result.traceEvents).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({\n            name: 'thread_name',\n            args: { name: 'CrRendererMain' },\n          }),\n          expect.objectContaining({\n            name: 'CommitLoad',\n          }),\n          expect.objectContaining({\n            name: 'TracingStartedInBrowser',\n          }),\n        ])\n      );\n    });\n\n    it('should not add TracingStartedInBrowser events when startTracingInBrowser is false or undefined', () => {\n      const profileInfo = createMockCpuProfileInfo({\n        cpuProfile: pyramideProfile,\n      });\n      const result1 = cpuProfilesToTraceFile([profileInfo], {\n        startTracingInBrowser: false,\n      }) as TraceEventContainer;\n      const result2 = cpuProfilesToTraceFile([\n        profileInfo,\n      ]) as TraceEventContainer;\n\n      [result1, result2].forEach((result) => {\n        expect(result.traceEvents).not.toEqual(\n          expect.arrayContaining([\n            expect.objectContaining({\n              name: 'TracingStartedInBrowser',\n            }),\n          ])\n        );\n      });\n    });\n  });\n\n  describe('error handling', () => {\n    it('should throw error when no CPU profiles are provided', () => {\n      expect(() => cpuProfilesToTraceFile([])).toThrow(\n        'No CPU profiles provided'\n      );\n    });\n  });\n\n  describe('edge cases', () => {\n    it('should handle CPU profile with undefined startTime', () => {\n      const cpuProfileWithUndefinedStartTime: CPUProfile = {\n        ...pyramideProfile,\n        // @ts-expect-error Testing with undefined startTime\n        startTime: undefined,\n      };\n      const profileInfo = createMockCpuProfileInfo({\n        cpuProfile: cpuProfileWithUndefinedStartTime,\n      });\n\n      const result = cpuProfilesToTraceFile([\n        profileInfo,\n      ]) as TraceEventContainer;\n\n      expect(result.traceEvents).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({\n            name: 'CpuProfiler::StartProfiling',\n            ts: 1, // should default to 1\n          }),\n        ])\n      );\n    });\n\n    it('should handle CPU profile with zero startTime', () => {\n      const cpuProfileWithZeroStartTime: CPUProfile = {\n        ...pyramideProfile,\n        startTime: 0,\n      };\n      const profileInfo = createMockCpuProfileInfo({\n        cpuProfile: cpuProfileWithZeroStartTime,\n      });\n\n      const result = cpuProfilesToTraceFile([\n        profileInfo,\n      ]) as TraceEventContainer;\n\n      expect(result.traceEvents).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({\n            name: 'CpuProfiler::StartProfiling',\n            ts: 0, // should preserve 0\n          }),\n        ])\n      );\n    });\n\n    it('should handle sequences correctly for multiple profiles', () => {\n      const profileInfo1 = createMockCpuProfileInfo({\n        cpuProfile: pyramideProfile,\n        sequence: 5,\n      });\n      const profileInfo2 = createMockCpuProfileInfo({\n        cpuProfile: stairUpProfile,\n        tid: 1,\n        sequence: 1,\n      });\n      const result = cpuProfilesToTraceFile([\n        profileInfo1,\n        profileInfo2,\n      ]) as TraceEventContainer;\n\n      expect(result.traceEvents).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({\n            name: 'Profile',\n            id: '0x105',\n          }),\n          expect.objectContaining({\n            name: 'Profile',\n            id: '0x111',\n          }),\n        ])\n      );\n    });\n\n    it('should return TraceEventContainer structure', () => {\n      const profileInfo = createMockCpuProfileInfo({\n        cpuProfile: pyramideProfile,\n      });\n      const result = cpuProfilesToTraceFile([profileInfo]);\n\n      expect(result).toHaveProperty('traceEvents');\n      expect(result).toHaveProperty('metadata');\n      expect(Array.isArray((result as TraceEventContainer).traceEvents)).toBe(\n        true\n      );\n      expect(typeof (result as TraceEventContainer).metadata).toBe('object');\n    });\n  });\n\n  describe('smoshCpuProfiles', () => {\n    it('should return original profile infos when smosh is \"off\"', () => {\n      const pyramideProfileInfo = createMockCpuProfileInfo({\n        pid: 1,\n        tid: 0,\n        cpuProfile: pyramideProfile as CPUProfile,\n      });\n      const stairUpProfileInfo = createMockCpuProfileInfo({\n        pid: 2,\n        tid: 0,\n        cpuProfile: stairUpProfile as CPUProfile,\n      });\n      const profileInfos: CpuProfileInfo[] = [\n        pyramideProfileInfo,\n        stairUpProfileInfo,\n      ];\n      const result = smoshCpuProfiles(profileInfos, {\n        smosh: 'off',\n        mainPid: 1,\n        mainTid: 0,\n      });\n\n      expect(result).toHaveLength(2);\n      expect(result).toStrictEqual([\n        expect.objectContaining({\n          pid: pyramideProfileInfo.pid,\n          tid: pyramideProfileInfo.tid,\n        }),\n        expect.objectContaining({\n          pid: stairUpProfileInfo.pid,\n          tid: stairUpProfileInfo.tid,\n        }),\n      ]);\n    });\n\n    it('should default to smosh \"off\" if options.smosh is not explicitly passed (by internal default)', () => {\n      const pyramideProfileInfo = createMockCpuProfileInfo({\n        pid: 1,\n        tid: 0,\n        cpuProfile: pyramideProfile as CPUProfile,\n      });\n      const stairUpProfileInfo = createMockCpuProfileInfo({\n        pid: 2,\n        tid: 0,\n        cpuProfile: stairUpProfile as CPUProfile,\n      });\n      const profileInfos: CpuProfileInfo[] = [\n        pyramideProfileInfo,\n        stairUpProfileInfo,\n      ];\n      const result = smoshCpuProfiles(profileInfos, {\n        mainPid: 1,\n        mainTid: 0,\n      } as any);\n\n      expect(result).toHaveLength(2);\n      expect(result).toStrictEqual([\n        expect.objectContaining({\n          pid: pyramideProfileInfo.pid,\n          tid: pyramideProfileInfo.tid,\n        }),\n        expect.objectContaining({\n          pid: stairUpProfileInfo.pid,\n          tid: stairUpProfileInfo.tid,\n        }),\n      ]);\n    });\n\n    it('should smosh all profile infos to mainPid and mainTid when smosh is \"all\"', () => {\n      const pyramideProfileInfo = createMockCpuProfileInfo({\n        pid: 1,\n        tid: 0,\n        cpuProfile: pyramideProfile as CPUProfile,\n      });\n      const stairUpProfileInfo = createMockCpuProfileInfo({\n        pid: 2,\n        tid: 0,\n        cpuProfile: stairUpProfile as CPUProfile,\n      });\n      const profileInfos: CpuProfileInfo[] = [\n        pyramideProfileInfo,\n        stairUpProfileInfo,\n      ];\n      const result = smoshCpuProfiles(profileInfos, {\n        smosh: 'all',\n        mainPid: 1,\n        mainTid: 0,\n      });\n\n      expect(result).toHaveLength(2);\n      expect(result).toStrictEqual([\n        expect.objectContaining({ pid: 1, tid: 0 }),\n        expect.objectContaining({ pid: 1, tid: 0 }),\n      ]);\n    });\n\n    it('should smosh all profile infos to mainPid and assign unique tids when smosh is \"pid\"', () => {\n      const pyramideProfileInfo = createMockCpuProfileInfo({\n        pid: 1,\n        tid: 0,\n        cpuProfile: pyramideProfile as CPUProfile,\n      });\n      const stairUpProfileInfo = createMockCpuProfileInfo({\n        pid: 2,\n        tid: 0,\n        cpuProfile: stairUpProfile as CPUProfile,\n      });\n      const profileInfos: CpuProfileInfo[] = [\n        pyramideProfileInfo,\n        stairUpProfileInfo,\n      ];\n      const result = smoshCpuProfiles(profileInfos, {\n        smosh: 'pid',\n        mainPid: 1,\n        mainTid: 0,\n      });\n\n      expect(result).toHaveLength(2);\n      expect(result).toStrictEqual([\n        expect.objectContaining({ pid: 1, tid: 0 }),\n        expect.objectContaining({ pid: 1, tid: 1 }),\n      ]);\n    });\n\n    it('should smosh all profile infos to mainTid and keep original pids when smosh is \"tid\"', () => {\n      const pyramideProfileInfo = createMockCpuProfileInfo({\n        pid: 1,\n        tid: 0,\n        cpuProfile: pyramideProfile as CPUProfile,\n      });\n      const stairUpProfileInfo = createMockCpuProfileInfo({\n        pid: 2,\n        tid: 1,\n        cpuProfile: stairUpProfile as CPUProfile,\n      });\n      const profileInfos: CpuProfileInfo[] = [\n        pyramideProfileInfo,\n        stairUpProfileInfo,\n      ];\n      const result = smoshCpuProfiles(profileInfos, {\n        smosh: 'tid',\n        mainPid: 1,\n        mainTid: 0,\n      });\n\n      expect(result).toHaveLength(2);\n      expect(result).toStrictEqual([\n        expect.objectContaining({\n          pid: pyramideProfileInfo.pid,\n          tid: 0,\n        }),\n        expect.objectContaining({\n          pid: stairUpProfileInfo.pid,\n          tid: 0,\n        }),\n      ]);\n    });\n  });\n});\n","stats":{"times":{"passes":[{"parse":{"total":9.180917},"rules":{"for-direction":{"total":0.003666},"no-async-promise-executor":{"total":0.000458},"no-case-declarations":{"total":0.000292},"no-compare-neg-zero":{"total":0.0015},"no-cond-assign":{"total":0.001084},"no-constant-binary-expression":{"total":0.000333},"no-constant-condition":{"total":0.001125},"no-control-regex":{"total":0.06732700000000004},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.0008749999999999999},"no-dupe-else-if":{"total":0.000416},"no-duplicate-case":{"total":0.000292},"no-empty":{"total":0.004959000000000002},"no-empty-character-class":{"total":0.000208},"no-empty-pattern":{"total":0.000458},"no-empty-static-block":{"total":0.000334},"no-ex-assign":{"total":0.000333},"no-extra-boolean-cast":{"total":0.044992000000000025},"no-fallthrough":{"total":0.028834000000000016},"no-global-assign":{"total":0.0185},"no-invalid-regexp":{"total":0.04349600000000002},"no-irregular-whitespace":{"total":0.037},"no-loss-of-precision":{"total":0.21791599999999847},"no-misleading-character-class":{"total":0.009833999999999999},"no-nonoctal-decimal-escape":{"total":0.06405200000000007},"no-octal":{"total":0.05182700000000003},"no-prototype-builtins":{"total":0.05625200000000004},"no-regex-spaces":{"total":0.23733599999999816},"no-self-assign":{"total":0.008042},"no-shadow-restricted-names":{"total":0.028664000000000016},"no-sparse-arrays":{"total":0.07730100000000002},"no-unsafe-finally":{"total":0.000333},"no-unsafe-optional-chaining":{"total":0.09599300000000006},"no-unused-labels":{"total":0.000417},"no-unused-private-class-members":{"total":0.000333},"no-useless-backreference":{"total":0.0025},"no-useless-catch":{"total":0.00025},"no-useless-escape":{"total":0.08720300000000006},"require-yield":{"total":0.000375},"use-isnan":{"total":0.0035},"valid-typeof":{"total":0.003249},"no-var":{"total":0.007541000000000003},"prefer-const":{"total":0.020913},"prefer-rest-params":{"total":0.000459},"prefer-spread":{"total":0.04125200000000003},"@typescript-eslint/ban-ts-comment":{"total":0.1025},"@typescript-eslint/no-array-constructor":{"total":0.04745800000000002},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001042},"@typescript-eslint/no-empty-object-type":{"total":0.00325},"@typescript-eslint/no-explicit-any":{"total":0.026458},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000916},"@typescript-eslint/no-misused-new":{"total":0.000917},"@typescript-eslint/no-namespace":{"total":0.002},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000875},"@typescript-eslint/no-this-alias":{"total":0.002292},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.005916},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001083},"@typescript-eslint/no-unsafe-function-type":{"total":0.013291000000000002},"@typescript-eslint/no-unused-expressions":{"total":0.04712400000000002},"@typescript-eslint/no-unused-vars":{"total":2.4627090000000003},"@typescript-eslint/no-wrapper-object-types":{"total":0.023586000000000003},"@typescript-eslint/prefer-as-const":{"total":0.02154300000000001},"@typescript-eslint/prefer-namespace-keyword":{"total":0.00075},"@typescript-eslint/triple-slash-reference":{"total":0.008747999999999999},"@typescript-eslint/no-non-null-assertion":{"total":0.000875},"@typescript-eslint/adjacent-overload-signatures":{"total":0.042252000000000026},"@typescript-eslint/no-empty-function":{"total":0.21579199999999993},"@typescript-eslint/no-inferrable-types":{"total":0.023002000000000012},"@typescript-eslint/no-empty-interface":{"total":0.001666},"@nx/enforce-module-boundaries":{"total":0.08491799999999998}},"fix":{"total":0},"total":20.085417}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/lib/utils/encode-command-data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.676084},"rules":{"for-direction":{"total":0.001625},"no-async-promise-executor":{"total":0.000292},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.001875},"no-cond-assign":{"total":0.001832},"no-constant-binary-expression":{"total":0.0032500000000000003},"no-constant-condition":{"total":0.02025},"no-control-regex":{"total":0.056206000000000006},"no-debugger":{"total":0.000291},"no-delete-var":{"total":0.000209},"no-dupe-else-if":{"total":0.000375},"no-duplicate-case":{"total":0.00025},"no-empty":{"total":0.000916},"no-empty-character-class":{"total":0.0025009999999999998},"no-empty-pattern":{"total":0.000458},"no-empty-static-block":{"total":0.00025},"no-ex-assign":{"total":0.00025},"no-extra-boolean-cast":{"total":0.0026260000000000003},"no-fallthrough":{"total":0.010789000000000002},"no-global-assign":{"total":0.021041},"no-invalid-regexp":{"total":0.0022930000000000008},"no-irregular-whitespace":{"total":0.002041},"no-loss-of-precision":{"total":0.008622},"no-misleading-character-class":{"total":0.075458},"no-nonoctal-decimal-escape":{"total":0.00396},"no-octal":{"total":0.0025010000000000006},"no-prototype-builtins":{"total":0.0037920000000000002},"no-regex-spaces":{"total":0.012290000000000002},"no-self-assign":{"total":0.000833},"no-shadow-restricted-names":{"total":0.00275},"no-sparse-arrays":{"total":0.000626},"no-unsafe-finally":{"total":0.002916},"no-unsafe-optional-chaining":{"total":0.009501000000000002},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000292},"no-useless-backreference":{"total":0.033542},"no-useless-catch":{"total":0.00025},"no-useless-escape":{"total":0.084043},"require-yield":{"total":0.0013739999999999998},"use-isnan":{"total":0.002375},"valid-typeof":{"total":0.0017490000000000001},"no-var":{"total":0.0008749999999999999},"prefer-const":{"total":0.006625000000000001},"prefer-rest-params":{"total":0.002249},"prefer-spread":{"total":0.0021240000000000005},"@typescript-eslint/ban-ts-comment":{"total":0.005542},"@typescript-eslint/no-array-constructor":{"total":0.00271},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000917},"@typescript-eslint/no-empty-object-type":{"total":0.005541},"@typescript-eslint/no-explicit-any":{"total":0.001917},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000833},"@typescript-eslint/no-misused-new":{"total":0.000917},"@typescript-eslint/no-namespace":{"total":0.002208},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001291},"@typescript-eslint/no-this-alias":{"total":0.002166},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.004541},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.00125},"@typescript-eslint/no-unsafe-function-type":{"total":0.001084},"@typescript-eslint/no-unused-expressions":{"total":0.012583},"@typescript-eslint/no-unused-vars":{"total":0.972125},"@typescript-eslint/no-wrapper-object-types":{"total":0.001042},"@typescript-eslint/prefer-as-const":{"total":0.001417},"@typescript-eslint/prefer-namespace-keyword":{"total":0.00075},"@typescript-eslint/triple-slash-reference":{"total":0.004749},"@typescript-eslint/no-non-null-assertion":{"total":0.000792},"@typescript-eslint/adjacent-overload-signatures":{"total":0.006042},"@typescript-eslint/no-empty-function":{"total":0.014417},"@typescript-eslint/no-inferrable-types":{"total":0.005748999999999999},"@typescript-eslint/no-empty-interface":{"total":0.001458},"@nx/enforce-module-boundaries":{"total":0.013374}},"fix":{"total":0},"total":3.259458}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/src/mocks/fixture/child-process.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.195792},"rules":{"for-direction":{"total":0.002041},"no-async-promise-executor":{"total":0.00025},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.000959},"no-cond-assign":{"total":0.000833},"no-constant-binary-expression":{"total":0.000333},"no-constant-condition":{"total":0.000875},"no-control-regex":{"total":0.000709},"no-debugger":{"total":0.000291},"no-delete-var":{"total":0.00025},"no-dupe-else-if":{"total":0.000333},"no-duplicate-case":{"total":0.000333},"no-empty":{"total":0.0005},"no-empty-character-class":{"total":0.000208},"no-empty-pattern":{"total":0.0005},"no-empty-static-block":{"total":0.000291},"no-ex-assign":{"total":0.000334},"no-extra-boolean-cast":{"total":0.001291},"no-fallthrough":{"total":0.00225},"no-global-assign":{"total":0.017834},"no-invalid-regexp":{"total":0.000876},"no-irregular-whitespace":{"total":0.00125},"no-loss-of-precision":{"total":0.000875},"no-misleading-character-class":{"total":0.006625000000000001},"no-nonoctal-decimal-escape":{"total":0.000459},"no-octal":{"total":0.000626},"no-prototype-builtins":{"total":0.001041},"no-regex-spaces":{"total":0.0013740000000000002},"no-self-assign":{"total":0.000458},"no-shadow-restricted-names":{"total":0.000625},"no-sparse-arrays":{"total":0.000292},"no-unsafe-finally":{"total":0.00025},"no-unsafe-optional-chaining":{"total":0.001625},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000334},"no-useless-backreference":{"total":0.0025},"no-useless-catch":{"total":0.000167},"no-useless-escape":{"total":0.0015409999999999998},"require-yield":{"total":0.000333},"use-isnan":{"total":0.001},"valid-typeof":{"total":0.0013750000000000001},"no-var":{"total":0.000292},"prefer-const":{"total":0.001125},"prefer-rest-params":{"total":0.000291},"prefer-spread":{"total":0.0006659999999999999},"@typescript-eslint/ban-ts-comment":{"total":0.009625},"@typescript-eslint/no-array-constructor":{"total":0.001333},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000917},"@typescript-eslint/no-empty-object-type":{"total":0.0025},"@typescript-eslint/no-explicit-any":{"total":0.002083},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000792},"@typescript-eslint/no-misused-new":{"total":0.000833},"@typescript-eslint/no-namespace":{"total":0.001917},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000833},"@typescript-eslint/no-this-alias":{"total":0.002041},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.003709},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.000958},"@typescript-eslint/no-unsafe-function-type":{"total":0.000791},"@typescript-eslint/no-unused-expressions":{"total":0.011458},"@typescript-eslint/no-unused-vars":{"total":0.300583},"@typescript-eslint/no-wrapper-object-types":{"total":0.001084},"@typescript-eslint/prefer-as-const":{"total":0.000833},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000708},"@typescript-eslint/triple-slash-reference":{"total":0.0048330000000000005},"@typescript-eslint/no-non-null-assertion":{"total":0.00075},"@typescript-eslint/adjacent-overload-signatures":{"total":0.001792},"@typescript-eslint/no-empty-function":{"total":0.004166},"@typescript-eslint/no-inferrable-types":{"total":0.004166},"@typescript-eslint/no-empty-interface":{"total":0.002542}},"fix":{"total":0},"total":1.555333}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/tsconfig.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.081333},"rules":{"@nx/dependency-checks":{"total":0.072417}},"fix":{"total":0},"total":0.794542}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/tsconfig.lib.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.198792},"rules":{"@nx/dependency-checks":{"total":0.023542}},"fix":{"total":0},"total":0.940375}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/tsconfig.spec.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.141833},"rules":{"@nx/dependency-checks":{"total":0.017667}},"fix":{"total":0},"total":0.844208}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/vitest.integration.config.ts","messages":[{"ruleId":"@nx/enforce-module-boundaries","severity":2,"message":"Projects cannot be imported by a relative or absolute path, and must begin with a npm scope","line":2,"column":1,"nodeType":"ImportDeclaration","messageId":"noRelativeOrAbsoluteImportsAcrossLibraries","endLine":2,"endColumn":104}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { defineConfig } from 'vitest/config';\nimport { createSharedIntegrationVitestConfig } from '../../testing/vitest-setup/src/lib/configuration';\n\nexport default defineConfig(() => {\n  const baseConfig = createSharedIntegrationVitestConfig({\n    projectRoot: __dirname,\n    workspaceRoot: '../..',\n  });\n\n  return {\n    ...baseConfig,\n    plugins: [],\n    // Uncomment this if you are using workers.\n    // worker: {\n    //  plugins: [ nxViteTsPaths() ],\n    // },\n    test: {\n      ...baseConfig.test,\n      setupFiles: ['../../testing/setup/src/reset.setup-file.ts'],\n      coverage: {\n        ...baseConfig.test.coverage,\n        exclude: [\n          ...baseConfig.test.coverage.exclude,\n          'src/bin/**',\n          'src/cli/commands/trace-reduce/**',\n        ],\n      },\n    },\n  };\n});\n","stats":{"times":{"passes":[{"parse":{"total":0.429292},"rules":{"for-direction":{"total":0.001542},"no-async-promise-executor":{"total":0.000291},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.000875},"no-cond-assign":{"total":0.000875},"no-constant-binary-expression":{"total":0.000334},"no-constant-condition":{"total":0.000959},"no-control-regex":{"total":0.0017920000000000002},"no-debugger":{"total":0.000291},"no-delete-var":{"total":0.000209},"no-dupe-else-if":{"total":0.000333},"no-duplicate-case":{"total":0.000291},"no-empty":{"total":0.0008320000000000001},"no-empty-character-class":{"total":0.000208},"no-empty-pattern":{"total":0.000458},"no-empty-static-block":{"total":0.00025},"no-ex-assign":{"total":0.000292},"no-extra-boolean-cast":{"total":0.0016259999999999998},"no-fallthrough":{"total":0.004084999999999999},"no-global-assign":{"total":0.017583},"no-invalid-regexp":{"total":0.001126},"no-irregular-whitespace":{"total":0.002584},"no-loss-of-precision":{"total":0.0014160000000000004},"no-misleading-character-class":{"total":0.006625},"no-nonoctal-decimal-escape":{"total":0.0018750000000000001},"no-octal":{"total":0.001167},"no-prototype-builtins":{"total":0.00125},"no-regex-spaces":{"total":0.0032060000000000005},"no-self-assign":{"total":0.000459},"no-shadow-restricted-names":{"total":0.002291},"no-sparse-arrays":{"total":0.000959},"no-unsafe-finally":{"total":0.001624},"no-unsafe-optional-chaining":{"total":0.003586},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000375},"no-useless-backreference":{"total":0.002125},"no-useless-catch":{"total":0.000209},"no-useless-escape":{"total":0.0032909999999999997},"require-yield":{"total":0.000333},"use-isnan":{"total":0.000958},"valid-typeof":{"total":0.001458},"no-var":{"total":0.0005},"prefer-const":{"total":0.001292},"prefer-rest-params":{"total":0.000333},"prefer-spread":{"total":0.000916},"@typescript-eslint/ban-ts-comment":{"total":0.009292},"@typescript-eslint/no-array-constructor":{"total":0.001542},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000875},"@typescript-eslint/no-empty-object-type":{"total":0.002333},"@typescript-eslint/no-explicit-any":{"total":0.001833},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000917},"@typescript-eslint/no-misused-new":{"total":0.000917},"@typescript-eslint/no-namespace":{"total":0.001833},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000917},"@typescript-eslint/no-this-alias":{"total":0.002},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.003667},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.00125},"@typescript-eslint/no-unsafe-function-type":{"total":0.000833},"@typescript-eslint/no-unused-expressions":{"total":0.006875},"@typescript-eslint/no-unused-vars":{"total":0.334083},"@typescript-eslint/no-wrapper-object-types":{"total":0.001375},"@typescript-eslint/prefer-as-const":{"total":0.001124},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001208},"@typescript-eslint/triple-slash-reference":{"total":0.007001},"@typescript-eslint/no-non-null-assertion":{"total":0.000834},"@typescript-eslint/adjacent-overload-signatures":{"total":0.003333},"@typescript-eslint/no-empty-function":{"total":0.009874},"@typescript-eslint/no-inferrable-types":{"total":0.004084},"@typescript-eslint/no-empty-interface":{"total":0.001541},"@nx/enforce-module-boundaries":{"total":0.434374}},"fix":{"total":0},"total":2.283292}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/cpu-prof/packages/cpu-prof/vitest.unit.config.ts","messages":[{"ruleId":"@nx/enforce-module-boundaries","severity":2,"message":"Projects cannot be imported by a relative or absolute path, and must begin with a npm scope","line":2,"column":1,"nodeType":"ImportDeclaration","messageId":"noRelativeOrAbsoluteImportsAcrossLibraries","endLine":2,"endColumn":97}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { defineConfig } from 'vitest/config';\nimport { createSharedUnitVitestConfig } from '../../testing/vitest-setup/src/lib/configuration';\nimport * as path from 'path';\n\nexport default defineConfig(() => {\n  const baseConfig = createSharedUnitVitestConfig({\n    projectRoot: __dirname,\n    workspaceRoot: '../..',\n  });\n\n  return {\n    ...baseConfig,\n    plugins: [],\n    resolve: {\n      alias: {\n        '@push-based/testing-utils': path.resolve(\n          __dirname,\n          '../../testing/utils/src'\n        ),\n      },\n    },\n    test: {\n      ...baseConfig.test,\n      setupFiles: [\n        '../../testing/vitest-setup/src/lib/fs-memfs.setup-file.ts',\n        '../../testing/setup/src/reset.setup-file.ts',\n        '../../testing/setup/src/console.setup-file.ts',\n      ],\n      coverage: {\n        ...baseConfig.test.coverage,\n        exclude: [\n          ...baseConfig.test.coverage.exclude,\n          'src/bin/**',\n          'src/cli/commands/trace-reduce/**',\n        ],\n      },\n    },\n  };\n});\n","stats":{"times":{"passes":[{"parse":{"total":0.405833},"rules":{"for-direction":{"total":0.001542},"no-async-promise-executor":{"total":0.000292},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.000917},"no-cond-assign":{"total":0.00075},"no-constant-binary-expression":{"total":0.000292},"no-constant-condition":{"total":0.000958},"no-control-regex":{"total":0.0022480000000000004},"no-debugger":{"total":0.000292},"no-delete-var":{"total":0.000208},"no-dupe-else-if":{"total":0.000333},"no-duplicate-case":{"total":0.00025},"no-empty":{"total":0.00075},"no-empty-character-class":{"total":0.00025},"no-empty-pattern":{"total":0.000417},"no-empty-static-block":{"total":0.000375},"no-ex-assign":{"total":0.00025},"no-extra-boolean-cast":{"total":0.00179},"no-fallthrough":{"total":0.004206},"no-global-assign":{"total":0.018791000000000002},"no-invalid-regexp":{"total":0.001209},"no-irregular-whitespace":{"total":0.0030830000000000002},"no-loss-of-precision":{"total":0.002125},"no-misleading-character-class":{"total":0.006667},"no-nonoctal-decimal-escape":{"total":0.0025840000000000004},"no-octal":{"total":0.0014559999999999998},"no-prototype-builtins":{"total":0.001667},"no-regex-spaces":{"total":0.004043},"no-self-assign":{"total":0.0005},"no-shadow-restricted-names":{"total":0.0028309999999999997},"no-sparse-arrays":{"total":0.0010409999999999998},"no-unsafe-finally":{"total":0.001416},"no-unsafe-optional-chaining":{"total":0.003705000000000001},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000333},"no-useless-backreference":{"total":0.002208},"no-useless-catch":{"total":0.000333},"no-useless-escape":{"total":0.004208},"require-yield":{"total":0.000459},"use-isnan":{"total":0.001083},"valid-typeof":{"total":0.001376},"no-var":{"total":0.0005},"prefer-const":{"total":0.001374},"prefer-rest-params":{"total":0.000291},"prefer-spread":{"total":0.0011660000000000002},"@typescript-eslint/ban-ts-comment":{"total":0.005542},"@typescript-eslint/no-array-constructor":{"total":0.001707},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000917},"@typescript-eslint/no-empty-object-type":{"total":0.002167},"@typescript-eslint/no-explicit-any":{"total":0.001833},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000792},"@typescript-eslint/no-misused-new":{"total":0.000791},"@typescript-eslint/no-namespace":{"total":0.00175},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000875},"@typescript-eslint/no-this-alias":{"total":0.001833},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.003167},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.000958},"@typescript-eslint/no-unsafe-function-type":{"total":0.000833},"@typescript-eslint/no-unused-expressions":{"total":0.005917},"@typescript-eslint/no-unused-vars":{"total":0.35754199999999997},"@typescript-eslint/no-wrapper-object-types":{"total":0.001084},"@typescript-eslint/prefer-as-const":{"total":0.001001},"@typescript-eslint/prefer-namespace-keyword":{"total":0.00075},"@typescript-eslint/triple-slash-reference":{"total":0.005834},"@typescript-eslint/no-non-null-assertion":{"total":0.00075},"@typescript-eslint/adjacent-overload-signatures":{"total":0.0033759999999999997},"@typescript-eslint/no-empty-function":{"total":0.009333},"@typescript-eslint/no-inferrable-types":{"total":0.004166},"@typescript-eslint/no-empty-interface":{"total":0.0015},"@nx/enforce-module-boundaries":{"total":0.144166}},"fix":{"total":0},"total":1.988917}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]}]